# TestSSCommands.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2024 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation import *
import sys
import keyboard

# constants

_CALIBRATION_RECORD_LENGTH = 16384
_CALIBRATION_FILE_NAME = "[Temp]/ss_test_cal.csv"
_TEMPORARY_FILE_NAME = "[Temp]/ss_test_temp.csv"
_DEFAULT_CALIBRATION_RECORD_LENGTH = 16384
_DEFAULT_CALIBRATION_FILE_NAME = "/home/stepscope/Share/Tables/Tdr_Cal.csv"

# global variables

_verbose_flag = False
_stepscope = StepscopeDevice()


def unit_test_set_diff_mode(new_value: bool):
    if _verbose_flag:
        print("Perform test unit_test_set_diff_mode: set to " + str(new_value))

    if _verbose_flag:
        print("  set UseDiff to " + str(new_value))

    _stepscope.Tdr.Cfg.setUseDiff(new_value)
    read_back_diff_mode = _stepscope.Tdr.Cfg.getUseDiff()

    if _verbose_flag:
        print("  read back UseDiff is " + str(read_back_diff_mode))

    if read_back_diff_mode != new_value:
        raise Exception("Error setting UseDiff")

    if _verbose_flag:
        print("  test unit_test_set_diff_mode is successful")

    return None


def unit_test_calibration_steps():
    if _verbose_flag:
        print("Perform test unit_test_calibration_steps:")

    # =====================================================================
    # =====================================================================

    # if _verbose_flag:
    #     print("  clear existing calibration")
    # _stepscope.Tdr.ClearCal()

    if _verbose_flag:
        print("  set CalReclen to " + str(_CALIBRATION_RECORD_LENGTH))

    _stepscope.Tdr.Cfg.setCalReclen(_CALIBRATION_RECORD_LENGTH)
    read_back_cal_reclen = _stepscope.Tdr.Cfg.getCalReclen()

    if read_back_cal_reclen != _CALIBRATION_RECORD_LENGTH:
        raise Exception("Error setting CalReclen")

    # ==================================
    # ==================================

    print("  CALIBRATION STEP ONE:")
    print("    To perform TDR Short calibration, connect a 0-Ohm short to the signal at the")
    print("    Reference Plane.  For single-ended case, connect a 50-Ohm terminator")
    print("    directly to the port you are not using.  For differential case, use two 0-Ohm")
    print("    shorts located at the Reference Plane.")
    print("  Press any key to continue, or 'q' to quit")

    key = keyboard.read_key()
    if key == 'q':
        raise Exception("User cancel")

    _stepscope.Tdr.RunShortCal()
    start_time = time.time()
    end_time = start_time + 90

    try:
        print("  ", end="")

        while time.time() < end_time:
            print(".", end="")

            state = _stepscope.Tdr.getCalState()
            if state == BranchTdr.CalState.Fail:
                print("Failure message: " + _stepscope.Announce.getMsg())
                raise Exception("Short Calibration failed")

            elif state == BranchTdr.CalState.Success:
                break

            time.sleep(0.250)
    except Exception as e:
        raise e
    finally:
        print("")

    if time.time() >= end_time:
        if _verbose_flag:
            print("  Canceling Short Calibration")
        _stepscope.Tdr.CancelCal()
        raise Exception("Timeout during Short Calibration")

    # ==================================
    # ==================================

    print("  CALIBRATION STEP TWO:")
    print("    To perform TDR Termination calibration, connect a 50-Ohm terminator to the")
    print("    signal at the Reference Plane.  For single-ended case, connect another 50-Ohm")
    print("    terminator directly to the port you are not using.  For differential case, use")
    print("    two 50-Ohm terminators located at the Reference Plane.")
    print("  Press any key to continue, or 'q' to quit")

    key = keyboard.read_key()
    if key == 'q':
        raise Exception("User cancel")

    _stepscope.Tdr.RunTermCal()
    start_time = time.time()
    end_time = start_time + 90

    try:
        print("  ", end="")

        while time.time() < end_time:
            print(".", end="")

            status = _stepscope.Tdr.getStatusMsg()
            state = _stepscope.Tdr.getCalState()
            if state == BranchTdr.CalState.Fail:
                print("Failure message: " + _stepscope.Announce.getMsg())
                raise Exception("Termination Calibration failed")

            elif state == BranchTdr.CalState.Success:
                break

            time.sleep(0.250)
    except Exception as e:
        raise e
    finally:
        print("")

    if time.time() >= end_time:
        if _verbose_flag:
            print("  Canceling Termination Calibration")
        _stepscope.Tdr.CancelCal()
        raise Exception("Timeout during Termination Calibration")

    if _verbose_flag:
        print("  test unit_test_calibration_steps is successful")

    return None


def unit_test_calibration_files():
    if _verbose_flag:
        print("Perform test unit_test_calibration_files:")

    cal_file_path = _stepscope.Tdr.getCalFile()

    if _verbose_flag:
        print("  cal file is " + cal_file_path)

    clean_up_temporary_folder()

    if cal_file_path != "[none]":
        if _verbose_flag:
            print("  backup calibration file to " + _TEMPORARY_FILE_NAME)

        _stepscope.File.Copy(cal_file_path, _TEMPORARY_FILE_NAME)
        time.sleep(2.0)

        if _verbose_flag:
            print("  rename temporary file to " + _CALIBRATION_FILE_NAME)

        _stepscope.File.Rename(_TEMPORARY_FILE_NAME, _CALIBRATION_FILE_NAME)

        if _verbose_flag:
            print("  load calibration file " + _CALIBRATION_FILE_NAME)

        _stepscope.Tdr.setLoadCalFile(_CALIBRATION_FILE_NAME)

        if _verbose_flag:
            print("  retrieve calibration file and save locally in saved_cal_file.csv")

        file_contents = _stepscope.File.Fetch(_CALIBRATION_FILE_NAME)
        with open("saved_cal_file.csv", "w") as file:
            file.write(file_contents.decode("utf-8"))

    # ==================================
    # ==================================

    if _verbose_flag:
        print("  test unit_test_calibration_files is successful")

    return None


def clean_up_temporary_folder():
    if _verbose_flag:
        print("  clean temporary folder")

    if _stepscope.File.Exists(_TEMPORARY_FILE_NAME):
        print("SAYS FILE EXISTS")

        if _verbose_flag:
            print("  delete existing " + _TEMPORARY_FILE_NAME)

        _stepscope.File.Del(_TEMPORARY_FILE_NAME)

    if _stepscope.File.Exists(_CALIBRATION_FILE_NAME):
        if _verbose_flag:
            print("  delete existing " + _CALIBRATION_FILE_NAME)

        _stepscope.File.Del(_CALIBRATION_FILE_NAME)

    return None


def unit_test_perform_TDR():
    if _verbose_flag:
        print("Perform unit_test_perform_TDR:")

    if _verbose_flag:
        print("  set Pulser")

    _stepscope.Pulse.setAmplMV(300.0)
    _stepscope.Pulse.setMode(BranchPulse.Mode.Local)
    _stepscope.Pulse.setLength(8)

    _stepscope.Tdr.Window.Enabled = False  # 03-15-2024 (begin)
    _stepscope.Tdr.Cfg.setReclen(1024)
    _stepscope.App.Stop()

    if _verbose_flag:
        print("  reset the TDR view")
    _stepscope.Tdr.Reset()

    if _verbose_flag:
        print("  run single and wait until completed")
    _stepscope.RunSingle()
    _stepscope.WaitForRunToComplete(90)

    _stepscope.App.Stop()  # in case timeout had been reached

    data = _stepscope.Tdr.getBinary()

    if len(data) > 0:
        minimum = data[0]
        maximum = data[0]

        for n in range(1, len(data)):
            if data[n] < minimum:
                minimum = data[n]
            if data[n] > maximum:
                maximum = data[n]

        print("  RETRIEVE DATA SUMMARY:")
        print("    Minimum.....{:.2f} mV".format(minimum))
        print("    Maximum.....{:.2f} mV".format(maximum))
        print("    Amplitude...{:.2f} mV".format(maximum - minimum))
    else:
        print("No Tdr data retrieved")
        pass

    if _verbose_flag:
        print("  test unit_test_perform_TDR is successful")

    return None


if __name__ == '__main__':
    print("TestSSCommands, Version 1.0")

    # Version 1.0 ... 09-19-2024 ... Begin with list from QTECH

    ip_address = ""
    use_diff = False
    debugging = False

    i = 1
    while i < len(sys.argv):
        if sys.argv[i] == "-diff":
            use_diff = True
        elif sys.argv[i] == "-dbg":
            debugging = True
        elif sys.argv[i] == "-verbose" or sys.argv[i] == "-v":
            _verbose_flag = True
        elif ip_address == "":
            ip_address = sys.argv[i]
        else:
            print("Unknown command-line option: " + sys.argv[i])
            exit()

        i = i + 1

    if ip_address == "":
        print("Usage:  TestSSCommands [options] IP")
        print("Options:  -diff ......use differential mode")
        print("          -dbg .......set debugging on")
        print("          -verbose ...set verbose output on (-v)")
        exit()

    try:
        if _verbose_flag:
            print("Attempt to connect to ip address " + ip_address)

        _stepscope.setDebugging(debugging)
        _stepscope.Connect(ip_address)

        print("Stepscope Information:")
        print("  IP Address........" + ip_address)
        print("  Serial number....." + _stepscope.Const.getSN())
        print("  UseDiff..........." + str(use_diff))
        print("  Build............." + _stepscope.Sys.getBuild())
        print("  Protocol.........." + _stepscope.Sys.getProtoVer())
        # print("  Architecture......" + _stepscope.Sys.getArchitecture())

        _stepscope.Stop()
        _stepscope.RestoreConfiguration("[factory]")
        _stepscope.App.setTab("TDR")

        unit_test_set_diff_mode(use_diff)
        unit_test_calibration_steps()
        unit_test_calibration_files()
        unit_test_perform_TDR()

        if _verbose_flag:
            print("Exiting normally")

    except Exception as e:
        print(f"Error: {str(e)}")  # Get the exception message

    finally:
        if _stepscope.IsConnected:
            if _verbose_flag:
                print("  restore default CalReclen to " + str(_DEFAULT_CALIBRATION_RECORD_LENGTH))
            _stepscope.Tdr.Cfg.setCalReclen(_DEFAULT_CALIBRATION_RECORD_LENGTH)

            if _verbose_flag:
                print("  restore default calibration file to " + _DEFAULT_CALIBRATION_FILE_NAME)
            _stepscope.Tdr.setLoadCalFile(_DEFAULT_CALIBRATION_FILE_NAME)

            clean_up_temporary_folder()

            if _verbose_flag:
                print("  disconnect")
            _stepscope.Disconnect()

# EOF
