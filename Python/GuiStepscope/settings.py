# settings.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================
import os
import pickle
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMainWindow

from popup import Popup
from connect import Connect
from main import Main


class Settings(Main):
    def __init__(self, mainWindow: QMainWindow):
        super().__init__(mainWindow)
        # print("Settings::__init__()")

        # initialize gui variables
        
        self.editIPAddress.setText("192.168.1.246")
        self.editDataDirectory.setText(os.path.normpath("C:/Temp/DataDirectory"))
        self.editResultsName.setText("Untitled")  # even though it's not on this tab ...
        self.editIPAddress.setReadOnly(False)
        self.editIPAddress.setEnabled(True)

        # restore persistent variables

        self.PersistentFilepath = os.path.normpath(os.path.dirname(os.path.abspath(__file__)) + "/guiStepscope.cfg")
        # print("The persistent file path is: ", self.PersistentFilepath)

        self.restorePersistentVariablesIfExists()  # call this before associating gui event handlers

        Connect.setIPAddress(self.editIPAddress.text())

        # Establish event handlers

        self.buttonDataDirectoryFinder.clicked.connect(self.buttonDataDirectoryFinder_clicked)
        self.buttonResultsNameFinder.clicked.connect(self.buttonResultsNameFinder_clicked)
        self.buttonConfigFileFinder.clicked.connect(self.buttonConfigFileFinder_clicked)
        self.buttonRetrieveConfiguration.clicked.connect(self.buttonRetrieveConfiguration_clicked)
        self.buttonUploadConfigAndRestore.clicked.connect(self.buttonUploadConfigAndRestore_clicked)
        self.editIPAddress.editingFinished.connect(self.editIPAddress_editingFinished)
        self.editResultsName.editingFinished.connect(self.editResultsName_editingFinished)

    def buttonDataDirectoryFinder_clicked(self):
        # print("Settings::buttonDataDirectoryFinder_clicked")

        try:
            dialog = QFileDialog(self.ParentWindow)
            dialog.setFileMode(QFileDialog.Directory)
            dialog.setViewMode(QFileDialog.Detail)

            dialog.setDirectory(os.path.normpath(self.editDataDirectory.text()))
            if dialog.exec_():
                s = dialog.selectedFiles()
                self.editDataDirectory.blockSignals(True)
                self.editDataDirectory.setText(s[0])
                self.editDataDirectory.blockSignals(False)
                self.savePersistentVariables()
        except Exception as e:
            Popup.error(str(e))

    def buttonResultsNameFinder_clicked(self):
        # print("Settings::buttonResultsNameFinder_clicked")

        try:
            dialog = QFileDialog(self.ParentWindow)
            dialog.setFileMode(QFileDialog.Directory)
            dialog.setViewMode(QFileDialog.Detail)

            dialog.setDirectory(
                os.path.normpath(self.editDataDirectory.text() + "/" + self.editResultsName.text()))

            if dialog.exec_():
                s = dialog.selectedFiles()
                fo = os.path.split(s[0])

                self.editResultsName.blockSignals(True)
                self.editResultsName.setText(fo[1])
                self.editResultsName.blockSignals(False)
                self.savePersistentVariables()
        except Exception as e:
            Popup.error(str(e))

    def buttonConfigFileFinder_clicked(self):
        # print("Settings::buttonConfigFileFinder_clicked")

        try:
            # ensure directories exist
            self.ensureDirectoriesExist()

            configurationSubdir = os.path.normpath(self.editDataDirectory.text().strip() + "/_Configurations")
            # print("configurationSubdir is: ", configurationSubdir)

            dialog = QFileDialog(self.ParentWindow)
            dialog.setFileMode(QFileDialog.AnyFile)
            dialog.setViewMode(QFileDialog.Detail)
            dialog.setNameFilter("Configuration (*.cfg)")
            dialog.setDirectory(configurationSubdir)

            if dialog.exec_():
                selected_filename = dialog.selectedFiles()[0].strip()
                selected_filename = os.path.split(selected_filename)[1].strip()
                selected_filename = os.path.splitext(selected_filename)[0].strip() + ".cfg"

                self.editConfigFile.blockSignals(True)
                self.editConfigFile.setText(selected_filename)
                self.editConfigFile.blockSignals(False)
                self.savePersistentVariables()

        except Exception as e:
            Popup.error(str(e))

    def buttonRetrieveConfiguration_clicked(self):
        # print("Settings::buttonRetrieveConfiguration")

        try:
            # ensure directories exist
            self.ensureDirectoriesExist()

            configurationSubdir = os.path.normpath(self.editDataDirectory.text().strip() + "/_Configurations")
            # print("configurationSubdir is: ", configurationSubdir)

            # pop-up file dialog to identify destination file name in configurations subdirectory,
            #   use configuration file name setting as default for file dialog

            dialog = QFileDialog(self.ParentWindow)
            dialog.setFileMode(QFileDialog.AnyFile)
            dialog.setViewMode(QFileDialog.Detail)
            dialog.setNameFilter("Configuration (*.cfg)")
            dialog.setDirectory(configurationSubdir)
            dialog.selectFile(self.editConfigFile.text().strip())

            if not dialog.exec():
                return

            selected_filename = dialog.selectedFiles()[0].strip()
            selected_filename = os.path.split(selected_filename)[1].strip()
            selected_filename = os.path.splitext(selected_filename)[0].strip() + ".cfg"
            # print("dialog selected file is: ", selected_filename)

            # extract file name only and assign this to configuration file name if it's not already set (inhibit events)

            self.editConfigFile.blockSignals(True)
            self.editConfigFile.setText(selected_filename)
            self.editConfigFile.blockSignals(False)
            self.savePersistentVariables()

            # issue save
            # wait until save operation is completed (should be synchronous, no wait required)

            # print("saving configuration")
            Connect.getDevice().SaveConfiguration("[recent]")

            # retrieve file from device
            # retrieve checksum file from device, will not manage cksum files.  Works without them.

            # print("retrieving configuration contents");
            device_config_filename = "/home/stepscope/Share/Configurations/_Scope_Recent.cfg"
            cfg_file_contents = Connect.getDevice().File.Fetch(device_config_filename)

            # save contents into specified file names located in configurations subdirectory

            local_file_path = os.path.normpath(configurationSubdir + "/" + self.editConfigFile.text())

            # print("local_file_path is: ", local_file_path)

            f = open(local_file_path, "wb")
            f.write(cfg_file_contents)
            f.close()

            Popup.info("Configuration saved to: "+local_file_path, "Retrieve Configuration")
        except Exception as e:
            Popup.error(str(e))

    def buttonUploadConfigAndRestore_clicked(self):
        # print("Settings::buttonUploadConfigAndRestore")

        try:
            # ensure directories exist
            self.ensureDirectoriesExist()

            configurationSubdir = os.path.normpath(self.editDataDirectory.text().strip() + "/_Configurations")
            # print("configurationSubdir is: ", configurationSubdir)

            # pop-up file dialog to identify source file name in configurations subdirectory,
            #   use configuration file name setting as default for file dialog

            dialog = QFileDialog(self.ParentWindow)
            dialog.setFileMode(QFileDialog.AnyFile)
            dialog.setViewMode(QFileDialog.Detail)
            dialog.setNameFilter("Configuration (*.cfg)")
            dialog.setDirectory(configurationSubdir)
            dialog.selectFile(self.editConfigFile.text().strip())

            if not dialog.exec():
                return

            selected_filename: str = dialog.selectedFiles()[0].strip()
            selected_filename = os.path.split(selected_filename)[1].strip()
            selected_filename = os.path.splitext(selected_filename)[0].strip() + ".cfg"
            # print("dialog selected file is: ", selected_filename)

            source_file_full_path = os.path.normpath(configurationSubdir + "/" + selected_filename)
            # print("source_file_full_path is: ", source_file_full_path)

            # extract file name only and assign this to configuration file name
            # if it's not already set (inhibit events)

            self.editConfigFile.blockSignals(True)
            self.editConfigFile.setText(selected_filename)
            self.editConfigFile.blockSignals(False)
            self.savePersistentVariables()

            # delete any existing files on device in configurations folder matching
            # this file ( .cfg, .cfg.cksum, .cfg.backup, .cfg.backup.cksum )

            base_filename = "/home/stepscope/Share/Configurations/"+self.editConfigFile.text()

            try:
                Connect().getDevice().File.Del(base_filename)
            except Exception as e:
                # print("Delete configuration file: ", e)
                pass

            try:
                Connect().getDevice().File.Del(base_filename + ".cksum")
            except Exception as e:
                # print("Delete configuration checksum file: ", e)
                pass

            try:
                Connect().getDevice().File.Del(base_filename + ".backup")
            except Exception as e:
                # print("Delete configuration backup file: ", e)
                pass

            try:
                Connect().getDevice().File.Del(base_filename + ".backup.cksum")
            except Exception as e:
                # print("Delete configuration backup checksum file: ", e)
                pass

            # calculate config file byte count and byte sum
    
            f = open(source_file_full_path, "rb")
            config_contents = f.read()
            f.close()
    
            bytes_count = 0
            bytes_sum = 0
            for b in config_contents:
                bytes_sum = bytes_sum + b
                bytes_count = bytes_count + 1
    
            # create temporary .cksum file
            cksum_filename = base_filename+".cksum"
            cksum_file_full_path = source_file_full_path+".cksum"
    
            f = open(cksum_file_full_path, "wt")
            f.write("ByteCount={:d}\n".format(bytes_count))
            f.write("ByteSum={:08X}\n".format(bytes_sum))
            f.close()

            # send the .cfg file to the device in the configurations folder
            try:
                Connect.getDevice().SendFileAs(source_file_full_path, base_filename)
                Connect.getDevice().SendFileAs(cksum_file_full_path, cksum_filename)
            except Exception as e:
                print("Problem sending files: ", e)
                raise e
            finally:
                os.remove(cksum_file_full_path)
    
            # issue restore with specified name of configuration file
            # wait until restore operation is complete
            # print("restoring configuration: ", base_filename)
            Connect.getDevice().RestoreConfiguration(base_filename, True)

            Popup.info("Configuration restored from: "+source_file_full_path, "Upload and Restore Configuration")

        except Exception as e:
            Popup.error(str(e))

    def editResultsName_editingFinished(self):
        # print("Settings::editResultsName_editingFinished: [" + self.editResultsName.text() + "]")

        try:
            revised_entry = self.editResultsName.text().strip()
            revised_entry.replace("\\", "").replace("/", "").replace(":", "").replace('*', "").replace('"', "") \
                .replace('?', "").replace('<', "").replace('>', "").replace('|', "").replace("\t", " ")

            if len(revised_entry) == 0:
                revised_entry = "Untitled"

            if revised_entry != self.editResultsName.text():
                self.editResultsName.blockSignals(True)
                self.editResultsName.setText(revised_entry)
                self.editResultsName.blockSignals(False)
                self.savePersistentVariables()

        except Exception as e:
            Popup.error(str(e))

    def editIPAddress_editingFinished(self):
        # print("Settings::editIPAddress_editingFinished: [" + self.editIPAddress.text() + "]")
        try:
            Connect.setIPAddress(self.editIPAddress.text())
            self.savePersistentVariables()
        except Exception as e:
            Popup.error(str(e))


    # override
    def setConnectionDependentEnables(self, newValue: bool):
        super().setConnectionDependentEnables(newValue)
        # print("Settings::setConnectionDependentEnables(), newValue=", newValue)
        self.buttonRetrieveConfiguration.setEnabled(newValue)
        self.buttonUploadConfigAndRestore.setEnabled(newValue)

    def restorePersistentVariablesIfExists(self):
        # print("Settings::restorePersistentVariablesIfExists")

        try:
            f = open(self.PersistentFilepath, "rb")
            persistent_variables = pickle.load(f)
            f.close()

            # print("ip_address = ", persisent_variables["ip_address"])
            # print("data_directory = ", persisent_variables["data_directory"])
            # print("results_name = ", persisent_variables["results_name"])
            # print("config_file = ", persisent_variables["config_file"])
            # print("persisent variables length is: ",  len(persisent_variables))
            # print("persisent variables: ",  persisent_variables)

            if len(persistent_variables) == 4:
                self.editIPAddress.setText(persistent_variables["ip_address"])
                self.editDataDirectory.setText(persistent_variables["data_directory"])
                self.editResultsName.setText(persistent_variables["results_name"])
                self.editConfigFile.setText(persistent_variables["config_file"])

        except Exception as e:
            print("Problem retrieving persistent variables: ", e)

    def savePersistentVariables(self):
        # print("Settings::savePersistentVariables")

        try:
            persistent_variables = {"ip_address": self.editIPAddress.text(),
                                    "data_directory": self.editDataDirectory.text(),
                                    "results_name": self.editResultsName.text(),
                                    "config_file": self.editConfigFile.text()
                                    }

            f = open(self.PersistentFilepath, "wb")
            pickle.dump(persistent_variables, f)
            f.close()

        except Exception as e:
            print("Problem saving persistent variables: ", e)
            raise e

    # override
    def refreshResults(self, flag: int):
        super().refreshResults(flag)
        # print("Settings::refreshResults()")


# EOF
