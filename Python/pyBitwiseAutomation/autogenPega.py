# autogenPega.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================


from pyBitwiseAutomation.SocketDevice import *
from pyBitwiseAutomation.autogenCommon import *
from enum import Enum

# ================================ #

class BranchClk(AutomationExtender):
    """BranchClk class.  Clock Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Const = BranchConst(self, "Const:")

    def __del__(self):
        super().__del__()
        return None

# ================================ #

class BranchTubChart(AutomationExtender):
    """BranchTubChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class AxisY(Enum):
        BER = "BER"
        Q = "Q"

    def getAxisY(self) -> AxisY:
        """Get enum Y-Axis type """
        return self.AxisY(self.QueryResponse_enum(self.AxisY, "AxisY?\n"))

    def setAxisY(self, newvalue: AxisY) :
        """Set enum Y-Axis type """
        self.SendCommand("AxisY " + newvalue.value + "\n")
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchTub(AutomationExtender):
    """BranchTub class.  BER Tub application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Chart = BranchTubChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getConfBER(self) -> float:
        """Get Confidence BER """
        return self.QueryResponse_float("ConfBER?\n")

    def setConfBER(self, newvalue:float) :
        """Set Confidence BER """
        self.SendCommand("ConfBER " + str(newvalue) + "\n")
        return None

    def getConfErrors(self) -> int:
        """Get Number of sufficient errors in BER measurement """
        return self.QueryResponse_int("ConfErrors?\n")

    def getConfLevel(self) -> float:
        """Get Confidence Level """
        return self.QueryResponse_float("ConfLevel?\n")

    def setConfLevel(self, newvalue:float) :
        """Set Confidence Level """
        self.SendCommand("ConfLevel " + str(newvalue) + "\n")
        return None

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    def getExtrapBER(self) -> float:
        """Get Extrapolation depth BER level """
        return self.QueryResponse_float("ExtrapBER?\n")

    def setExtrapBER(self, newvalue:float) :
        """Set Extrapolation depth BER level """
        self.SendCommand("ExtrapBER " + str(newvalue) + "\n")
        return None

    def getFitHighBER(self) -> float:
        """Get High BER level for extrapolation basis """
        return self.QueryResponse_float("FitHighBER?\n")

    def setFitHighBER(self, newvalue:float) :
        """Set High BER level for extrapolation basis """
        self.SendCommand("FitHighBER " + str(newvalue) + "\n")
        return None

    def getMeasureBER(self) -> float:
        """Get Measurement BER level """
        return self.QueryResponse_float("MeasureBER?\n")

    def setMeasureBER(self, newvalue:float) :
        """Set Measurement BER level """
        self.SendCommand("MeasureBER " + str(newvalue) + "\n")
        return None

    def getMeta(self) -> bytes:
        """Get binary Packed chart meta information binary data """
        return self.QueryBinaryResponse( "Meta?\n")

    def setMeta(self, newvalue: bytes) :
        """Set binary Packed chart meta information binary data """
        self.SendBinaryCommand("Meta\n",newvalue )
        return None

    def getMetaSEQ(self) -> int:
        """Get Chart Meta sequence number """
        return self.QueryResponse_int("MetaSEQ?\n")

    def getPointCount(self) -> int:
        """Get Number of points in result """
        return self.QueryResponse_int("PointCount?\n")

    def getProgress100Pcnt(self) -> int:
        """Get Progress 0 to 100 """
        return self.QueryResponse_int("Progress100?\n")

    def getResolutionPS(self) -> float:
        """Get Resolution of time increments """
        return self.QueryResponse_float("Resolution?\n")

    def setResolutionPS(self, newvalue:float) :
        """Set Resolution of time increments """
        self.SendCommand("Resolution " + str(newvalue) + "\n")
        return None

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowResults(self) -> bool:
        """Get Show gui results panel """
        return self.QueryResponse_bool("ShowResults?\n")

    def setShowResults(self, newvalue:bool) :
        """Set Show gui results panel """
        self.SendCommand("ShowResults " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show gui settings panel """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show gui settings panel """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Tub status message """
        return self.QueryResponse("StatusMsg?\n")

    def getSuffBits(self) -> float:
        """Get Confidence Bits based on confidence settings """
        return self.QueryResponse_float("SuffBits?\n")

    class TubType(Enum):
        Tub = "Tub"
        Peak = "Peak"

    def getTubType(self) -> TubType:
        """Get enum Sweep type (Tub or Peak) """
        return self.TubType(self.QueryResponse_enum(self.TubType, "TubType?\n"))

    def setTubType(self, newvalue: TubType) :
        """Set enum Sweep type (Tub or Peak) """
        self.SendCommand("TubType " + newvalue.value + "\n")
        return None

    def getWkgSEQ(self) -> int:
        """Get Working Serial number """
        return self.QueryResponse_int("WkgSEQ?\n")

    def Csv(self) -> str:
        """Response method for PegaTub Csv. Todo: add arguments if needed"""
        print("BranchTub:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def FetchPoints(self) -> str:
        """Binary string response method for Fetch points. Todo: add arguments if needed"""
        print("BranchTub:FetchPoints(), Todo: add arguments if needed")
        return str(self.QueryBinaryResponse("FetchPoints\n"),encoding='utf-8')

    def FetchResults(self) -> str:
        """Binary string response method for Fetch results. """
        return str(self.QueryBinaryResponse("FetchResults\n"),encoding='utf-8')

    def FetchWkg(self) -> str:
        """Binary string response method for Fetch working values. Todo: add arguments if needed"""
        print("BranchTub:FetchWkg(), Todo: add arguments if needed")
        return str(self.QueryBinaryResponse("FetchWkg\n"),encoding='utf-8')

    def Fit(self):
        """Method for PegaTub Chart Fit. """
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position."""
        self.SendCommand("Reset\n")
        return None

# ================================ #

class BranchPGAmp(AutomationExtender):
    """BranchPGAmp class.  Amplifier category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAmplMV(self, index: int) -> float:
        """Get Amp amplitude setting[] """
        return self.QueryResponse_float("Ampl["+str(index)+"]?\n")

    def setAmplMV(self, index: int, newvalue:float) :
        """Set Amp amplitude setting[] """
        self.SendCommand("Ampl["+str(index)+"] " + str(newvalue) + "\n")
        return None

    class Coupling(Enum):
        DC = "DC"
        AC = "AC"

    def getCoupling(self, index: int) -> Coupling:
        """Get enum Coupling Type[] """
        return self.Coupling(self.QueryResponse_enum(self.Coupling, "Coupling["+str(index)+"]?\n"))

    def setCoupling(self, index: int, newvalue: Coupling) :
        """Set enum Coupling Type[] """
        self.SendCommand("Coupling["+str(index)+"] " + newvalue.value + "\n")
        return None

    def getCrossPcnt(self, index: int) -> float:
        """Get Amp crossing point setting (10-90)[] """
        return self.QueryResponse_float("Cross["+str(index)+"]?\n")

    def setCrossPcnt(self, index: int, newvalue:float) :
        """Set Amp crossing point setting (10-90)[] """
        self.SendCommand("Cross["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self, index: int) -> bool:
        """Get Amp enabled, not automatically restored[] """
        return self.QueryResponse_bool("Enabled["+str(index)+"]?\n")

    def setEnabled(self, index: int, newvalue:bool) :
        """Set Amp enabled, not automatically restored[] """
        self.SendCommand("Enabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getF2PS(self, index: int) -> float:
        """Get F2 setting[] """
        return self.QueryResponse_float("F2["+str(index)+"]?\n")

    def setF2PS(self, index: int, newvalue:float) :
        """Set F2 setting[] """
        self.SendCommand("F2["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getF2MaxPS(self, index: int) -> float:
        """Get F2 maximum limit at this frequency[] """
        return self.QueryResponse_float("F2Max["+str(index)+"]?\n")

    def setF2MaxPS(self, index: int, newvalue:float) :
        """Set F2 maximum limit at this frequency[] """
        self.SendCommand("F2Max["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getF2MinPS(self, index: int) -> float:
        """Get F2 minimum limit at this frequency[] """
        return self.QueryResponse_float("F2Min["+str(index)+"]?\n")

    def setF2MinPS(self, index: int, newvalue:float) :
        """Set F2 minimum limit at this frequency[] """
        self.SendCommand("F2Min["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getOffsMV(self, index: int) -> float:
        """Get Amp VOffset[] """
        return self.QueryResponse_float("Offs["+str(index)+"]?\n")

    def setOffsMV(self, index: int, newvalue:float) :
        """Set Amp VOffset[] """
        self.SendCommand("Offs["+str(index)+"] " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchPGCh0(AutomationExtender):
    """BranchPGCh0 class.  Ch0 taps category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getFinalTaps(self, index: int) -> float:
        """Get Final tap values for Ch-0 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("FinalTaps["+str(index)+"]?\n")

    def getIntrinsicTaps(self, index: int) -> float:
        """Get Intrinsic tap values for Ch-0 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("IntrinsicTaps["+str(index)+"]?\n")

    def setIntrinsicTaps(self, index: int, newvalue:float) :
        """Set Intrinsic tap values for Ch-0 (1 Pre, 1 Cursor, 2 Post)[] """
        self.SendCommand("IntrinsicTaps["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getTaps(self, index: int) -> float:
        """Get Tap values for Ch-0 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("Taps["+str(index)+"]?\n")

    def setTaps(self, index: int, newvalue:float) :
        """Set Tap values for Ch-0 (1 Pre, 1 Cursor, 2 Post)[] """
        self.SendCommand("Taps["+str(index)+"] " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchPGCh1(AutomationExtender):
    """BranchPGCh1 class.  Ch1 taps category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getFinalTaps(self, index: int) -> float:
        """Get Final tap values for Ch-1 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("FinalTaps["+str(index)+"]?\n")

    def getIntrinsicTaps(self, index: int) -> float:
        """Get Intrinsic tap values for Ch-1 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("IntrinsicTaps["+str(index)+"]?\n")

    def setIntrinsicTaps(self, index: int, newvalue:float) :
        """Set Intrinsic tap values for Ch-1 (1 Pre, 1 Cursor, 2 Post)[] """
        self.SendCommand("IntrinsicTaps["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getTaps(self, index: int) -> float:
        """Get Tap values for Ch-1 (1 Pre, 1 Cursor, 2 Post)[] """
        return self.QueryResponse_float("Taps["+str(index)+"]?\n")

    def setTaps(self, index: int, newvalue:float) :
        """Set Tap values for Ch-1 (1 Pre, 1 Cursor, 2 Post)[] """
        self.SendCommand("Taps["+str(index)+"] " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchPGDiag(AutomationExtender):
    """BranchPGDiag class.  Diagnostics access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getActualAmplMV(self, index: int) -> float:
        """Get Actual amplitude[] """
        return self.QueryResponse_float("ActualAmpl["+str(index)+"]?\n")

    def getBangStatus(self, index: int) -> int:
        """Get Bang-bang status [0]=Adsantec, [1]=Euvis[] """
        return self.QueryResponse_int("BangStatus["+str(index)+"]?\n")

    def getMarkDensity(self, index: int) -> float:
        """Get Mark Density[] """
        return self.QueryResponse_float("MarkDensity["+str(index)+"]?\n")

    def getOpRateGHz(self, index: int) -> float:
        """Get Operating clock rate, -1 means not set[] """
        return self.QueryResponse_float("OpRate["+str(index)+"]?\n")

    def setOpRateGHz(self, index: int, newvalue:float) :
        """Set Operating clock rate, -1 means not set[] """
        self.SendCommand("OpRate["+str(index)+"] " + str(newvalue) + "\n")
        return None


# ================================ #


class BranchPGErr(AutomationExtender):
    """BranchPGErr class.  Error injector"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getInterval128(self, index: int) -> int:
        """Get Error inject interval[] """
        return self.QueryResponse_int("Interval["+str(index)+"]?\n")

    def setInterval128(self, index: int, newvalue:int) :
        """Set Error inject interval[] """
        self.SendCommand("Interval["+str(index)+"] " + str(newvalue) + "\n")
        return None

    class Mode(Enum):
        Single = "Single"
        Repeat = "Repeat"

    def getMode(self, index: int) -> Mode:
        """Get enum Error inject mode[] """
        return self.Mode(self.QueryResponse_enum(self.Mode, "Mode["+str(index)+"]?\n"))

    def setMode(self, index: int, newvalue: Mode) :
        """Set enum Error inject mode[] """
        self.SendCommand("Mode["+str(index)+"] " + newvalue.value + "\n")
        return None

    def getRepeatBER(self, index: int) -> float:
        """Get Error inject repeat BER[] """
        return self.QueryResponse_float("RepeatBER["+str(index)+"]?\n")

    class Type(Enum):
        _None = "None"
        Err1Bit = "Err1Bit"
        Err2Bit = "Err2Bit"
        Err3Bit = "Err3Bit"
        Err4Bit = "Err4Bit"
        Err5Bit = "Err5Bit"
        Err10Bit = "Err10Bit"
        Err32Bit = "Err32Bit"
        Err64Bit = "Err64Bit"
        Err128Bit = "Err128Bit"
        SepBy1 = "SepBy1"
        SepBy2 = "SepBy2"

    def getType(self, index: int) -> Type:
        """Get enum Error inject type[] """
        return self.Type(self.QueryResponse_enum(self.Type, "Type["+str(index)+"]?\n"))

    def setType(self, index: int, newvalue: Type) :
        """Set enum Error inject type[] """
        self.SendCommand("Type["+str(index)+"] " + newvalue.value + "\n")
        return None

    def Single(self):
        """Method for Do single error inject. Todo: add arguments if needed"""
        print("BranchPGErr:Single(), Todo: add arguments if needed")
        self.SendCommand("Single\n")
        return None


# ================================ #

class BranchPGPam(AutomationExtender):
    """BranchPGPam class.  PAM4 category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAmplMV(self) -> float:
        """Get Pam4 Combiner amplitude """
        return self.QueryResponse_float("Ampl?\n")

    def setAmplMV(self, newvalue:float) :
        """Set Pam4 Combiner amplitude """
        self.SendCommand("Ampl " + str(newvalue) + "\n")
        return None

    def getDelayPS(self) -> float:
        """Get Pam4 common delay """
        return self.QueryResponse_float("Delay?\n")

    def setDelayPS(self, newvalue:float) :
        """Set Pam4 common delay """
        self.SendCommand("Delay " + str(newvalue) + "\n")
        return None

    def getDelayAlignPS(self) -> float:
        """Get Pam4 Combiner delay alignment """
        return self.QueryResponse_float("DelayAlign?\n")

    def setDelayAlignPS(self, newvalue:float) :
        """Set Pam4 Combiner delay alignment """
        self.SendCommand("DelayAlign " + str(newvalue) + "\n")
        return None

    def getOffsMV(self, index: int) -> float:
        """Get Pam4 Combiner offset[] """
        return self.QueryResponse_float("Offs["+str(index)+"]?\n")

    def setOffsMV(self, index: int, newvalue:float) :
        """Set Pam4 Combiner offset[] """
        self.SendCommand("Offs["+str(index)+"] " + str(newvalue) + "\n")
        return None


# ================================ #

class BranchPGTerm(AutomationExtender):
    """BranchPGTerm class.  Termination category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getDCLevelMV(self, index: int) -> float:
        """Get Termination DC Level[] """
        return self.QueryResponse_float("DCLevel["+str(index)+"]?\n")

    def setDCLevelMV(self, index: int, newvalue:float) :
        """Set Termination DC Level[] """
        self.SendCommand("DCLevel["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getImpedanceOhms(self, index: int) -> float:
        """Get Termination Impedance[] """
        return self.QueryResponse_float("Impedance["+str(index)+"]?\n")

    def setImpedanceOhms(self, index: int, newvalue:float) :
        """Set Termination Impedance[] """
        self.SendCommand("Impedance["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getLinkPosNeg(self, index: int) -> bool:
        """Get Link positive and negative legs for offset and term[] """
        return self.QueryResponse_bool("LinkPosNeg["+str(index)+"]?\n")

    def setLinkPosNeg(self, index: int, newvalue:bool) :
        """Set Link positive and negative legs for offset and term[] """
        self.SendCommand("LinkPosNeg["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    class Type(Enum):
        DC = "DC"
        AC = "AC"

    def getType(self, index: int) -> Type:
        """Get enum Termination Type[] """
        return self.Type(self.QueryResponse_enum(self.Type, "Type["+str(index)+"]?\n"))

    def setType(self, index: int, newvalue: Type) :
        """Set enum Termination Type[] """
        self.SendCommand("Type["+str(index)+"] " + newvalue.value + "\n")
        return None


# ================================ #

class BranchPGTrig(AutomationExtender):
    """BranchPGTrig class.  Trigger outputs"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getIndexBits(self, index: int) -> int:
        """Get Trigger index[] """
        return self.QueryResponse_int("Index["+str(index)+"]?\n")

    def setIndexBits(self, index: int, newvalue:int) :
        """Set Trigger index[] """
        self.SendCommand("Index["+str(index)+"] " + str(newvalue) + "\n")
        return None

    class Type(Enum):
        Pattern = "Pattern"
        Clock64 = "Clock64"

    def getType(self, index: int) -> Type:
        """Get enum Trigger type[] """
        return self.Type(self.QueryResponse_enum(self.Type, "Type["+str(index)+"]?\n"))

    def setType(self, index: int, newvalue: Type) :
        """Set enum Trigger type[] """
        self.SendCommand("Type["+str(index)+"] " + newvalue.value + "\n")
        return None

# ================================ #


class BranchPG(AutomationExtender):
    """BranchPG class.  Pattern generator control"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Amp = BranchPGAmp(self, "Amp:")
        self.Ch0 = BranchPGCh0(self, "Ch0:")
        self.Ch1 = BranchPGCh1(self, "Ch1:")
        self.Err = BranchPGErr(self, "Err:")
        self.Diag = BranchPGDiag(self, "Diag:")
        self.Pam = BranchPGPam(self, "Pam:")
        self.Term = BranchPGTerm(self, "Term:")
        self.Trig = BranchPGTrig(self, "Trig:")

    def __del__(self):
        super().__del__()
        return None

    def getAllOn(self) -> bool:
        """Get Enable clock and both channels of data """
        return self.QueryResponse_bool("AllOn?\n")

    def setAllOn(self, newvalue:bool) :
        """Set Enable clock and both channels of data """
        self.SendCommand("AllOn " + ("T" if newvalue else "F") + "\n")
        return None

    class Connectors(Enum):
        Ch0Pos = "Ch0Pos"
        Ch1Pos = "Ch1Pos"
        Ch0Neg = "Ch0Neg"
        Ch1Neg = "Ch1Neg"

    def getConnectors(self, index: int) -> Connectors:
        """Get enum Output connectors[] """
        return self.Connectors(self.QueryResponse_enum(self.Connectors, "Connectors["+str(index)+"]?\n"))

    def setConnectors(self, index: int, newvalue: Connectors) :
        """Set enum Output connectors[] """
        self.SendCommand("Connectors["+str(index)+"] " + newvalue.value + "\n")
        return None

    def getDelayPS(self, index: int) -> float:
        """Get Delay[] """
        return self.QueryResponse_float("Delay["+str(index)+"]?\n")

    def setDelayPS(self, index: int, newvalue:float) :
        """Set Delay[] """
        self.SendCommand("Delay["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHwVersion(self) -> int:
        """Get Hardware version """
        return self.QueryResponse_int("HwVersion?\n")

    class LinkMode(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Unlinked = "Unlinked"
        Linked = "Linked"
        Interleaved = "Interleaved"

    def getLinkMode(self) -> LinkMode:
        """Get enum Link mode """
        return self.LinkMode(self.QueryResponse_enum(self.LinkMode, "LinkMode?\n"))

    def setLinkMode(self, newvalue: LinkMode) :
        """Set enum Link mode """
        self.SendCommand("LinkMode " + newvalue.value + "\n")
        return None

    def getLinkTapChanges(self) -> bool:
        """Get Link Tap changes across channels """
        return self.QueryResponse_bool("LinkTapChanges?\n")

    def setLinkTapChanges(self, newvalue:bool) :
        """Set Link Tap changes across channels """
        self.SendCommand("LinkTapChanges " + ("T" if newvalue else "F") + "\n")
        return None

    def getMonitor(self) -> bool:
        """Get Frequency and Amp Current monitoring enable """
        return self.QueryResponse_bool("Monitor?\n")

    def setMonitor(self, newvalue:bool) :
        """Set Frequency and Amp Current monitoring enable """
        self.SendCommand("Monitor " + ("T" if newvalue else "F") + "\n")
        return None

    def getOperatingRateGHz(self) -> float:
        """Get Operating clock rate, -1 means not set """
        return self.QueryResponse_float("OperatingRate?\n")

    def setOperatingRateGHz(self, newvalue:float) :
        """Set Operating clock rate, -1 means not set """
        self.SendCommand("OperatingRate " + str(newvalue) + "\n")
        return None

    class Pattern(Enum):
        Zeros = "Zeros"
        Prbs7 = "Prbs7"
        Prbs11 = "Prbs11"
        Prbs13 = "Prbs13"
        Prbs15 = "Prbs15"
        Prbs20 = "Prbs20"
        Prbs23 = "Prbs23"
        Prbs31 = "Prbs31"
        User = "User"
        Ones = "Ones"
        InvPrbs7 = "InvPrbs7"
        InvPrbs11 = "InvPrbs11"
        InvPrbs13 = "InvPrbs13"
        InvPrbs15 = "InvPrbs15"
        InvPrbs20 = "InvPrbs20"
        InvPrbs23 = "InvPrbs23"
        InvPrbs31 = "InvPrbs31"
        InvUser = "InvUser"

    def getPattern(self, index: int) -> Pattern:
        """Get enum Pega Pattern[] """
        return self.Pattern(self.QueryResponse_enum(self.Pattern, "Pattern["+str(index)+"]?\n"))

    def setPattern(self, index: int, newvalue: Pattern) :
        """Set enum Pega Pattern[] """
        self.SendCommand("Pattern["+str(index)+"] " + newvalue.value + "\n")
        return None

    def getPrbsBitOffset(self, index: int) -> int:
        """Get Pattern bit offset[] """
        return self.QueryResponse_int("PrbsBitOffset["+str(index)+"]?\n")

    def setPrbsBitOffset(self, index: int, newvalue:int) :
        """Set Pattern bit offset[] """
        self.SendCommand("PrbsBitOffset["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getReadRateGHz(self) -> float:
        """Get Readback rate """
        return self.QueryResponse_float("ReadRate?\n")

        # Notice clock rate is 1/2 data rate
    def WaitForClockToSettle(self, targetClockGHz: float, timeoutSec: float = 30.0, toleranceGHz: float = 0.002):
        now = SocketDevice.timestamp()
        timeout = now + timeoutSec
        readGHz = self.getReadRateGHz()
        opGHz = self.getOperatingRateGHz()

        while now < timeout:
            if self.getDebugging():
                print("Settle " + str(readGHz) + " - " + str(opGHz) )

            if abs(readGHz - targetClockGHz) <= toleranceGHz and  abs(opGHz - targetClockGHz) <= toleranceGHz:
                break
            time.sleep(0.5)
            now = SocketDevice.timestamp()
            readGHz = self.getReadRateGHz()
            opGHz = self.getOperatingRateGHz()

        if now >= timeout:
            raise Exception("[Timeout_During_Clock_Settle]")

        return None

    def getUseCombiner(self) -> bool:
        """Get Use PAM4 Combiner level settings """
        return self.QueryResponse_bool("UseCombiner?\n")

    def setUseCombiner(self, newvalue:bool) :
        """Set Use PAM4 Combiner level settings """
        self.SendCommand("UseCombiner " + ("T" if newvalue else "F") + "\n")
        return None

    def getUserAvailableBitmask(self, index: int) -> int:
        """Get User Pattern pages available bit mask[] """
        return self.QueryResponse_int("UserAvailable["+str(index)+"]?\n")

    class UserPage(Enum):
        PageA = "PageA"
        PageB = "PageB"

    def getUserPage(self, index: int) -> UserPage:
        """Get enum User Pattern Page[] """
        return self.UserPage(self.QueryResponse_enum(self.UserPage, "UserPage["+str(index)+"]?\n"))

    def setUserPage(self, index: int, newvalue: UserPage) :
        """Set enum User Pattern Page[] """
        self.SendCommand("UserPage["+str(index)+"] " + newvalue.value + "\n")
        return None

    def SetDefaults(self):
        """Method for Set defaults. Todo: add arguments if needed"""
        print("BranchPG:SetDefaults(), Todo: add arguments if needed")
        self.SendCommand("SetDefaults\n")
        return None

    def UserPageFlip(self):
        """Method for User Page temporary flip. Todo: add arguments if needed"""
        print("BranchPG:UserPageFlip(), Todo: add arguments if needed")
        self.SendCommand("UserPageFlip\n")
        return None


# ================================ #


class BranchEyeChart(AutomationExtender):
    """BranchEyeChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottomMV(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomMV(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightMV(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightMV(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchEyeCfg(AutomationExtender):
    """BranchEyeCfg class.  Configuration Settings"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottom(self) -> float:
        """Get Acquisition Voltage bottom """
        return self.QueryResponse_float("Bottom?\n")

    def getBright(self) -> float:
        """Get Image Brightness """
        return self.QueryResponse_float("Bright?\n")

    def setBright(self, newvalue:float) :
        """Set Image Brightness """
        self.SendCommand("Bright " + str(newvalue) + "\n")
        return None

    def getColumns(self) -> int:
        """Get Columns in Image """
        return self.QueryResponse_int("Columns?\n")

    def setColumns(self, newvalue:int) :
        """Set Columns in Image """
        self.SendCommand("Columns " + str(newvalue) + "\n")
        return None

    def getDelaySettleUSec(self) -> int:
        """Get Delay Settle Time """
        return self.QueryResponse_int("DelaySettle?\n")

    def setDelaySettleUSec(self, newvalue:int) :
        """Set Delay Settle Time """
        self.SendCommand("DelaySettle " + str(newvalue) + "\n")
        return None

    def getDepthBits(self) -> float:
        """Get E2 Depth """
        return self.QueryResponse_float("Depth?\n")

    def setDepthBits(self, newvalue:float) :
        """Set E2 Depth """
        self.SendCommand("Depth " + str(newvalue) + "\n")
        return None

    def getDivisions(self, index: int) -> int:
        """Get Number of divisions H,V[] """
        return self.QueryResponse_int("Divisions["+str(index)+"]?\n")

    def setDivisions(self, index: int, newvalue:int) :
        """Set Number of divisions H,V[] """
        self.SendCommand("Divisions["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEyeSync(self) -> bool:
        """Get Eye Sync mode """
        return self.QueryResponse_bool("EyeSync?\n")

    def getFloorNoSync(self) -> float:
        """Get Floor threshold for No-Sync mode (500K) """
        return self.QueryResponse_float("FloorNoSync?\n")

    def setFloorNoSync(self, newvalue:float) :
        """Set Floor threshold for No-Sync mode (500K) """
        self.SendCommand("FloorNoSync " + str(newvalue) + "\n")
        return None

    def getFloorSync(self) -> float:
        """Get Floor threshold for Sync mode (500K) """
        return self.QueryResponse_float("FloorSync?\n")

    def setFloorSync(self, newvalue:float) :
        """Set Floor threshold for Sync mode (500K) """
        self.SendCommand("FloorSync " + str(newvalue) + "\n")
        return None

    def getHeight(self) -> float:
        """Get Acquisition Voltage height """
        return self.QueryResponse_float("Height?\n")

    def getOffset(self) -> float:
        """Get Acquisition Time offset """
        return self.QueryResponse_float("Offset?\n")

    def getPerDiv(self, index: int) -> float:
        """Get Span per division[] """
        return self.QueryResponse_float("PerDiv["+str(index)+"]?\n")

    def setPerDiv(self, index: int, newvalue:float) :
        """Set Span per division[] """
        self.SendCommand("PerDiv["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getPersist(self) -> int:
        """Get Persistence """
        return self.QueryResponse_int("Persist?\n")

    def setPersist(self, newvalue:int) :
        """Set Persistence """
        self.SendCommand("Persist " + str(newvalue) + "\n")
        return None

    def getRows(self) -> int:
        """Get Rows in Image """
        return self.QueryResponse_int("Rows?\n")

    def setRows(self, newvalue:int) :
        """Set Rows in Image """
        self.SendCommand("Rows " + str(newvalue) + "\n")
        return None

    def getScalePcnt(self) -> float:
        """Get Scale ratio percentage """
        return self.QueryResponse_float("Scale?\n")

    def setScalePcnt(self, newvalue:float) :
        """Set Scale ratio percentage """
        self.SendCommand("Scale " + str(newvalue) + "\n")
        return None

    def getShowRaw(self) -> bool:
        """Get Show Raw Data """
        return self.QueryResponse_bool("ShowRaw?\n")

    def setShowRaw(self, newvalue:bool) :
        """Set Show Raw Data """
        self.SendCommand("ShowRaw " + ("T" if newvalue else "F") + "\n")
        return None

    def getSpan(self) -> float:
        """Get Acquisition Time span """
        return self.QueryResponse_float("Span?\n")

    def getThreshSettleUSec(self) -> int:
        """Get Threshold Settle Time """
        return self.QueryResponse_int("ThreshSettle?\n")

    def setThreshSettleUSec(self, newvalue:int) :
        """Set Threshold Settle Time """
        self.SendCommand("ThreshSettle " + str(newvalue) + "\n")
        return None

    def getUseClip(self) -> bool:
        """Get Use Clipping for Floor level """
        return self.QueryResponse_bool("UseClip?\n")

    def setUseClip(self, newvalue:bool) :
        """Set Use Clipping for Floor level """
        self.SendCommand("UseClip " + ("T" if newvalue else "F") + "\n")
        return None

# ================================ #

class BranchEye(AutomationExtender):
    """BranchEye class.  Calibration channel eye diagram application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchEyeCfg(self,"Cfg:")
        self.Chart = BranchEyeChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> list:
        """Get binary Binary Data """
        return self.QueryBinaryResponse( "Binary?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show gui settings panel """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show gui settings panel """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def Fit(self):
        """Method for Fit chart. Todo: add arguments if needed"""
        print("BranchEye:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Jpg(self) -> str:
        """Response method for PegaEye Jpg Image. Todo: add arguments if needed"""
        print("BranchEye:Jpg(), Todo: add arguments if needed")
        return self.QueryResponse("Jpg\n")

    def Reset(self):
        """Method for Reset position. Todo: add arguments if needed"""
        print("BranchEye:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

# ================================ #


class BranchErrCfg(AutomationExtender):
    """BranchErrCfg class.  Configuration Settings"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class BitsFmt(Enum):
        Scientific = "Scientific"
        Decimal = "Decimal"

    def getBitsFmt(self) -> BitsFmt:
        """Get enum ED Bits Format """
        return self.BitsFmt(self.QueryResponse_enum(self.BitsFmt, "BitsFmt?\n"))

    def setBitsFmt(self, newvalue: BitsFmt) :
        """Set enum ED Bits Format """
        self.SendCommand("BitsFmt " + newvalue.value + "\n")
        return None

    def getIntervalSeconds(self) -> float:
        """Get Update interval """
        return self.QueryResponse_float("Interval?\n")

    def setIntervalSeconds(self, newvalue:float) :
        """Set Update interval """
        self.SendCommand("Interval " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowStripSettings(self) -> bool:
        """Get Show Strip Chart Settings """
        return self.QueryResponse_bool("ShowStripSettings?\n")

    def setShowStripSettings(self, newvalue:bool) :
        """Set Show Strip Chart Settings """
        self.SendCommand("ShowStripSettings " + ("T" if newvalue else "F") + "\n")
        return None

# ================================ #


class BranchErrChart(AutomationExtender):
    """BranchErrChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottomLogBER(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomLogBER(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightLogBER(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightLogBER(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftSeconds(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftSeconds(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthSeconds(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthSeconds(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #


class BranchErr(AutomationExtender):
    """BranchErr class.  Calibration channel error rate application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchErrCfg(self,"Cfg:")
        self.Chart = BranchErrChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getABER(self) -> float:
        """Get Accumulated BER Result """
        return self.QueryResponse_float("ABER?\n")

    def getBerReport(self) -> str:
        """Get Ber report of 15 things """
        return self.QueryResponse("BerReport?\n")

    def getBinary(self) -> list:
        """Get binary Binary Data """
        return self.QueryBinaryResponse_float( "Binary?\n")

    def getBits(self) -> int:
        """Get Bit Count Result """
        return self.QueryResponse_int("Bits?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    def getErrors(self) -> int:
        """Get Bit Errors Count Result """
        return self.QueryResponse_int("Errors?\n")

    def getIBER(self) -> float:
        """Get Instantaneous BER Result """
        return self.QueryResponse_float("IBER?\n")

    def getResyncCount(self) -> int:
        """Get Resync Count """
        return self.QueryResponse_int("ResyncCount?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getSerial(self) -> int:
        """Get Serial Number of Integration """
        return self.QueryResponse_int("Serial?\n")

    def Csv(self) -> str:
        """Response method for PegaED Csv. Todo: add arguments if needed"""
        print("BranchErr:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Csv2(self) -> str:
        """Response method for PegaErr Csv. Todo: add arguments if needed"""
        print("BranchErr:Csv2(), Todo: add arguments if needed")
        return self.QueryResponse("Csv2\n")

    def Fit(self):
        """Method for PegaED Chart Fit. Todo: add arguments if needed"""
        print("BranchErr:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position. Todo: add arguments if needed"""
        print("BranchErr:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

# ================================ #


class BranchEDSampler(AutomationExtender):
    """BranchEDSampler class.  Meta category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class DataSource(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"

    def getDataSource(self) -> DataSource:
        """Get enum Deferred sampler data source selection """
        return self.DataSource(self.QueryResponse_enum(self.DataSource, "DataSource?\n"))

    def setDataSource(self, newvalue: DataSource) :
        """Set enum Deferred sampler data source selection """
        self.SendCommand("DataSource " + newvalue.value + "\n")
        return None

    def getDelayRangePS(self) -> float:
        """Get Sampler delay range """
        return self.QueryResponse_float("DelayRange?\n")

    def getDelaysPS(self, index: int) -> float:
        """Get Sampler delay values by index (0=Cal 1=Deferred)[] """
        return self.QueryResponse_float("Delays["+str(index)+"]?\n")

    def setDelaysPS(self, index: int, newvalue:float) :
        """Set Sampler delay values by index (0=Cal 1=Deferred)[] """
        self.SendCommand("Delays["+str(index)+"] " + str(newvalue) + "\n")
        return None

    class HControl(Enum):
        ClockDelay = "ClockDelay"
        NegDataDelay = "NegDataDelay"
        ClockMinusDataDelay = "ClockMinusDataDelay"

    def getHControl(self) -> HControl:
        """Get enum Deferred sampler time control selection """
        return self.HControl(self.QueryResponse_enum(self.HControl, "HControl?\n"))

    def setHControl(self, newvalue: HControl) :
        """Set enum Deferred sampler time control selection """
        self.SendCommand("HControl " + newvalue.value + "\n")
        return None

    class Mode(Enum):
        CalInput = "CalInput"
        DeferredEye = "DeferredEye"

    def getMode(self) -> Mode:
        """Get enum Sample mode selection """
        return self.Mode(self.QueryResponse_enum(self.Mode, "Mode?\n"))

    def setMode(self, newvalue: Mode) :
        """Set enum Sample mode selection """
        self.SendCommand("Mode " + newvalue.value + "\n")
        return None

    def getTimePS(self) -> float:
        """Get Sample time """
        return self.QueryResponse_float("Time?\n")

    def setTimePS(self, newvalue:float) :
        """Set Sample time """
        self.SendCommand("Time " + str(newvalue) + "\n")
        return None

    class VControl(Enum):
        Ch0Pos = "Ch0Pos"
        Ch0Neg = "Ch0Neg"
        Ch1Pos = "Ch1Pos"
        Ch1Neg = "Ch1Neg"

    def getVControl(self) -> VControl:
        """Get enum Deferred sampler voltage control selection """
        return self.VControl(self.QueryResponse_enum(self.VControl, "VControl?\n"))

    def setVControl(self, newvalue: VControl) :
        """Set enum Deferred sampler voltage control selection """
        self.SendCommand("VControl " + newvalue.value + "\n")
        return None

    def getVoltsMV(self) -> float:
        """Get Sampler voltage """
        return self.QueryResponse_float("Volts?\n")

    def setVoltsMV(self, newvalue:float) :
        """Set Sampler voltage """
        self.SendCommand("Volts " + str(newvalue) + "\n")
        return None

    def getVoltsMaxMV(self) -> float:
        """Get Sample voltage maximum """
        return self.QueryResponse_float("VoltsMax?\n")

    def getVoltsMinMV(self) -> float:
        """Get Sample voltage minimum """
        return self.QueryResponse_float("VoltsMin?\n")

# ================================ #


class BranchED(AutomationExtender):
    """BranchED class.  Pega Calibration Input Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Sampler = BranchEDSampler(self,"Sampler:")

    def __del__(self):
        super().__del__()
        return None

    def getAlignLogSEQ(self) -> int:
        """Get Log sequence number """
        return self.QueryResponse_int("AlignLogSEQ?\n")

    def getAlignStatus(self) -> str:
        """Get Align status """
        return self.QueryResponse("AlignStatus?\n")

    def getAlignDataMsg(self) -> str:
        """Get Align Data Message - Begin with Success if okay """
        return self.QueryResponse("AlignDataMsg?\n")

    def getAutoResync(self) -> bool:
        """Get Auto Resync Enable """
        return self.QueryResponse_bool("AutoResync?\n")

    def setAutoResync(self, newvalue:bool) :
        """Set Auto Resync Enable """
        self.SendCommand("AutoResync " + ("T" if newvalue else "F") + "\n")
        return None

    def getBitRateGHz(self) -> float:
        """Get Bit Rate """
        return self.QueryResponse_float("BitRate?\n")

    def getCalibRateGHz(self) -> float:
        """Get Calibration input Rate """
        return self.QueryResponse_float("CalibRate?\n")

    def getCalibLimitGbps(self) -> float:
        """Get Calibration input rate limit """
        return self.QueryResponse_float("CalibLimit?\n")

    def findBestCalibDivider(self,dataRateGbps: float) -> BranchSyn.DivCalib :
        CALNUM = [2,4,8,16,0]
        CALDIV = [BranchSyn.DivCalib.Div2, BranchSyn.DivCalib.Div4,BranchSyn.DivCalib.Div8,BranchSyn.DivCalib.Div16]
        index=0
        calibLimitGbps = self.getCalibLimitGbps()
        while CALNUM[index]!=0:
            if dataRateGbps/CALNUM[index] <= calibLimitGbps:
                break
            index=index+1

        if CALNUM[index]==0:
            raise Exception("[Unable_To_Find_Matching_Calib_Divider]")

        return CALDIV[index]


    def getDelayPS(self) -> float:
        """Get Delay """
        return self.QueryResponse_float("Delay?\n")

    def setDelayPS(self, newvalue:float) :
        """Set Delay """
        self.SendCommand("Delay " + str(newvalue) + "\n")
        return None

    class DetPatt(Enum):
        AllZeros = "AllZeros"
        AllOnes = "AllOnes"
        Prbs7 = "Prbs7"
        InvPrbs7 = "InvPrbs7"
        Prbs11 = "Prbs11"
        InvPrbs11 = "InvPrbs11"
        Prbs13 = "Prbs13"
        InvPrbs13 = "InvPrbs13"
        Prbs15 = "Prbs15"
        InvPrbs15 = "InvPrbs15"
        Prbs20 = "Prbs20"
        InvPrbs20 = "InvPrbs20"
        Prbs23 = "Prbs23"
        InvPrbs23 = "InvPrbs23"
        Prbs31 = "Prbs31"
        InvPrbs31 = "InvPrbs31"
        Grab = "Grab"
        InvGrab = "InvGrab"
        _None = "None"
        Unknown = "Unknown"

    def getDetPatt(self) -> DetPatt:
        """Get enum Detected Pattern """
        return self.DetPatt(self.QueryResponse_enum(self.DetPatt, "DetPatt?\n"))

    def getEnabled(self) -> bool:
        """Get Calibration channel enabled """
        return self.QueryResponse_bool("Enabled?\n")

    def setEnabled(self, newvalue:bool) :
        """Set Calibration channel enabled """
        self.SendCommand("Enabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getEyeRateGHz(self) -> float:
        """Get Eye Rate """
        return self.QueryResponse_float("EyeRate?\n")

    class EyeSubrate(Enum):
        DivBy1 = "DivBy1"
        DivBy2 = "DivBy2"
        DivBy4 = "DivBy4"
        DivBy8 = "DivBy8"

    def getEyeSubrate(self) -> EyeSubrate:
        """Get enum Eye subrate applied to delays """
        return self.EyeSubrate(self.QueryResponse_enum(self.EyeSubrate, "EyeSubrate?\n"))

    def setEyeSubrate(self, newvalue: EyeSubrate) :
        """Set enum Eye subrate applied to delays """
        self.SendCommand("EyeSubrate " + newvalue.value + "\n")
        return None

    class GrabLen(Enum):
        _32 = "32"
        _64 = "64"
        _96 = "96"
        _128 = "128"
        _160 = "160"
        _192 = "192"

    def getGrabLen(self) -> GrabLen:
        """Get enum Grab length """
        return self.GrabLen(self.QueryResponse_enum(self.GrabLen, "GrabLen?\n"))

    def setGrabLen(self, newvalue: GrabLen) :
        """Set enum Grab length """
        self.SendCommand("GrabLen " + newvalue.value + "\n")
        return None

    def getGrabPatt(self) -> str:
        """Get Grabbed pattern 32-bit word hex values """
        return self.QueryResponse("GrabPatt?\n")

    def getInProgress(self) -> bool:
        """Get Aligning in progress """
        return self.QueryResponse_bool("InProgress?\n")

    def getInSync(self) -> bool:
        """Get In Sync Flag """
        return self.QueryResponse_bool("InSync?\n")

    def getMonitor(self) -> bool:
        """Get Pattern change and data rate monitoring enable """
        return self.QueryResponse_bool("Monitor?\n")

    def setMonitor(self, newvalue:bool) :
        """Set Pattern change and data rate monitoring enable """
        self.SendCommand("Monitor " + ("T" if newvalue else "F") + "\n")
        return None

    class Patt(Enum):
        AllZeros = "AllZeros"
        AllOnes = "AllOnes"
        Prbs7 = "Prbs7"
        InvPrbs7 = "InvPrbs7"
        Prbs11 = "Prbs11"
        InvPrbs11 = "InvPrbs11"
        Prbs13 = "Prbs13"
        InvPrbs13 = "InvPrbs13"
        Prbs15 = "Prbs15"
        InvPrbs15 = "InvPrbs15"
        Prbs20 = "Prbs20"
        InvPrbs20 = "InvPrbs20"
        Prbs23 = "Prbs23"
        InvPrbs23 = "InvPrbs23"
        Prbs31 = "Prbs31"
        InvPrbs31 = "InvPrbs31"
        Grab = "Grab"
        Auto = "Auto"
        Unknown = "Unknown"

    def getPatt(self) -> Patt:
        """Get enum Detector Pattern """
        return self.Patt(self.QueryResponse_enum(self.Patt, "Patt?\n"))

    def setPatt(self, newvalue: Patt) :
        """Set enum Detector Pattern """
        self.SendCommand("Patt " + newvalue.value + "\n")
        return None

    def getResyncThresh(self) -> int:
        """Get Resync Threshold """
        return self.QueryResponse_int("ResyncThresh?\n")

    def setResyncThresh(self, newvalue:int) :
        """Set Resync Threshold """
        self.SendCommand("ResyncThresh " + str(newvalue) + "\n")
        return None

    def getTermDCLevelMV(self) -> float:
        """Get Termination DC Level """
        return self.QueryResponse_float("TermDCLevel?\n")

    def setTermDCLevelMV(self, newvalue:float) :
        """Set Termination DC Level """
        self.SendCommand("TermDCLevel " + str(newvalue) + "\n")
        return None

    class TermType(Enum):
        DC = "DC"
        AC = "AC"

    def getTermType(self) -> TermType:
        """Get enum Termination Type """
        return self.TermType(self.QueryResponse_enum(self.TermType, "TermType?\n"))

    def setTermType(self, newvalue: TermType) :
        """Set enum Termination Type """
        self.SendCommand("TermType " + newvalue.value + "\n")
        return None

    def getThreshMV(self) -> float:
        """Get Threshold """
        return self.QueryResponse_float("Thresh?\n")

    def setThreshMV(self, newvalue:float) :
        """Set Threshold """
        self.SendCommand("Thresh " + str(newvalue) + "\n")
        return None

    def getUsingEye(self) -> bool:
        """Get Using Eye Diagramming """
        return self.QueryResponse_bool("UsingEye?\n")

    class AlignBy(Enum):
        Time = "Time"
        Volts = "Volts"
        All = "All"
        PrbsVolts = "PrbsVolts"
        PrbsAll = "PrbsAll"

    def AlignData(self, alignType: AlignBy = AlignBy.All, waitToComplete: bool = True ) -> bool:
        """Perform data alignment and optionally wait until completed. """

        self.SendCommand("AlignData " + alignType.value + "\n")

        retn=False
        if waitToComplete:
            retn=self.WaitForAlignmentToComplete()

        return retn

    def AlignCancel(self):
        def AlignClearLog(self):
            """Method for canceling Align operation."""
            self.SendCommand("AlignCancel\n")
            return None

    def AlignClearLog(self):
        def AlignClearLog(self):
            """Method for clearing Align Log."""
            self.SendCommand("AlignClearLog\n")
            return None

    def AlignFetchLog(self) -> str:
        """Binary string response method for Fetching Align log. """
        return str(self.QueryBinaryResponse("AlignFetchLog\n"), encoding='utf-8')

    def WaitForAlignmentToComplete(self) -> bool:
        """Wait for alignment operation to complete. """

        now = SocketDevice.timestamp()
        begin_time = now
        timeout = now + 30.0

        while now < timeout:
            time.sleep(0.5)
            now = SocketDevice.timestamp()
            if self.getDebugging():
                print("Aligning "+ "{:.1f}".format(now - begin_time))

            # if not self.QueryResponse_bool("InProgress?\n"):
            #     break

            if self.getAlignStatus().upper() != "[RUNNING]":
                break

        if now >= timeout:
            raise Exception("[Timeout_During_Alignment]")

        message = self.getAlignDataMsg()
        return message.upper().startswith("SUCCESS")

    def Resync(self):
        """Method for Manual Resync."""
        self.SendCommand("Resync\n")
        return None

# EOF *TEST*