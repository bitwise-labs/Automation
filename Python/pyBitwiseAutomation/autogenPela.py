# autogenPega.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================


from pyBitwiseAutomation.SocketDevice import *
from pyBitwiseAutomation.autogenCommon import *
from enum import Enum

    # ================================ #

class BranchBasic(AutomationExtender):
    """BranchBasic class.  Basic ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBasicReport(self) -> str:
        """Get Basic Ela report of 24 things """
        return self.QueryResponse("BasicReport?\n")

    def getBits(self, index: int) -> int:
        """Get Bit Count Result[] """
        return self.QueryResponse_int("Bits["+str(index)+"]?\n")

    def getCapturePcnt(self, index: int) -> float:
        """Get Capture rate[] """
        return self.QueryResponse_float("Capture["+str(index)+"]?\n")

    def getCBER(self, index: int) -> float:
        """Get Captured BER[] """
        return self.QueryResponse_float("CBER["+str(index)+"]?\n")

    def getCSER(self, index: int) -> float:
        """Get Captured SER[] """
        return self.QueryResponse_float("CSER["+str(index)+"]?\n")

    def getEnabled(self, index: int) -> bool:
        """Get Enable processor[] """
        return self.QueryResponse_bool("Enabled["+str(index)+"]?\n")

    def getErrors(self, index: int) -> int:
        """Get Bit Errors Count Result[] """
        return self.QueryResponse_int("Errors["+str(index)+"]?\n")

    class Pattern(Enum):
        AllZeros = "AllZeros"
        AllOnes = "AllOnes"
        Prbs7 = "Prbs7"
        InvPrbs7 = "InvPrbs7"
        Prbs11 = "Prbs11"
        InvPrbs11 = "InvPrbs11"
        Prbs13 = "Prbs13"
        InvPrbs13 = "InvPrbs13"
        Prbs15 = "Prbs15"
        InvPrbs15 = "InvPrbs15"
        Prbs20 = "Prbs20"
        InvPrbs20 = "InvPrbs20"
        Prbs23 = "Prbs23"
        InvPrbs23 = "InvPrbs23"
        Prbs31 = "Prbs31"
        InvPrbs31 = "InvPrbs31"
        RamGrab = "RamGrab"
        InvRamGrab = "InvRamGrab"
        RamShift = "RamShift"
        InvRamShift = "InvRamShift"
        _None = "None"
        Unknown = "Unknown"

    def getPattern(self, index: int) -> Pattern:
        """Get enum Pattern Type[] """
        return self.Pattern(self.QueryResponse_enum(self.Pattern, "Pattern["+str(index)+"]?\n"))

    def getPhaseFound(self, index: int) -> bool:
        """Get Pattern Phase Found[] """
        return self.QueryResponse_bool("PhaseFound["+str(index)+"]?\n")

    def getResyncCount(self, index: int) -> int:
        """Get Resync Count Result[] """
        return self.QueryResponse_int("ResyncCount["+str(index)+"]?\n")

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self, index: int) -> Status:
        """Get enum Ela Status[] """
        return self.Status(self.QueryResponse_enum(self.Status, "Status["+str(index)+"]?\n"))

    def getSymbolSizeBits(self, index: int) -> int:
        """Get Symbol Size[] """
        return self.QueryResponse_int("SymbolSize["+str(index)+"]?\n")

    # ================================ #

class BranchBlockChannel(AutomationExtender):
    """BranchBlockChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Packed histogram binary data, char[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBins(self) -> int:
        """Get Histogram bin count """
        return self.QueryResponse_int("Bins?\n")

    def setBins(self, newvalue:int) :
        """Set Histogram bin count """
        self.SendCommand("Bins " + str(newvalue) + "\n")
        return None

    def getBlockSize(self) -> int:
        """Get Block Size """
        return self.QueryResponse_int("BlockSize?\n")

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getHistory(self) -> int:
        """Get Histogram history length """
        return self.QueryResponse_int("History?\n")

    def setHistory(self, newvalue:int) :
        """Set Histogram history length """
        self.SendCommand("History " + str(newvalue) + "\n")
        return None

    def getHReport(self) -> str:
        """Get Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen """
        return self.QueryResponse("HReport?\n")

    def getHSeq(self) -> int:
        """Get Histogram Sequence number """
        return self.QueryResponse_int("HSeq?\n")

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    def getOffset(self) -> float:
        """Get Histogram bin offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffset(self, newvalue:float) :
        """Set Histogram bin offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getReport(self) -> str:
        """Get Report-Total,Squelched,Processed,InErr,Max,Avg,Rate """
        return self.QueryResponse("Report?\n")

    def getResol(self) -> float:
        """Get Histogram bin resolution """
        return self.QueryResponse_float("Resol?\n")

    def setResol(self, newvalue:float) :
        """Set Histogram bin resolution """
        self.SendCommand("Resol " + str(newvalue) + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Ela Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchBlockChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchBlockChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def MapRange(self):
        """Method for Map histogram to fit range. Todo: add arguments if needed"""
        print("BranchBlockChannel:MapRange(), Todo: add arguments if needed")
        self.SendCommand("MapRange\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchBlockChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

    # ================================ #

class BranchBlock(AutomationExtender):
    """BranchBlock class.  Block ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchBlockChannel(self, "Ch0:")
        self.Ch1 = BranchBlockChannel(self, "Ch1:")
        self.Cmb = BranchBlockChannel(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

    # ================================ #

    # ================================ #

class BranchBurstChannel(AutomationExtender):
    """BranchBurstChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Packed histogram binary data, char[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBins(self) -> int:
        """Get Histogram bin count """
        return self.QueryResponse_int("Bins?\n")

    def setBins(self, newvalue:int) :
        """Set Histogram bin count """
        self.SendCommand("Bins " + str(newvalue) + "\n")
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getHistory(self) -> int:
        """Get Histogram history length """
        return self.QueryResponse_int("History?\n")

    def setHistory(self, newvalue:int) :
        """Set Histogram history length """
        self.SendCommand("History " + str(newvalue) + "\n")
        return None

    def getHReport(self) -> str:
        """Get Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen """
        return self.QueryResponse("HReport?\n")

    def getHSeq(self) -> int:
        """Get Histogram Sequence number """
        return self.QueryResponse_int("HSeq?\n")

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    def getOffset(self) -> float:
        """Get Histogram bin offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffset(self, newvalue:float) :
        """Set Histogram bin offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getResol(self) -> float:
        """Get Histogram bin resolution """
        return self.QueryResponse_float("Resol?\n")

    def setResol(self, newvalue:float) :
        """Set Histogram bin resolution """
        self.SendCommand("Resol " + str(newvalue) + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getSeparation(self) -> int:
        """Get Minimum Efi """
        return self.QueryResponse_int("Separation?\n")

    def setSeparation(self, newvalue:int) :
        """Set Minimum Efi """
        self.SendCommand("Separation " + str(newvalue) + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Ela Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchBurstChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchBurstChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def MapRange(self):
        """Method for Map histogram to fit range. Todo: add arguments if needed"""
        print("BranchBurstChannel:MapRange(), Todo: add arguments if needed")
        self.SendCommand("MapRange\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchBurstChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

    class BranchBurst(AutomationExtender):
        """BranchBurst class.  Burst ELA Application"""

        def __init__(self, parent: AutomationInterface, prefix: str):
            super().__init__(parent, prefix)
            self.Ch0 = BranchBurstChannel(self, "Ch0:")
            self.Ch1 = BranchBurstChannel(self, "Ch1:")
            self.Cmb = BranchBurstChannel(self, "Cmb:")

        def __del__(self):
            super().__del__()
            return None

    # ================================ #

class BranchBurst(AutomationExtender):
    """BranchBurst class.  Burst ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchPelaEye(self, "Ch0:")
        self.Ch1 = BranchPelaEye(self, "Ch1:")
        self.Cmb = BranchPelaEye(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

    # ================================ #

class BranchData(AutomationExtender):
    """BranchData class.  Data Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class BitsFmt(Enum):
        Scientific = "Scientific"
        Decimal = "Decimal"

    def getBitsFmt(self) -> BitsFmt:
        """Get enum Data Bits Format """
        return self.BitsFmt(self.QueryResponse_enum(self.BitsFmt, "BitsFmt?\n"))

    def setBitsFmt(self, newvalue: BitsFmt) :
        """Set enum Data Bits Format """
        self.SendCommand("BitsFmt " + newvalue.value + "\n")
        return None

    def getDataRateGHz(self) -> float:
        """Get Data Rate """
        return self.QueryResponse_float("DataRate?\n")

    class DataLinkMode(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Unlinked = "Unlinked"
        Interleaved = "Interleaved"

    def getDataLinkMode(self) -> DataLinkMode:
        """Get enum Data Link Mode """
        return self.DataLinkMode(self.QueryResponse_enum(self.DataLinkMode, "DataLinkMode?\n"))

    def getDataShowAllCh(self) -> bool:
        """Get Data Show All Channels """
        return self.QueryResponse_bool("DataShowAllCh?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getSymbolSizeBits(self, index: int) -> int:
        """Get Global bits per symbol[] """
        return self.QueryResponse_int("SymbolSize["+str(index)+"]?\n")

    def setSymbolSizeBits(self, index: int, newvalue:int) :
        """Set Global bits per symbol[] """
        self.SendCommand("SymbolSize["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getTransferBytessec(self) -> float:
        """Get Bytes per second """
        return self.QueryResponse_float("Transfer?\n")

    def Csv(self) -> str:
        """Response method for Save ELA Results in CSV file. Todo: add arguments if needed"""
        print("BranchData:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def getCommonBits(self) -> int:
        """Get Common bit count """
        return self.QueryResponse_int("Common:Bits?\n")

    def getCommonBuffers(self) -> int:
        """Get Number of buffers """
        return self.QueryResponse_int("Common:Buffers?\n")

    def getCommonEnabled(self) -> bool:
        """Get Common Enable processor """
        return self.QueryResponse_bool("Common:Enabled?\n")

    def getCommonMarkDensityPcnt(self) -> float:
        """Get Common mark density """
        return self.QueryResponse_float("Common:MarkDensity?\n")

    def getCommonMarks(self) -> int:
        """Get Common mark count """
        return self.QueryResponse_int("Common:Marks?\n")

    class CommonStatus(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getCommonStatus(self) -> CommonStatus:
        """Get enum Common Data Status """
        return self.CommonStatus(self.QueryResponse_enum(self.CommonStatus, "Common:Status?\n"))

# ================================ #

class BranchPelaED(AutomationExtender):
    """BranchPelaED class.  Pela Error Detector Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAutoClockMsg(self) -> str:
        """Get Autoset clock results """
        return self.QueryResponse("AutoClockMsg?\n")

    def getAutoDataMsg(self) -> str:
        """Get Autoset data results """
        return self.QueryResponse("AutoDataMsg?\n")

    def getAutoResync(self, index: int) -> bool:
        """Get Auto Resync Enable[] """
        return self.QueryResponse_bool("AutoResync["+str(index)+"]?\n")

    def setAutoResync(self, index: int, newvalue:bool) :
        """Set Auto Resync Enable[] """
        self.SendCommand("AutoResync["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    class AuxIn1(Enum):
        Marker = "Marker"

    def getAuxIn1(self) -> AuxIn1:
        """Get enum Aux-1 input """
        return self.AuxIn1(self.QueryResponse_enum(self.AuxIn1, "AuxIn1?\n"))

    def setAuxIn1(self, newvalue: AuxIn1) :
        """Set enum Aux-1 input """
        self.SendCommand("AuxIn1 " + newvalue.value + "\n")
        return None

    class AuxIn2(Enum):
        Blanking = "Blanking"

    def getAuxIn2(self) -> AuxIn2:
        """Get enum Aux-2 input """
        return self.AuxIn2(self.QueryResponse_enum(self.AuxIn2, "AuxIn2?\n"))

    def setAuxIn2(self, newvalue: AuxIn2) :
        """Set enum Aux-2 input """
        self.SendCommand("AuxIn2 " + newvalue.value + "\n")
        return None

    class AuxOut1(Enum):
        Ch0Pattern = "Ch0Pattern"
        Ch1Pattern = "Ch1Pattern"
        Ch0Error = "Ch0Error"
        Ch1Error = "Ch1Error"
        AnyError = "AnyError"
        WordClock = "WordClock"
        AuxLoopback = "AuxLoopback"
        Off = "Off"

    def getAuxOut1(self) -> AuxOut1:
        """Get enum Aux-1 output """
        return self.AuxOut1(self.QueryResponse_enum(self.AuxOut1, "AuxOut1?\n"))

    def setAuxOut1(self, newvalue: AuxOut1) :
        """Set enum Aux-1 output """
        self.SendCommand("AuxOut1 " + newvalue.value + "\n")
        return None

    class AuxOut2(Enum):
        Ch0Pattern = "Ch0Pattern"
        Ch1Pattern = "Ch1Pattern"
        Ch0Error = "Ch0Error"
        Ch1Error = "Ch1Error"
        AnyError = "AnyError"
        WordClock = "WordClock"
        AuxLoopback = "AuxLoopback"
        Off = "Off"

    def getAuxOut2(self) -> AuxOut2:
        """Get enum Aux-2 output """
        return self.AuxOut2(self.QueryResponse_enum(self.AuxOut2, "AuxOut2?\n"))

    def setAuxOut2(self, newvalue: AuxOut2) :
        """Set enum Aux-2 output """
        self.SendCommand("AuxOut2 " + newvalue.value + "\n")
        return None

    def getDataRateGHz(self) -> float:
        """Data Rate """
        return self.QueryResponse_float("DataRate?\n")

    def getClockRateGHz(self) -> float:
        """Get Input Clock Rate """
        return self.QueryResponse_float("ClockRate?\n")

    def getClockThreshMV(self) -> float:
        """Get Clock threshold """
        return self.QueryResponse_float("ClockThresh?\n")

    def setClockThreshMV(self, newvalue:float) :
        """Set Clock threshold """
        self.SendCommand("ClockThresh " + str(newvalue) + "\n")
        return None

    class ClockType(Enum):
        Fullrate = "Fullrate"
        Halfrate = "Halfrate"

    def getClockType(self) -> ClockType:
        """Get enum Clock Type """
        return self.ClockType(self.QueryResponse_enum(self.ClockType, "ClockType?\n"))

    def setClockType(self, newvalue: ClockType) :
        """Set enum Clock Type """
        self.SendCommand("ClockType " + newvalue.value + "\n")
        return None

    def getDelayPS(self, index: int) -> float:
        """Get Delay[] """
        return self.QueryResponse_float("Delay["+str(index)+"]?\n")

    def setDelayPS(self, index: int, newvalue:float) :
        """Set Delay[] """
        self.SendCommand("Delay["+str(index)+"] " + str(newvalue) + "\n")
        return None

    class DetPatt(Enum):
        AllZeros = "AllZeros"
        AllOnes = "AllOnes"
        Prbs7 = "Prbs7"
        InvPrbs7 = "InvPrbs7"
        Prbs11 = "Prbs11"
        InvPrbs11 = "InvPrbs11"
        Prbs13 = "Prbs13"
        InvPrbs13 = "InvPrbs13"
        Prbs15 = "Prbs15"
        InvPrbs15 = "InvPrbs15"
        Prbs20 = "Prbs20"
        InvPrbs20 = "InvPrbs20"
        Prbs23 = "Prbs23"
        InvPrbs23 = "InvPrbs23"
        Prbs31 = "Prbs31"
        InvPrbs31 = "InvPrbs31"
        RamGrab = "RamGrab"
        InvRamGrab = "InvRamGrab"
        RamShift = "RamShift"
        InvRamShift = "InvRamShift"
        _None = "None"
        Unknown = "Unknown"

    def getDetPatt(self, index: int) -> DetPatt:
        """Get enum Detected Pattern[] """
        return self.DetPatt(self.QueryResponse_enum(self.DetPatt, "DetPatt["+str(index)+"]?\n"))

    def getDetShift(self, index: int) -> int:
        """Get Detected Shift[] """
        return self.QueryResponse_int("DetShift["+str(index)+"]?\n")

    def getGrayCode(self) -> bool:
        """Get Using Gray Coding (MSB=Ch1, LSB=Ch0) """
        return self.QueryResponse_bool("GrayCode?\n")

    def setGrayCode(self, newvalue:bool) :
        """Set Using Gray Coding (MSB=Ch1, LSB=Ch0) """
        self.SendCommand("GrayCode " + ("T" if newvalue else "F") + "\n")
        return None

    def getInSync(self, index: int) -> bool:
        """Get In Sync Flag[] """
        return self.QueryResponse_bool("InSync["+str(index)+"]?\n")

    class LinkMode(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Unlinked = "Unlinked"
        Interleaved = "Interleaved"

    def getLinkMode(self) -> LinkMode:
        """Get enum Link Mode """
        return self.LinkMode(self.QueryResponse_enum(self.LinkMode, "LinkMode?\n"))

    def setLinkMode(self, newvalue: LinkMode) :
        """Set enum Link Mode """
        self.SendCommand("LinkMode " + newvalue.value + "\n")
        return None

    def getManualAmount(self, index: int) -> int:
        """Get Manual Shift Amount[] """
        return self.QueryResponse_int("ManualAmount["+str(index)+"]?\n")

    def setManualAmount(self, index: int, newvalue:int) :
        """Set Manual Shift Amount[] """
        self.SendCommand("ManualAmount["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getManualShift(self) -> bool:
        """Get Manual Shift Enable """
        return self.QueryResponse_bool("ManualShift?\n")

    def setManualShift(self, newvalue:bool) :
        """Set Manual Shift Enable """
        self.SendCommand("ManualShift " + ("T" if newvalue else "F") + "\n")
        return None

    def getOperatingRateGHz(self) -> float:
        """Get Operating Clock Rate """
        return self.QueryResponse_float("OperatingRate?\n")

    class Patt(Enum):
        AllZeros = "AllZeros"
        AllOnes = "AllOnes"
        Prbs7 = "Prbs7"
        InvPrbs7 = "InvPrbs7"
        Prbs11 = "Prbs11"
        InvPrbs11 = "InvPrbs11"
        Prbs13 = "Prbs13"
        InvPrbs13 = "InvPrbs13"
        Prbs15 = "Prbs15"
        InvPrbs15 = "InvPrbs15"
        Prbs20 = "Prbs20"
        InvPrbs20 = "InvPrbs20"
        Prbs23 = "Prbs23"
        InvPrbs23 = "InvPrbs23"
        Prbs31 = "Prbs31"
        InvPrbs31 = "InvPrbs31"
        RamGrab = "RamGrab"
        InvRamGrab = "InvRamGrab"
        RamShift = "RamShift"
        InvRamShift = "InvRamShift"
        Auto = "Auto"
        Unknown = "Unknown"

    def getPatt(self, index: int) -> Patt:
        """Get enum Detector Pattern[] """
        return self.Patt(self.QueryResponse_enum(self.Patt, "Patt["+str(index)+"]?\n"))

    def setPatt(self, index: int, newvalue: Patt) :
        """Set enum Detector Pattern[] """
        self.SendCommand("Patt["+str(index)+"] " + newvalue.value + "\n")
        return None

    def getResyncThresh(self, index: int) -> int:
        """Get Resync Threshold[] """
        return self.QueryResponse_int("ResyncThresh["+str(index)+"]?\n")

    def setResyncThresh(self, index: int, newvalue:int) :
        """Set Resync Threshold[] """
        self.SendCommand("ResyncThresh["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getShowAllCh(self) -> bool:
        """Get Show All Channels """
        return self.QueryResponse_bool("ShowAllCh?\n")

    def setShowAllCh(self, newvalue:bool) :
        """Set Show All Channels """
        self.SendCommand("ShowAllCh " + ("T" if newvalue else "F") + "\n")
        return None

    def getThreshMV(self, index: int) -> float:
        """Get Threshold[] """
        return self.QueryResponse_float("Thresh["+str(index)+"]?\n")

    def setThreshMV(self, index: int, newvalue:float) :
        """Set Threshold[] """
        self.SendCommand("Thresh["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getUserWordsWords(self, index: int) -> int:
        """Get User words[] """
        return self.QueryResponse_int("UserWords["+str(index)+"]?\n")

    def setUserWordsWords(self, index: int, newvalue:int) :
        """Set User words[] """
        self.SendCommand("UserWords["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getUsingEye(self) -> bool:
        """Get Using Eye Diagramming """
        return self.QueryResponse_bool("UsingEye?\n")

    def AutosetData(self):
        """Method for Perform Data Autoset. Todo: add arguments if needed"""
        print("BranchPelaED:AutosetData(), Todo: add arguments if needed")
        self.SendCommand("AutosetData\n")
        return None

    def ResetClock(self):
        """Method for Reset Clocking. Todo: add arguments if needed"""
        print("BranchPelaED:ResetClock(), Todo: add arguments if needed")
        self.SendCommand("ResetClock\n")
        return None

    def Resync(self):
        """Method for Manual Resync. Todo: add arguments if needed"""
        print("BranchPelaED:Resync(), Todo: add arguments if needed")
        self.SendCommand("Resync\n")
        return None

    def SetDefaults(self):
        """Method for Set Channel Defaults. Todo: add arguments if needed"""
        print("BranchPelaED:SetDefaults(), Todo: add arguments if needed")
        self.SendCommand("SetDefaults\n")
        return None


    # ================================ #

class BranchEfiChannel(AutomationExtender):
    """BranchEfiChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Packed histogram binary data, char[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBins(self) -> int:
        """Get Histogram bin count """
        return self.QueryResponse_int("Bins?\n")

    def setBins(self, newvalue:int) :
        """Set Histogram bin count """
        self.SendCommand("Bins " + str(newvalue) + "\n")
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getHistory(self) -> int:
        """Get Histogram history length """
        return self.QueryResponse_int("History?\n")

    def setHistory(self, newvalue:int) :
        """Set Histogram history length """
        self.SendCommand("History " + str(newvalue) + "\n")
        return None

    def getHReport(self) -> str:
        """Get Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen """
        return self.QueryResponse("HReport?\n")

    def getHSeq(self) -> int:
        """Get Histogram Sequence number """
        return self.QueryResponse_int("HSeq?\n")

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    def getOffset(self) -> float:
        """Get Histogram bin offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffset(self, newvalue:float) :
        """Set Histogram bin offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getResol(self) -> float:
        """Get Histogram bin resolution """
        return self.QueryResponse_float("Resol?\n")

    def setResol(self, newvalue:float) :
        """Set Histogram bin resolution """
        self.SendCommand("Resol " + str(newvalue) + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Ela Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchEfiChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchEfiChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def MapRange(self):
        """Method for Map histogram to fit range. Todo: add arguments if needed"""
        print("BranchEfiChannel:MapRange(), Todo: add arguments if needed")
        self.SendCommand("MapRange\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchEfiChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

class BranchEfi(AutomationExtender):
    """BranchEfi class.  Efi ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchPelaEyeCfg(self, "Ch0:")
        self.Ch1 = BranchPelaEyeCfg(self, "Ch1:")
        self.Cmb = BranchPelaEyeCfg(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

    # ================================ #

class BranchEla(AutomationExtender):
    """BranchEla class.  Pela ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class BitOrder(Enum):
        MsbFirst = "MsbFirst"
        LsbFirst = "LsbFirst"

    def getBitOrder(self) -> BitOrder:
        """Get enum Ela Bit ordering """
        return self.BitOrder(self.QueryResponse_enum(self.BitOrder, "BitOrder?\n"))

    def setBitOrder(self, newvalue: BitOrder) :
        """Set enum Ela Bit ordering """
        self.SendCommand("BitOrder " + newvalue.value + "\n")
        return None

    class BitsFmt(Enum):
        Scientific = "Scientific"
        Decimal = "Decimal"

    def getBitsFmt(self) -> BitsFmt:
        """Get enum Ela Bits Format """
        return self.BitsFmt(self.QueryResponse_enum(self.BitsFmt, "BitsFmt?\n"))

    def setBitsFmt(self, newvalue: BitsFmt) :
        """Set enum Ela Bits Format """
        self.SendCommand("BitsFmt " + newvalue.value + "\n")
        return None

    def getBlockSizeSymbols(self, index: int) -> int:
        """Get Global symbols per block[] """
        return self.QueryResponse_int("BlockSize["+str(index)+"]?\n")

    def setBlockSizeSymbols(self, index: int, newvalue:int) :
        """Set Global symbols per block[] """
        self.SendCommand("BlockSize["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getElaDataRateGHz(self) -> float:
        """Get Ela Data Rate """
        return self.QueryResponse_float("ElaDataRate?\n")

    class ElaLinkMode(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Unlinked = "Unlinked"
        Interleaved = "Interleaved"

    def getElaLinkMode(self) -> ElaLinkMode:
        """Get enum Ela Link Mode """
        return self.ElaLinkMode(self.QueryResponse_enum(self.ElaLinkMode, "ElaLinkMode?\n"))

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    def getElaReport(self) -> str:
        """Get Ela report of 10 things """
        return self.QueryResponse("ElaReport?\n")

    def getElaShowAllCh(self) -> bool:
        """Get Ela Show All Channels """
        return self.QueryResponse_bool("ElaShowAllCh?\n")

    def getFile(self) -> str:
        """Get Ela Filename """
        return self.QueryResponse("File?\n")

    def setFile(self, newvalue:str) :
        """Set Ela Filename """
        self.SendCommand("File " + "\""+newvalue+"\"" + "\n")
        return None

    def getLimitMBMB(self) -> int:
        """Get File Limit MB """
        return self.QueryResponse_int("LimitMB?\n")

    def setLimitMBMB(self, newvalue:int) :
        """Set File Limit MB """
        self.SendCommand("LimitMB " + str(newvalue) + "\n")
        return None

    def getRecordOnly(self) -> bool:
        """Get ELA Record Only flag """
        return self.QueryResponse_bool("RecordOnly?\n")

    def setRecordOnly(self, newvalue:bool) :
        """Set ELA Record Only flag """
        self.SendCommand("RecordOnly " + ("T" if newvalue else "F") + "\n")
        return None

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getSizeMBMB(self) -> float:
        """Get File size MB """
        return self.QueryResponse_float("SizeMB?\n")

    def getSymbolSizeBits(self, index: int) -> int:
        """Get Global bits per symbol[] """
        return self.QueryResponse_int("SymbolSize["+str(index)+"]?\n")

    def setSymbolSizeBits(self, index: int, newvalue:int) :
        """Set Global bits per symbol[] """
        self.SendCommand("SymbolSize["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getTransferBytessec(self) -> float:
        """Get Bytes per second """
        return self.QueryResponse_float("Transfer?\n")

    def Csv(self) -> str:
        """Response method for Save ELA Results in CSV file. Todo: add arguments if needed"""
        print("BranchEla:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def getCommonCapturePcnt(self) -> float:
        """Get Common Capture percentage """
        return self.QueryResponse_float("Common:Capture?\n")

    def getCommonEnabled(self) -> bool:
        """Get Common Enable processor """
        return self.QueryResponse_bool("Common:Enabled?\n")

    def getCommonEvents(self, index: int) -> int:
        """Get Event Count M,R,S,B,P[] """
        return self.QueryResponse_int("Common:Events["+str(index)+"]?\n")

    def getCommonLongRecords(self) -> int:
        """Get Long Record Count """
        return self.QueryResponse_int("Common:LongRecords?\n")

    def getCommonMediumRecords(self) -> int:
        """Get Medium Record Count """
        return self.QueryResponse_int("Common:MediumRecords?\n")

    def getCommonResyncLev(self) -> bool:
        """Get Resynchronization Level """
        return self.QueryResponse_bool("Common:ResyncLev?\n")

    def getCommonShortRecords(self) -> int:
        """Get Short Record Count """
        return self.QueryResponse_int("Common:ShortRecords?\n")

    class CommonStatus(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getCommonStatus(self) -> CommonStatus:
        """Get enum Common Ela Status """
        return self.CommonStatus(self.QueryResponse_enum(self.CommonStatus, "Common:Status?\n"))

    # ================================ #

    # ================================ #
    
class BranchErrCfg(AutomationExtender):
    """BranchErrCfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getIntervalSeconds(self) -> float:
        """Get Update interval """
        return self.QueryResponse_float("Interval?\n")

    def setIntervalSeconds(self, newvalue:float) :
        """Set Update interval """
        self.SendCommand("Interval " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    # ================================ #

class BranchErrChart(AutomationExtender):
    """BranchErrChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottomLogBER(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomLogBER(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightLogBER(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightLogBER(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftSeconds(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftSeconds(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthSeconds(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthSeconds(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    # ================================ #

class BranchErr(AutomationExtender):
    """BranchErr class.  Error Rate Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchErrCfg(self,"Cfg:")
        self.Chart = BranchErrChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getABER(self, index: int) -> float:
        """Get Accumulated BER Result[] """
        return self.QueryResponse_float("ABER["+str(index)+"]?\n")

    def getBerReport(self) -> str:
        """Get Ber report of 15 things """
        return self.QueryResponse("BerReport?\n")

    def getBinary(self) -> bytes:
        """Get binary Binary Data, float[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBits(self, index: int) -> int:
        """Get Bit Count Result[] """
        return self.QueryResponse_int("Bits["+str(index)+"]?\n")

    class BitsFmt(Enum):
        Scientific = "Scientific"
        Decimal = "Decimal"

    def getBitsFmt(self) -> BitsFmt:
        """Get enum ED Bits Format """
        return self.BitsFmt(self.QueryResponse_enum(self.BitsFmt, "BitsFmt?\n"))

    def setBitsFmt(self, newvalue: BitsFmt) :
        """Set enum ED Bits Format """
        self.SendCommand("BitsFmt " + newvalue.value + "\n")
        return None

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    def getErrors(self, index: int) -> int:
        """Get Bit Errors Count Result[] """
        return self.QueryResponse_int("Errors["+str(index)+"]?\n")

    def getIBER(self, index: int) -> float:
        """Get Instantaneous BER Result[] """
        return self.QueryResponse_float("IBER["+str(index)+"]?\n")

    def getResyncCount(self, index: int) -> int:
        """Get Resync Count[] """
        return self.QueryResponse_int("ResyncCount["+str(index)+"]?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getSerial(self) -> int:
        """Get Serial Number of Integration """
        return self.QueryResponse_int("Serial?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowStripSettings(self) -> bool:
        """Get Show Strip Chart Settings """
        return self.QueryResponse_bool("ShowStripSettings?\n")

    def setShowStripSettings(self, newvalue:bool) :
        """Set Show Strip Chart Settings """
        self.SendCommand("ShowStripSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def Csv(self) -> str:
        """Response method for PelaED Csv. Todo: add arguments if needed"""
        print("BranchErr:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Csv2(self) -> str:
        """Response method for PelaErr Csv. Todo: add arguments if needed"""
        print("BranchErr:Csv2(), Todo: add arguments if needed")
        return self.QueryResponse("Csv2\n")

    def Fit(self):
        """Method for PelaED Chart Fit. Todo: add arguments if needed"""
        print("BranchErr:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position. Todo: add arguments if needed"""
        print("BranchErr:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

class BranchPelaEyeCfg(AutomationExtender):
    """BranchPelaEyeCfg class.  Configuration Settings"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottom(self) -> float:
        """Get Acquisition Voltage bottom """
        return self.QueryResponse_float("Bottom?\n")

    def getBright(self) -> float:
        """Get Image Brightness """
        return self.QueryResponse_float("Bright?\n")

    def setBright(self, newvalue:float) :
        """Set Image Brightness """
        self.SendCommand("Bright " + str(newvalue) + "\n")
        return None

    def getColumns(self) -> int:
        """Get Columns in Image """
        return self.QueryResponse_int("Columns?\n")

    def setColumns(self, newvalue:int) :
        """Set Columns in Image """
        self.SendCommand("Columns " + str(newvalue) + "\n")
        return None

    def getDelaySettleUSec(self) -> int:
        """Get Delay Settle Time """
        return self.QueryResponse_int("DelaySettle?\n")

    def setDelaySettleUSec(self, newvalue:int) :
        """Set Delay Settle Time """
        self.SendCommand("DelaySettle " + str(newvalue) + "\n")
        return None

    def getDepthBits(self) -> float:
        """Get E2 Depth """
        return self.QueryResponse_float("Depth?\n")

    def setDepthBits(self, newvalue:float) :
        """Set E2 Depth """
        self.SendCommand("Depth " + str(newvalue) + "\n")
        return None

    def getDivisions(self, index: int) -> int:
        """Get Number of divisions H,V[] """
        return self.QueryResponse_int("Divisions["+str(index)+"]?\n")

    def setDivisions(self, index: int, newvalue:int) :
        """Set Number of divisions H,V[] """
        self.SendCommand("Divisions["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEyeSync(self) -> bool:
        """Get Eye Sync mode """
        return self.QueryResponse_bool("EyeSync?\n")

    def getFloorNoSync(self) -> float:
        """Get Floor threshold for No-Sync mode (500K) """
        return self.QueryResponse_float("FloorNoSync?\n")

    def setFloorNoSync(self, newvalue:float) :
        """Set Floor threshold for No-Sync mode (500K) """
        self.SendCommand("FloorNoSync " + str(newvalue) + "\n")
        return None

    def getFloorSync(self) -> float:
        """Get Floor threshold for Sync mode (500K) """
        return self.QueryResponse_float("FloorSync?\n")

    def setFloorSync(self, newvalue:float) :
        """Set Floor threshold for Sync mode (500K) """
        self.SendCommand("FloorSync " + str(newvalue) + "\n")
        return None

    def getHeight(self) -> float:
        """Get Acquisition Voltage height """
        return self.QueryResponse_float("Height?\n")

    def getOffset(self) -> float:
        """Get Acquisition Time offset """
        return self.QueryResponse_float("Offset?\n")

    def getPerDiv(self, index: int) -> float:
        """Get Span per division[] """
        return self.QueryResponse_float("PerDiv["+str(index)+"]?\n")

    def setPerDiv(self, index: int, newvalue:float) :
        """Set Span per division[] """
        self.SendCommand("PerDiv["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getPersist(self) -> int:
        """Get Persistence """
        return self.QueryResponse_int("Persist?\n")

    def setPersist(self, newvalue:int) :
        """Set Persistence """
        self.SendCommand("Persist " + str(newvalue) + "\n")
        return None

    def getRows(self) -> int:
        """Get Rows in Image """
        return self.QueryResponse_int("Rows?\n")

    def setRows(self, newvalue:int) :
        """Set Rows in Image """
        self.SendCommand("Rows " + str(newvalue) + "\n")
        return None

    def getShowRaw(self) -> bool:
        """Get Show Raw Data """
        return self.QueryResponse_bool("ShowRaw?\n")

    def setShowRaw(self, newvalue:bool) :
        """Set Show Raw Data """
        self.SendCommand("ShowRaw " + ("T" if newvalue else "F") + "\n")
        return None

    def getSpan(self) -> float:
        """Get Acquisition Time span """
        return self.QueryResponse_float("Span?\n")

    def getThreshSettleUSec(self) -> int:
        """Get Threshold Settle Time """
        return self.QueryResponse_int("ThreshSettle?\n")

    def setThreshSettleUSec(self, newvalue:int) :
        """Set Threshold Settle Time """
        self.SendCommand("ThreshSettle " + str(newvalue) + "\n")
        return None

    def getUseClip(self) -> bool:
        """Get Use Clipping for Floor level """
        return self.QueryResponse_bool("UseClip?\n")

    def setUseClip(self, newvalue:bool) :
        """Set Use Clipping for Floor level """
        self.SendCommand("UseClip " + ("T" if newvalue else "F") + "\n")
        return None

    # ================================ #

class BranchPelaEyeChannel(AutomationExtender):
    """BranchPelaEyeChannel class.  Eye Channel"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Binary Data, char[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getScalePcnt(self) -> float:
        """Get Scale ratio percentage """
        return self.QueryResponse_float("Scale?\n")

    def setScalePcnt(self, newvalue:float) :
        """Set Scale ratio percentage """
        self.SendCommand("Scale " + str(newvalue) + "\n")
        return None

    def getShow(self) -> bool:
        """Get Show trace """
        return self.QueryResponse_bool("Show?\n")

    def setShow(self, newvalue:bool) :
        """Set Show trace """
        self.SendCommand("Show " + ("T" if newvalue else "F") + "\n")
        return None

    def getTimeOffsPS(self) -> float:
        """Get Time Offset """
        return self.QueryResponse_float("TimeOffs?\n")

    def setTimeOffsPS(self, newvalue:float) :
        """Set Time Offset """
        self.SendCommand("TimeOffs " + str(newvalue) + "\n")
        return None

    def getVoltOffsMV(self) -> float:
        """Get Volt Offset """
        return self.QueryResponse_float("VoltOffs?\n")

    def setVoltOffsMV(self, newvalue:float) :
        """Set Volt Offset """
        self.SendCommand("VoltOffs " + str(newvalue) + "\n")
        return None

    def Jpg(self) -> str:
        """Response method for PelaEye Jpg Image. Todo: add arguments if needed"""
        print("BranchPelaEyeChannel:Jpg(), Todo: add arguments if needed")
        return self.QueryResponse("Jpg\n")

    # ================================ #

class BranchPelaEyeChart(AutomationExtender):
    """BranchPelaEyeChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottomMV(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomMV(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightMV(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightMV(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    # ================================ #

class BranchPelaEye(AutomationExtender):
    """BranchPelaEye class.  Pela Eye Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchPelaEyeCfg(self,"Cfg:")
        self.Ch0 = BranchPelaEyeChannel(self,"Ch0:")
        self.Ch1 = BranchPelaEyeChannel(self,"Ch1:")
        self.Chart = BranchPelaEyeChart(self, "Chart:")   

    def __del__(self):
        super().__del__()
        return None

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show gui settings panel """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show gui settings panel """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def Fit(self):
        """Method for Fit chart. Todo: add arguments if needed"""
        print("BranchPelaEye:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position. Todo: add arguments if needed"""
        print("BranchPelaEye:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

   # ================================ #

class BranchMaxTChannel(AutomationExtender):
    """BranchMaxTChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Binary Data, float[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBlockSize(self) -> int:
        """Get Block Size """
        return self.QueryResponse_int("BlockSize?\n")

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getIntervalSeconds(self) -> float:
        """Get Update interval """
        return self.QueryResponse_float("Interval?\n")

    def setIntervalSeconds(self, newvalue:float) :
        """Set Update interval """
        self.SendCommand("Interval " + str(newvalue) + "\n")
        return None

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getReport(self) -> str:
        """Get Report-TotalBlocks """
        return self.QueryResponse("Report?\n")

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getSerial(self) -> int:
        """Get Serial Number of Integration """
        return self.QueryResponse_int("Serial?\n")

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Ela Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchMaxTChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchMaxTChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None
    
    # ================================ #

   # ================================ #

class BranchMaxT(AutomationExtender):
    """BranchMaxT class.  MaxT ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchMaxTChannel(self,"Ch0:")
        self.Ch1 = BranchMaxTChannel(self, "Ch1:") 
        self.Cmb = BranchMaxTChannel(self,"Cmb:")

    def __del__(self):
        super().__del__()
        return None


    # ================================ #

class BranchModChannel(AutomationExtender):
    """BranchModChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Packed histogram binary data, char[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBins(self) -> int:
        """Get Histogram bin count """
        return self.QueryResponse_int("Bins?\n")

    def setBins(self, newvalue:int) :
        """Set Histogram bin count """
        self.SendCommand("Bins " + str(newvalue) + "\n")
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getHistory(self) -> int:
        """Get Histogram history length """
        return self.QueryResponse_int("History?\n")

    def setHistory(self, newvalue:int) :
        """Set Histogram history length """
        self.SendCommand("History " + str(newvalue) + "\n")
        return None

    def getHReport(self) -> str:
        """Get Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen """
        return self.QueryResponse("HReport?\n")

    def getHSeq(self) -> int:
        """Get Histogram Sequence number """
        return self.QueryResponse_int("HSeq?\n")

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    def getModSize(self) -> int:
        """Get Modulo Size """
        return self.QueryResponse_int("ModSize?\n")

    def setModSize(self, newvalue:int) :
        """Set Modulo Size """
        self.SendCommand("ModSize " + str(newvalue) + "\n")
        return None

    class ModType(Enum):
        Pattern = "Pattern"
        Manual = "Manual"

    def getModType(self) -> ModType:
        """Get enum Modulo Type """
        return self.ModType(self.QueryResponse_enum(self.ModType, "ModType?\n"))

    def setModType(self, newvalue: ModType) :
        """Set enum Modulo Type """
        self.SendCommand("ModType " + newvalue.value + "\n")
        return None

    def getOffset(self) -> float:
        """Get Histogram bin offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffset(self, newvalue:float) :
        """Set Histogram bin offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getPattern(self) -> str:
        """Get Pattern Type """
        return self.QueryResponse("Pattern?\n")

    def getReport(self) -> str:
        """Get Report-ModSize,ModPattern """
        return self.QueryResponse("Report?\n")

    def getResol(self) -> float:
        """Get Histogram bin resolution """
        return self.QueryResponse_float("Resol?\n")

    def setResol(self, newvalue:float) :
        """Set Histogram bin resolution """
        self.SendCommand("Resol " + str(newvalue) + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getSeed(self) -> int:
        """Get Pattern Seed """
        return self.QueryResponse_int("Seed?\n")

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Ela Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchModChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchModChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def MapRange(self):
        """Method for Map histogram to fit range. Todo: add arguments if needed"""
        print("BranchModChannel:MapRange(), Todo: add arguments if needed")
        self.SendCommand("MapRange\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchModChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

class BranchMod(AutomationExtender):
    """BranchMod class.  Modulo ELA Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchModChannel(self, "Ch0:")
        self.Ch1 = BranchModChannel(self, "Ch1:")
        self.Cmb = BranchModChannel(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

    # ================================ #

class BranchRLenChannel(AutomationExtender):
    """BranchRLenChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Histogram binary data, u32[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBitPop(self) -> int:
        """Get Bit population """
        return self.QueryResponse_int("BitPop?\n")

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class RunType(Enum):
        Space = "Space"
        Mark = "Mark"

    def getRunType(self) -> RunType:
        """Get enum Run length type """
        return self.RunType(self.QueryResponse_enum(self.RunType, "RunType?\n"))

    def setRunType(self, newvalue: RunType) :
        """Set enum Run length type """
        self.SendCommand("RunType " + newvalue.value + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Data Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getUsed(self) -> int:
        """Get Number Used """
        return self.QueryResponse_int("Used?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchRLenChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchRLenChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchRLenChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

class BranchRLen(AutomationExtender):
    """BranchRLen class.  Data Run Length Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchRLenChannel(self, "Ch0:")
        self.Ch1 = BranchRLenChannel(self, "Ch1:")
        self.Cmb = BranchRLenChannel(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

    # ================================ #

class BranchStat(AutomationExtender):
    """BranchStat class.  Data application statistics Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBits(self, index: int) -> int:
        """Get Bit Count Result[] """
        return self.QueryResponse_int("Bits["+str(index)+"]?\n")

    def getEnabled(self, index: int) -> bool:
        """Get Enable processor[] """
        return self.QueryResponse_bool("Enabled["+str(index)+"]?\n")

    def getMarkDensityPcnt(self, index: int) -> float:
        """Get Mark Density results[] """
        return self.QueryResponse_float("MarkDensity["+str(index)+"]?\n")

    def getMarks(self, index: int) -> int:
        """Get Marks Count Result[] """
        return self.QueryResponse_int("Marks["+str(index)+"]?\n")

    def getReport(self) -> str:
        """Get Statistics report """
        return self.QueryResponse("Report?\n")

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self, index: int) -> Status:
        """Get enum Ela Status[] """
        return self.Status(self.QueryResponse_enum(self.Status, "Status["+str(index)+"]?\n"))


    # ================================ #

class BranchWanderChannel(AutomationExtender):
    """BranchWanderChannel class.  Channel Category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> bytes:
        """Get binary Histogram binary data, u32[] """
        return self.QueryBinaryResponse( "Binary?\n")

    def getBitPop(self) -> int:
        """Get Bit population """
        return self.QueryResponse_int("BitPop?\n")

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getEnabled(self) -> bool:
        """Get Enable processor """
        return self.QueryResponse_bool("Enabled?\n")

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLargestPcnt(self) -> float:
        """Get Largest disparity """
        return self.QueryResponse_float("Largest?\n")

    def getLeft(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeft(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Mode(Enum):
        TwoLevel = "TwoLevel"
        FourLevel = "FourLevel"

    def getMode(self) -> Mode:
        """Get enum Wander mode, NRZ or PAM4 """
        return self.Mode(self.QueryResponse_enum(self.Mode, "Mode?\n"))

    def setMode(self, newvalue: Mode) :
        """Set enum Wander mode, NRZ or PAM4 """
        self.SendCommand("Mode " + newvalue.value + "\n")
        return None

    class Order(Enum):
        MsbFirst = "MsbFirst"
        LsbFirst = "LsbFirst"

    def getOrder(self) -> Order:
        """Get enum Symbol order """
        return self.Order(self.QueryResponse_enum(self.Order, "Order?\n"))

    def setOrder(self, newvalue: Order) :
        """Set enum Symbol order """
        self.SendCommand("Order " + newvalue.value + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getSmallestPcnt(self) -> float:
        """Get Smallest disparity """
        return self.QueryResponse_float("Smallest?\n")

    class Status(Enum):
        NotAvail = "NotAvail"
        Disabled = "Disabled"
        Stopped = "Stopped"
        Running = "Running"

    def getStatus(self) -> Status:
        """Get enum Data Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidth(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidth(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

    def getWindowBits(self) -> int:
        """Get Bit window """
        return self.QueryResponse_int("Window?\n")

    def setWindowBits(self, newvalue:int) :
        """Set Bit window """
        self.SendCommand("Window " + str(newvalue) + "\n")
        return None

    def Csv(self) -> str:
        """Response method for Download CSV File. Todo: add arguments if needed"""
        print("BranchWanderChannel:Csv(), Todo: add arguments if needed")
        return self.QueryResponse("Csv\n")

    def Fit(self):
        """Method for Fit chart to data. Todo: add arguments if needed"""
        print("BranchWanderChannel:Fit(), Todo: add arguments if needed")
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset chart. Todo: add arguments if needed"""
        print("BranchWanderChannel:Reset(), Todo: add arguments if needed")
        self.SendCommand("Reset\n")
        return None

    # ================================ #

class BranchWander(AutomationExtender):
    """BranchWander class.  Data Wander Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Ch0 = BranchWanderChannel(self, "Ch0:")
        self.Ch1 = BranchWanderChannel(self, "Ch1:")
        self.Cmb = BranchWanderChannel(self, "Cmb:")

    def __del__(self):
        super().__del__()
        return None

# EOF