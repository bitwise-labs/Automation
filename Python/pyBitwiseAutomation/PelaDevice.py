# PelaDevice.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation.BitwiseDevice import *
from pyBitwiseAutomation.autogenPela import *
from pyBitwiseAutomation.autogenAccessory import *
from pyBitwiseAutomation.autogenCommon import *


class PelaDevice(BitwiseDevice):
    """Pela device class."""

    def __init__(self):
        super().__init__()

        self.Patt = BranchPatt(self, "Patt:")
        self.Eye = BranchPelaEye(self, "Eye:")
        self.Basic = BranchBasic(self, "Basic:")
        self.Block = BranchBlock(self, "Block:")
        self.Burst = BranchBurst(self, "Burst:")
        self.Data = BranchData(self, "Data:")
        self.ED = BranchPelaED(self, "ED:")
        self.Efi = BranchEfi(self, "Efi:")
        self.Ela = BranchEla(self, "Ela:")
        self.Err = BranchErr(self, "Err:")
        self.MaxT = BranchMaxT(self, "MaxT:")
        self.Wander = BranchWander(self, "Wander:")
        self.Mod = BranchMod(self, "Mod:")
        self.RLen = BranchRLen(self, "RLen:")
        self.Stat = BranchStat(self, "Stat:")

    def getTemperatureC(self, averages: int = 5) -> float:
        """Get Adc TEMPERATURE rate limit """
        if averages < 1 :
            averages = 1

        sum = 0.0
        n = 0
        while n<averages:
            sum = sum + self.QueryResponse_float("Adc:Bot?\n")
            time.sleep(0.010)
            n = n + 1

        return sum / n

    def __del__(self):
        # # turn off amplifiers upon every Pela object deletion
        # if self.getIsConnected():
        #     self.PG.setAllOn(False)

        super().__del__()
        return None

# EOF