# AutomationExtender.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================


from pyBitwiseAutomation.AutomationInterface import AutomationInterface
from enum import Enum

class AutomationExtender(AutomationInterface):
	"""Automation Extender class."""

	def __init__(self, parent:AutomationInterface, prefix: str ):
		super().__init__()
		self.Parent = parent
		self.Prefix = prefix
		self.Debugging = False
		return None

	def __del__(self):
		super().__del__()
		return None

	def getDebugging(self) -> bool:
		return self.Debugging or self.Parent.getDebugging()

	def setDebugging(self, newvalue: bool):
		self.Debugging=newvalue

	def SendCommand(self, command:str ):
		"""Send command (ending with '\n') to socket device."""
		self.Parent.SendCommand(self.Prefix+command)
		return None

	def QueryResponse(self, command: str, maxLength: int = 4096) -> str:
		"""Query response from command (ending with '\n') from socket device."""
		return self.Parent.QueryResponse(self.Prefix+command,maxLength)

	def SendBinaryCommand(self, command: str, buffer: bytes):
		"""Send command (ending with '\n') followed by 4-byte count and array of bytes to socket device."""
		self.Parent.SendBinaryCommand(self.Prefix+command,buffer)
		return None

	def QueryBinaryResponse(self, command: str) -> bytes:
		"""Query array of bytes response from command (ending with '\n') from socket device."""
		return self.Parent.QueryBinaryResponse(self.Prefix+command)

	def QueryBinaryResponse_float(self, command: str) -> list:
		"""Query array of bytes response from command (ending with '\n') from socket device."""
		return self.Parent.QueryBinaryResponse_float(self.Prefix+command)

	def QueryBinaryResponse_int(self, command: str) -> list:
		"""Query array of bytes response from command (ending with '\n') from socket device."""
		return self.Parent.QueryBinaryResponse_int(self.Prefix+command)

	def QueryBinaryResponse_double(self, command: str) -> list:
		"""Query array of bytes response from command (ending with '\n') from socket device."""
		return self.Parent.QueryBinaryResponse_double(self.Prefix+command)

	def QueryResponse_int(self, command: str) -> int:
		"""Query integer response from command (ending with '\n') from socket device."""
		return self.Parent.QueryResponse_int(self.Prefix+command)

	def QueryResponse_bool(self, command: str) -> bool:
		"""Query boolean response from command (ending with '\n') from socket device."""
		return self.Parent.QueryResponse_bool(self.Prefix+command)

	def QueryResponse_float(self, command: str) -> float:
		"""Query float response from command (ending with '\n') from socket device."""
		return self.Parent.QueryResponse_float(self.Prefix+command)

	def QueryResponse_enum(self, enumeration: Enum, command: str) -> Enum:
		"""Query integer index of enum response from command (ending with '\n') from socket device."""
		return self.Parent.QueryResponse_enum(enumeration,self.Prefix+command)

# EOF
