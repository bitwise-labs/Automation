# autogenAccessory.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================


from pyBitwiseAutomation.autogenCommon import *
from enum import Enum

# ================================ #


class BranchAccPUL(AutomationExtender):
    """BranchAccPUL class.  Pulser accessory"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Const = BranchConst(self, "Const:")

    def __del__(self):
        super().__del__()
        return None

    def getAmplMV(self) -> float:
        """Get Pulse amplitude """
        return self.QueryResponse_float("Ampl?\n")

    def setAmplMV(self, newvalue: float):
        """Set Pulse amplitude """
        self.SendCommand("Ampl " + str(newvalue) + "\n")
        return None

    def getDiffSkewPS(self) -> float:
        """Get Differential Skew """
        return self.QueryResponse_float("DiffSkew?\n")

    def setDiffSkewPS(self, newvalue: float):
        """Set Differential Skew """
        self.SendCommand("DiffSkew " + str(newvalue) + "\n")
        return None

    def getNegEnabled(self) -> bool:
        """Get Negative leg enabled """
        return self.QueryResponse_bool("NegEnabled?\n")

    def setNegEnabled(self, newvalue: bool):
        """Set Negative leg enabled """
        self.SendCommand("NegEnabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getPosEnabled(self) -> bool:
        """Get Positive leg enabled """
        return self.QueryResponse_bool("PosEnabled?\n")

    def setPosEnabled(self, newvalue: bool):
        """Set Positive leg enabled """
        self.SendCommand("PosEnabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getTrigRateGHz(self) -> float:
        """Get Trigger rate """
        return self.QueryResponse_float("TrigRate?\n")

    def setTrigRateGHz(self, newvalue: float):
        """Set Trigger rate """
        self.SendCommand("TrigRate " + str(newvalue) + "\n")
        return None

    class Width(Enum):
        _1 = "1"
        _2 = "2"
        _4 = "4"
        _8 = "8"
        _16 = "16"

    def getWidth(self) -> Width:
        """Get enum Pulse width selection """
        return self.Width(self.QueryResponse_enum(self.Width, "Width?\n"))

    def setWidth(self, newvalue: Width):
        """Set enum Pulse width selection """
        self.SendCommand("Width " + newvalue.value + "\n")
        return None

# ================================ #


class BranchAccDDRStress(AutomationExtender):
    """BranchAccDDRStress class.  Stress category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getOpRateGbps(self) -> float:
        """Get Operating rate """
        return self.QueryResponse_float("OpRate?\n")

    def setOpRateGbps(self, newvalue: float):
        """Set Operating rate """
        self.SendCommand("OpRate " + str(newvalue) + "\n")
        return None

    def getRJEnabled(self) -> bool:
        """Get RJ Enabled """
        return self.QueryResponse_bool("RJEnabled?\n")

    def setRJEnabled(self, newvalue: bool):
        """Set RJ Enabled """
        self.SendCommand("RJEnabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getRJLevelPSrms(self) -> float:
        """Get RJ Level RMS """
        return self.QueryResponse_float("RJLevel?\n")

    def setRJLevelPSrms(self, newvalue: float):
        """Set RJ Level RMS """
        self.SendCommand("RJLevel " + str(newvalue) + "\n")
        return None

    def getSIAmplMV(self) -> float:
        """Get SI Amplitude """
        return self.QueryResponse_float("SIAmpl?\n")

    def setSIAmplMV(self, newvalue: float):
        """Set SI Amplitude """
        self.SendCommand("SIAmpl " + str(newvalue) + "\n")
        return None

    def getSIEnabled(self) -> bool:
        """Get SI Enabled """
        return self.QueryResponse_bool("SIEnabled?\n")

    def setSIEnabled(self, newvalue: bool):
        """Set SI Enabled """
        self.SendCommand("SIEnabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getSIFreqMHz(self) -> float:
        """Get SI Frequency """
        return self.QueryResponse_float("SIFreq?\n")

    def setSIFreqMHz(self, newvalue: float):
        """Set SI Frequency """
        self.SendCommand("SIFreq " + str(newvalue) + "\n")
        return None

    def getSJEnabled(self) -> bool:
        """Get SJ Enabled """
        return self.QueryResponse_bool("SJEnabled?\n")

    def setSJEnabled(self, newvalue: bool):
        """Set SJ Enabled """
        self.SendCommand("SJEnabled " + ("T" if newvalue else "F") + "\n")
        return None

    def getSJFreqMHz(self) -> float:
        """Get SJ Frequency """
        return self.QueryResponse_float("SJFreq?\n")

    def setSJFreqMHz(self, newvalue: float):
        """Set SJ Frequency """
        self.SendCommand("SJFreq " + str(newvalue) + "\n")
        return None

    def getSJLevelPSpp(self) -> float:
        """Get SJ Level """
        return self.QueryResponse_float("SJLevel?\n")

    def setSJLevelPSpp(self, newvalue: float):
        """Set SJ Level """
        self.SendCommand("SJLevel " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchAccDDRCTC(AutomationExtender):
    """BranchAccDDRCTC class.  CTC2 Board category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def DramMPC(self, devaddr: int, channel: int, rank: int, data: int ):
        """Method for DramMPC devaddr(0-3F), channel(0-1), rank(0-1), data(0-FF)."""
        self.SendCommand("DramMPC "+str(devaddr)+" " + str(channel)+" " + str(rank) + " " + hex(data) + "\n")
        return None

    def DramMRR(self, devaddr: int, channel: int, rank: int, address: int ):
        """Method for DramMRR devaddr(0-3F), channel(0-1), rank(0-1), address(0-FF). """
        self.SendCommand("DramMRR "+str(devaddr)+" " + str(channel)+" " + str(rank) + " " + str(address) + "\n")
        return None

    def DramMRW(self, devaddr: int, channel: int, rank: int, address: int, data: int ):
        """Method for DramMRW devaddr(0-3F), channel(0-1), rank(0-1), address(0-FF), data(0-FF)."""
        self.SendCommand("DramMRW "+str(devaddr)+" " + str(channel)+" " + str(rank) + " " + str(address) + " " + hex(data) + "\n")
        return None

    def DramNOP(self, devaddr: int, channel: int, rank: int ):
        """Method for DramNOP devaddr(0-3F), channel(0-1), rank(0-1)."""
        self.SendCommand("DramNOP "+str(devaddr)+" " + str(channel)+" " + str(rank) + "\n")
        return None

    def I2cWriteByte(self, devaddr: int, address: int, value: int ):
        """Method for I2cWriteByte devaddr(0-3F), address(0-FF), value(0-FF)."""
        self.SendCommand("I2cWriteByte "+str(devaddr)+" " + str(address) + " " + hex(value) + "\n")
        return None

    def I2cReadByte(self, devaddr: int, address: int, value: int ) -> int :
        """Method for devaddr(0-3F), address(0-FF), value(0-FF)."""
        return self.QueryResponse_int("I2cReadByte "+str(devaddr)+" " + str(address) + "\n")

    def ReadByte(self, devaddr: int, address: int):
        """Method for ReadByte devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages)."""
        return self.QueryResponse_int("ReadByte "+str(devaddr)+" " + str(address) + "\n")

    def ReadDword(self, devaddr: int, channel: int, address: int) -> int :
        """Method for ReadDword devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages)."""
        return self.QueryResponse_int("ReadDword "+str(devaddr)+" " + str(channel) + " " + str(address) + "\n")

    def SetGpio(self, pin: int, value: bool):
        """Method for SetGpio pin 0-15, value T/F."""
        self.SendCommand("SetGpio " + str(pin) + ("T" if value else "F") + "\n")
        return None

    def WriteByte(self, devaddr: int, channel: int, address: int, value: int ):
        """Method for WriteByte devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FF)."""
        self.SendCommand("WriteByte "+str(devaddr)+" " + str(channel)+" " + str(address) + " " + hex(value) + "\n")
        return None

    def WriteDword(self, devaddr: int, channel: int, address: int, value: int ):
        """Method for WriteDword devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FFFFFFFF)."""
        self.SendCommand("WriteDword "+str(devaddr)+" " + str(channel)+" " + str(address) + " " + hex(value) + "\n")
        return None

    def WriteWord(self, devaddr: int, channel: int, address: int, value: int ):
        """Method for WriteWord devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FFFF)."""
        self.SendCommand("WriteWord "+str(devaddr)+" " + str(channel)+" " + str(address) + " " + hex(value) + "\n")
        return None

# ================================ #

class BranchAccDDRDFE(AutomationExtender):
    """BranchAccDDRDFE class.  DFE category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getEnables(self, index: int) -> bool:
        """Get DFE Tap enable values[] """
        return self.QueryResponse_bool("Enables[" + str(index) + "]?\n")

    def setEnables(self, index: int, newvalue: bool):
        """Set DFE Tap enable values[] """
        self.SendCommand("Enables[" + str(index) + "] " + ("T" if newvalue else "F") + "\n")
        return None

    class Gain(Enum):
        __6dB = "-6dB"
        __4dB = "-4dB"
        __2dB = "-2dB"
        _0dB = "0dB"
        _2dB = "2dB"
        _4dB = "4dB"
        _6dB = "6dB"

    def getGain(self) -> Gain:
        """Get enum DFE Gain selection """
        return self.Gain(self.QueryResponse_enum(self.Gain, "Gain?\n"))

    def setGain(self, newvalue: Gain):
        """Set enum DFE Gain selection """
        self.SendCommand("Gain " + newvalue.value + "\n")
        return None

    def getTapsMV(self, index: int) -> float:
        """Get DFE Tap values[] """
        return self.QueryResponse_float("Taps[" + str(index) + "]?\n")

    def setTapsMV(self, index: int, newvalue: float):
        """Set DFE Tap values[] """
        self.SendCommand("Taps[" + str(index) + "] " + str(newvalue) + "\n")
        return None

    def Program(self):
        """Method for Program DFE with current settings. Todo: add arguments if needed"""
        print("BranchAccDDRDFE:Program(), Todo: add arguments if needed")
        self.SendCommand("Program\n")
        return None

# ================================ #


class BranchAccDDRI2C(AutomationExtender):
    """BranchAccDDRI2C class.  I2C Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAux(self) -> int:
        """Get High 6 bits of control register """
        return self.QueryResponse_int("Aux?\n")

    def setAux(self, newvalue: int):
        """Set High 6 bits of control register """
        self.SendCommand("Aux " + str(newvalue) + "\n")
        return None

    def Read(self):
        """Method for Read bytes. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:Read(), Todo: add arguments if needed")
        self.SendCommand("Read\n")
        return None

    def ReadBYTE(self):
        """Method for Read byte using special format. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:ReadBYTE(), Todo: add arguments if needed")
        self.SendCommand("ReadBYTE\n")
        return None

    def ReadDWORD(self):
        """Method for Read DWORD using special format. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:ReadDWORD(), Todo: add arguments if needed")
        self.SendCommand("ReadDWORD\n")
        return None

    def ReadHost(self):
        """Method for Read Host bytes. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:ReadHost(), Todo: add arguments if needed")
        self.SendCommand("ReadHost\n")
        return None

    def ReadWORD(self):
        """Method for Read WORD using special format. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:ReadWORD(), Todo: add arguments if needed")
        self.SendCommand("ReadWORD\n")
        return None

    def Write(self):
        """Method for Write bytes. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:Write(), Todo: add arguments if needed")
        self.SendCommand("Write\n")
        return None

    def WriteBYTE(self):
        """Method for Write byte using special format. Todo: add arguments if needed"""
        print("BranchAccDDRI2C:WriteBYTE(), Todo: add arguments if needed")
        self.SendCommand("WriteBYTE\n")
        return None

    def WriteDWORD(self):
        """Method for Write DWORD using special format (DWORD must be hex). Todo: add arguments if needed"""
        print("BranchAccDDRI2C:WriteDWORD(), Todo: add arguments if needed")
        self.SendCommand("WriteDWORD\n")
        return None

    def WriteWORD(self):
        """Method for Write WORD using special format (WORD must be hex). Todo: add arguments if needed"""
        print("BranchAccDDRI2C:WriteWORD(), Todo: add arguments if needed")
        self.SendCommand("WriteWORD\n")
        return None

# ================================ #


class BranchAccDDRRef(AutomationExtender):
    """BranchAccDDRRef class.  Reference clock category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAmplMV(self) -> float:
        """Get Reference clock amplitude """
        return self.QueryResponse_float("Ampl?\n")

    def setAmplMV(self, newvalue: float):
        """Set Reference clock amplitude """
        self.SendCommand("Ampl " + str(newvalue) + "\n")
        return None

    class Coupling(Enum):
        DC = "DC"
        AC = "AC"

    def getCoupling(self) -> Coupling:
        """Get enum Reference Coupling Type """
        return self.Coupling(self.QueryResponse_enum(self.Coupling, "Coupling?\n"))

    def setCoupling(self, newvalue: Coupling):
        """Set enum Reference Coupling Type """
        self.SendCommand("Coupling " + newvalue.value + "\n")
        return None

    def getDCLevelMV(self) -> float:
        """Get Reference Termination DC Level """
        return self.QueryResponse_float("DCLevel?\n")

    def setDCLevelMV(self, newvalue: float):
        """Set Reference Termination DC Level """
        self.SendCommand("DCLevel " + str(newvalue) + "\n")
        return None

    def getDelayPS(self) -> float:
        """Get Ref clock delay """
        return self.QueryResponse_float("Delay?\n")

    def setDelayPS(self, newvalue: float):
        """Set Ref clock delay """
        self.SendCommand("Delay " + str(newvalue) + "\n")
        return None

    def getImpedanceOhms(self) -> float:
        """Get Reference Termination Impedance """
        return self.QueryResponse_float("Impedance?\n")

    def setImpedanceOhms(self, newvalue: float):
        """Set Reference Termination Impedance """
        self.SendCommand("Impedance " + str(newvalue) + "\n")
        return None

    def getInvert(self) -> bool:
        """Get Reference clock invert """
        return self.QueryResponse_bool("Invert?\n")

    def setInvert(self, newvalue: bool):
        """Set Reference clock invert """
        self.SendCommand("Invert " + ("T" if newvalue else "F") + "\n")
        return None

    def getLink(self) -> bool:
        """Get Reference DC offsets linked """
        return self.QueryResponse_bool("Link?\n")

    def setLink(self, newvalue: bool):
        """Set Reference DC offsets linked """
        self.SendCommand("Link " + ("T" if newvalue else "F") + "\n")
        return None

    def getOffsetNegMV(self) -> float:
        """Get Reference clock offset negative """
        return self.QueryResponse_float("OffsetNeg?\n")

    def setOffsetNegMV(self, newvalue: float):
        """Set Reference clock offset negative """
        self.SendCommand("OffsetNeg " + str(newvalue) + "\n")
        return None

    def getOffsetPosMV(self) -> float:
        """Get Reference clock offset """
        return self.QueryResponse_float("OffsetPos?\n")

    def setOffsetPosMV(self, newvalue: float):
        """Set Reference clock offset """
        self.SendCommand("OffsetPos " + str(newvalue) + "\n")
        return None

    class TermType(Enum):
        DC = "DC"
        AC = "AC"

    def getTermType(self) -> TermType:
        """Get enum Reference Termination Type """
        return self.TermType(self.QueryResponse_enum(self.TermType, "TermType?\n"))

    def setTermType(self, newvalue: TermType):
        """Set enum Reference Termination Type """
        self.SendCommand("TermType " + newvalue.value + "\n")
        return None

# ================================ #

class BranchAccDDRTerm(AutomationExtender):
    """BranchAccDDRTerm class.  Termination category"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class CA(Enum):
        Off = "Off"
        _480Ohm = "480Ohm"
        _240Ohm = "240Ohm"
        _80Ohm = "80Ohm"
        _60Ohm = "60Ohm"
        _40Ohm = "40Ohm"

    def getCA(self, index: int) -> CA:
        """Get enum Termination settings for CA, 0=GroupA, 1=GroupB[] """
        return self.CA(self.QueryResponse_enum(self.CA, "CA[" + str(index) + "]?\n"))

    def setCA(self, index: int, newvalue: CA):
        """Set enum Termination settings for CA, 0=GroupA, 1=GroupB[] """
        self.SendCommand("CA[" + str(index) + "] " + newvalue.value + "\n")
        return None

    class CK(Enum):
        Off = "Off"
        _480Ohm = "480Ohm"
        _240Ohm = "240Ohm"
        _80Ohm = "80Ohm"
        _60Ohm = "60Ohm"
        _40Ohm = "40Ohm"

    def getCK(self, index: int) -> CK:
        """Get enum Termination settings for CK, 0=GroupA, 1=GroupB[] """
        return self.CK(self.QueryResponse_enum(self.CK, "CK[" + str(index) + "]?\n"))

    def setCK(self, index: int, newvalue: CK):
        """Set enum Termination settings for CK, 0=GroupA, 1=GroupB[] """
        self.SendCommand("CK[" + str(index) + "] " + newvalue.value + "\n")
        return None

    class CS(Enum):
        Off = "Off"
        _480Ohm = "480Ohm"
        _240Ohm = "240Ohm"
        _80Ohm = "80Ohm"
        _60Ohm = "60Ohm"
        _40Ohm = "40Ohm"

    def getCS(self, index: int) -> CS:
        """Get enum Termination settings for CS, 0=GroupA, 1=GroupB[] """
        return self.CS(self.QueryResponse_enum(self.CS, "CS[" + str(index) + "]?\n"))

    def setCS(self, index: int, newvalue: CS):
        """Set enum Termination settings for CS, 0=GroupA, 1=GroupB[] """
        self.SendCommand("CS[" + str(index) + "] " + newvalue.value + "\n")
        return None

    class DQ(Enum):
        Off = "Off"
        _240Ohm = "240Ohm"
        _120Ohm = "120Ohm"
        _80Ohm = "80Ohm"
        _60Ohm = "60Ohm"
        _48Ohm = "48Ohm"
        _40Ohm = "40Ohm"
        _34Ohm = "34Ohm"

    def getDQ(self) -> DQ:
        """Get enum Termination setting for DQ """
        return self.DQ(self.QueryResponse_enum(self.DQ, "DQ?\n"))

    def setDQ(self, newvalue: DQ):
        """Set enum Termination setting for DQ """
        self.SendCommand("DQ " + newvalue.value + "\n")
        return None

    class DQS(Enum):
        Off = "Off"
        _240Ohm = "240Ohm"
        _120Ohm = "120Ohm"
        _80Ohm = "80Ohm"
        _60Ohm = "60Ohm"
        _48Ohm = "48Ohm"
        _40Ohm = "40Ohm"
        _34Ohm = "34Ohm"

    def getDQS(self) -> DQS:
        """Get enum Termination setting for DQS """
        return self.DQS(self.QueryResponse_enum(self.DQS, "DQS?\n"))

    def setDQS(self, newvalue: DQS):
        """Set enum Termination setting for DQS """
        self.SendCommand("DQS " + newvalue.value + "\n")
        return None

    def Program(self):
        """Method for Program Terminations. Todo: add arguments if needed"""
        print("BranchAccDDRTerm:Program(), Todo: add arguments if needed")
        self.SendCommand("Program\n")
        return None


class BranchAccDDR(AutomationExtender):
    """BranchAccDDR class.  DDR5 accessory"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Const = BranchConst(self,"Const:")
        self.CTC = BranchAccDDRCTC(self, "CTC:")
        self.DFE = BranchAccDDRDFE(self, "DFE:")
        self.I2C = BranchAccDDRI2C(self, "I2C:")
        self.Ref = BranchAccDDRRef(self, "Ref:")
        self.Stress = BranchAccDDRStress(self,"Stress:")
        self.Term = BranchAccDDRTerm(self,"Term:")

    def __del__(self):
        super().__del__()
        return None

    class CardType(Enum):
        RDIMM = "RDIMM"
        LRDIMM = "LRDIMM"
        COMBO = "COMBO"

    def getCardType(self) -> CardType:
        """Get enum Loopback card type selection """
        return self.CardType(self.QueryResponse_enum(self.CardType, "CardType?\n"))

    def setCardType(self, newvalue: CardType) :
        """Set enum Loopback card type selection """
        self.SendCommand("CardType " + newvalue.value + "\n")
        return None

    class Channel(Enum):
        ChA = "ChA"
        ChB = "ChB"

    def getChannel(self) -> Channel:
        """Get enum Loopback Channel under test """
        return self.Channel(self.QueryResponse_enum(self.Channel, "Channel?\n"))

    def setChannel(self, newvalue: Channel) :
        """Set enum Loopback Channel under test """
        self.SendCommand("Channel " + newvalue.value + "\n")
        return None

    class ConnectClock(Enum):
        ClockSignals = "ClockSignals"
        DataSignals = "DataSignals"
        CommandSignals = "CommandSignals"
        CK = "CK"
        DQS0_A = "DQS0_A"
        DQS1_A = "DQS1_A"
        DQS2_A = "DQS2_A"
        DQS3_A = "DQS3_A"
        DQS4_A = "DQS4_A"
        DQS5_A = "DQS5_A"
        DQS6_A = "DQS6_A"
        DQS7_A = "DQS7_A"
        DQS8_A = "DQS8_A"
        DQS9_A = "DQS9_A"
        DQS0_B = "DQS0_B"
        DQS1_B = "DQS1_B"
        DQS2_B = "DQS2_B"
        DQS3_B = "DQS3_B"
        DQS4_B = "DQS4_B"
        DQS5_B = "DQS5_B"
        DQS6_B = "DQS6_B"
        DQS7_B = "DQS7_B"
        DQS8_B = "DQS8_B"
        DQS9_B = "DQS9_B"
        DQ0_A = "DQ0_A"
        DQ1_A = "DQ1_A"
        DQ2_A = "DQ2_A"
        DQ3_A = "DQ3_A"
        DQ4_A = "DQ4_A"
        DQ5_A = "DQ5_A"
        DQ6_A = "DQ6_A"
        DQ7_A = "DQ7_A"
        DQ8_A = "DQ8_A"
        DQ9_A = "DQ9_A"
        DQ10_A = "DQ10_A"
        DQ11_A = "DQ11_A"
        DQ12_A = "DQ12_A"
        DQ13_A = "DQ13_A"
        DQ14_A = "DQ14_A"
        DQ15_A = "DQ15_A"
        DQ16_A = "DQ16_A"
        DQ17_A = "DQ17_A"
        DQ18_A = "DQ18_A"
        DQ19_A = "DQ19_A"
        DQ20_A = "DQ20_A"
        DQ21_A = "DQ21_A"
        DQ22_A = "DQ22_A"
        DQ23_A = "DQ23_A"
        DQ24_A = "DQ24_A"
        DQ25_A = "DQ25_A"
        DQ26_A = "DQ26_A"
        DQ27_A = "DQ27_A"
        DQ28_A = "DQ28_A"
        DQ29_A = "DQ29_A"
        DQ30_A = "DQ30_A"
        DQ31_A = "DQ31_A"
        DQ0_B = "DQ0_B"
        DQ1_B = "DQ1_B"
        DQ2_B = "DQ2_B"
        DQ3_B = "DQ3_B"
        DQ4_B = "DQ4_B"
        DQ5_B = "DQ5_B"
        DQ6_B = "DQ6_B"
        DQ7_B = "DQ7_B"
        DQ8_B = "DQ8_B"
        DQ9_B = "DQ9_B"
        DQ10_B = "DQ10_B"
        DQ11_B = "DQ11_B"
        DQ12_B = "DQ12_B"
        DQ13_B = "DQ13_B"
        DQ14_B = "DQ14_B"
        DQ15_B = "DQ15_B"
        DQ16_B = "DQ16_B"
        DQ17_B = "DQ17_B"
        DQ18_B = "DQ18_B"
        DQ19_B = "DQ19_B"
        DQ20_B = "DQ20_B"
        DQ21_B = "DQ21_B"
        DQ22_B = "DQ22_B"
        DQ23_B = "DQ23_B"
        DQ24_B = "DQ24_B"
        DQ25_B = "DQ25_B"
        DQ26_B = "DQ26_B"
        DQ27_B = "DQ27_B"
        DQ28_B = "DQ28_B"
        DQ29_B = "DQ29_B"
        DQ30_B = "DQ30_B"
        DQ31_B = "DQ31_B"
        CA0_A = "CA0_A"
        CA1_A = "CA1_A"
        CA2_A = "CA2_A"
        CA3_A = "CA3_A"
        CA4_A = "CA4_A"
        CA5_A = "CA5_A"
        CA6_A = "CA6_A"
        CA0_B = "CA0_B"
        CA1_B = "CA1_B"
        CA2_B = "CA2_B"
        CA3_B = "CA3_B"
        CA4_B = "CA4_B"
        CA5_B = "CA5_B"
        CA6_B = "CA6_B"

    def getConnectClock(self) -> ConnectClock:
        """Get enum Loopback Clock signal associated with lane selection """
        return self.ConnectClock(self.QueryResponse_enum(self.ConnectClock, "ConnectClock?\n"))

    class ConnectData(Enum):
        ClockSignals = "ClockSignals"
        DataSignals = "DataSignals"
        CommandSignals = "CommandSignals"
        CK = "CK"
        DQS0_A = "DQS0_A"
        DQS1_A = "DQS1_A"
        DQS2_A = "DQS2_A"
        DQS3_A = "DQS3_A"
        DQS4_A = "DQS4_A"
        DQS5_A = "DQS5_A"
        DQS6_A = "DQS6_A"
        DQS7_A = "DQS7_A"
        DQS8_A = "DQS8_A"
        DQS9_A = "DQS9_A"
        DQS0_B = "DQS0_B"
        DQS1_B = "DQS1_B"
        DQS2_B = "DQS2_B"
        DQS3_B = "DQS3_B"
        DQS4_B = "DQS4_B"
        DQS5_B = "DQS5_B"
        DQS6_B = "DQS6_B"
        DQS7_B = "DQS7_B"
        DQS8_B = "DQS8_B"
        DQS9_B = "DQS9_B"
        DQ0_A = "DQ0_A"
        DQ1_A = "DQ1_A"
        DQ2_A = "DQ2_A"
        DQ3_A = "DQ3_A"
        DQ4_A = "DQ4_A"
        DQ5_A = "DQ5_A"
        DQ6_A = "DQ6_A"
        DQ7_A = "DQ7_A"
        DQ8_A = "DQ8_A"
        DQ9_A = "DQ9_A"
        DQ10_A = "DQ10_A"
        DQ11_A = "DQ11_A"
        DQ12_A = "DQ12_A"
        DQ13_A = "DQ13_A"
        DQ14_A = "DQ14_A"
        DQ15_A = "DQ15_A"
        DQ16_A = "DQ16_A"
        DQ17_A = "DQ17_A"
        DQ18_A = "DQ18_A"
        DQ19_A = "DQ19_A"
        DQ20_A = "DQ20_A"
        DQ21_A = "DQ21_A"
        DQ22_A = "DQ22_A"
        DQ23_A = "DQ23_A"
        DQ24_A = "DQ24_A"
        DQ25_A = "DQ25_A"
        DQ26_A = "DQ26_A"
        DQ27_A = "DQ27_A"
        DQ28_A = "DQ28_A"
        DQ29_A = "DQ29_A"
        DQ30_A = "DQ30_A"
        DQ31_A = "DQ31_A"
        DQ0_B = "DQ0_B"
        DQ1_B = "DQ1_B"
        DQ2_B = "DQ2_B"
        DQ3_B = "DQ3_B"
        DQ4_B = "DQ4_B"
        DQ5_B = "DQ5_B"
        DQ6_B = "DQ6_B"
        DQ7_B = "DQ7_B"
        DQ8_B = "DQ8_B"
        DQ9_B = "DQ9_B"
        DQ10_B = "DQ10_B"
        DQ11_B = "DQ11_B"
        DQ12_B = "DQ12_B"
        DQ13_B = "DQ13_B"
        DQ14_B = "DQ14_B"
        DQ15_B = "DQ15_B"
        DQ16_B = "DQ16_B"
        DQ17_B = "DQ17_B"
        DQ18_B = "DQ18_B"
        DQ19_B = "DQ19_B"
        DQ20_B = "DQ20_B"
        DQ21_B = "DQ21_B"
        DQ22_B = "DQ22_B"
        DQ23_B = "DQ23_B"
        DQ24_B = "DQ24_B"
        DQ25_B = "DQ25_B"
        DQ26_B = "DQ26_B"
        DQ27_B = "DQ27_B"
        DQ28_B = "DQ28_B"
        DQ29_B = "DQ29_B"
        DQ30_B = "DQ30_B"
        DQ31_B = "DQ31_B"
        CA0_A = "CA0_A"
        CA1_A = "CA1_A"
        CA2_A = "CA2_A"
        CA3_A = "CA3_A"
        CA4_A = "CA4_A"
        CA5_A = "CA5_A"
        CA6_A = "CA6_A"
        CA0_B = "CA0_B"
        CA1_B = "CA1_B"
        CA2_B = "CA2_B"
        CA3_B = "CA3_B"
        CA4_B = "CA4_B"
        CA5_B = "CA5_B"
        CA6_B = "CA6_B"

    def getConnectData(self) -> ConnectData:
        """Get enum Loopback Data signal associated with lane selection """
        return self.ConnectData(self.QueryResponse_enum(self.ConnectData, "ConnectData?\n"))

    class Device(Enum):
        DRAM = "DRAM"
        RCD = "RCD"
        DB = "DB"

    def getDevice(self) -> Device:
        """Get enum Loopback Device under test """
        return self.Device(self.QueryResponse_enum(self.Device, "Device?\n"))

    def setDevice(self, newvalue: Device) :
        """Set enum Loopback Device under test """
        self.SendCommand("Device " + newvalue.value + "\n")
        return None

    class DramType(Enum):
        _1RX4 = "1RX4"
        _1RX8 = "1RX8"
        _2RX4 = "2RX4"
        _2RX8 = "2RX8"

    def getDramType(self) -> DramType:
        """Get enum Loopback DIMM Type selection """
        return self.DramType(self.QueryResponse_enum(self.DramType, "DramType?\n"))

    def setDramType(self, newvalue: DramType) :
        """Set enum Loopback DIMM Type selection """
        self.SendCommand("DramType " + newvalue.value + "\n")
        return None

    class Host(Enum):
        Host0 = "Host0"
        Host1 = "Host1"
        Host2 = "Host2"
        Host3 = "Host3"
        Host4 = "Host4"
        Host5 = "Host5"
        Host6 = "Host6"
        Host7 = "Host7"

    def getHost(self) -> Host:
        """Get enum SM Bus device host ID """
        return self.Host(self.QueryResponse_enum(self.Host, "Host?\n"))

    def setHost(self, newvalue: Host) :
        """Set enum SM Bus device host ID """
        self.SendCommand("Host " + newvalue.value + "\n")
        return None

    def getInProgress(self) -> bool:
        """Get Loopback in progress """
        return self.QueryResponse_bool("InProgress?\n")

    class Lane(Enum):
        DQ0_A = "DQ0_A"
        DQ1_A = "DQ1_A"
        DQ2_A = "DQ2_A"
        DQ3_A = "DQ3_A"
        DQ4_A = "DQ4_A"
        DQ5_A = "DQ5_A"
        DQ6_A = "DQ6_A"
        DQ7_A = "DQ7_A"
        DQ8_A = "DQ8_A"
        DQ9_A = "DQ9_A"
        DQ10_A = "DQ10_A"
        DQ11_A = "DQ11_A"
        DQ12_A = "DQ12_A"
        DQ13_A = "DQ13_A"
        DQ14_A = "DQ14_A"
        DQ15_A = "DQ15_A"
        DQ16_A = "DQ16_A"
        DQ17_A = "DQ17_A"
        DQ18_A = "DQ18_A"
        DQ19_A = "DQ19_A"
        DQ20_A = "DQ20_A"
        DQ21_A = "DQ21_A"
        DQ22_A = "DQ22_A"
        DQ23_A = "DQ23_A"
        DQ24_A = "DQ24_A"
        DQ25_A = "DQ25_A"
        DQ26_A = "DQ26_A"
        DQ27_A = "DQ27_A"
        DQ28_A = "DQ28_A"
        DQ29_A = "DQ29_A"
        DQ30_A = "DQ30_A"
        DQ31_A = "DQ31_A"
        DQ0_B = "DQ0_B"
        DQ1_B = "DQ1_B"
        DQ2_B = "DQ2_B"
        DQ3_B = "DQ3_B"
        DQ4_B = "DQ4_B"
        DQ5_B = "DQ5_B"
        DQ6_B = "DQ6_B"
        DQ7_B = "DQ7_B"
        DQ8_B = "DQ8_B"
        DQ9_B = "DQ9_B"
        DQ10_B = "DQ10_B"
        DQ11_B = "DQ11_B"
        DQ12_B = "DQ12_B"
        DQ13_B = "DQ13_B"
        DQ14_B = "DQ14_B"
        DQ15_B = "DQ15_B"
        DQ16_B = "DQ16_B"
        DQ17_B = "DQ17_B"
        DQ18_B = "DQ18_B"
        DQ19_B = "DQ19_B"
        DQ20_B = "DQ20_B"
        DQ21_B = "DQ21_B"
        DQ22_B = "DQ22_B"
        DQ23_B = "DQ23_B"
        DQ24_B = "DQ24_B"
        DQ25_B = "DQ25_B"
        DQ26_B = "DQ26_B"
        DQ27_B = "DQ27_B"
        DQ28_B = "DQ28_B"
        DQ29_B = "DQ29_B"
        DQ30_B = "DQ30_B"
        DQ31_B = "DQ31_B"
        CA0_A = "CA0_A"
        CA1_A = "CA1_A"
        CA2_A = "CA2_A"
        CA3_A = "CA3_A"
        CA4_A = "CA4_A"
        CA5_A = "CA5_A"
        CA6_A = "CA6_A"
        CA0_B = "CA0_B"
        CA1_B = "CA1_B"
        CA2_B = "CA2_B"
        CA3_B = "CA3_B"
        CA4_B = "CA4_B"
        CA5_B = "CA5_B"
        CA6_B = "CA6_B"

    def getLane(self) -> Lane:
        """Get enum Loopback lane selection """
        return self.Lane(self.QueryResponse_enum(self.Lane, "Lane?\n"))

    def setLane(self, newvalue: Lane) :
        """Set enum Loopback lane selection """
        self.SendCommand("Lane " + newvalue.value + "\n")
        return None

    def getLoopbackStatus(self) -> str:
        """Get Loopback status """
        return self.QueryResponse("LoopbackStatus?\n")

    def getPdaEarlyClocking(self) -> bool:
        """Get PDA Enumerate before clocking (reqd for Micron loopback) """
        return self.QueryResponse_bool("PdaEarlyClocking?\n")

    def setPdaEarlyClocking(self, newvalue:bool) :
        """Set PDA Enumerate before clocking (reqd for Micron loopback) """
        self.SendCommand("PdaEarlyClocking " + ("T" if newvalue else "F") + "\n")
        return None

    class Phase(Enum):
        PhaseA = "PhaseA"
        PhaseB = "PhaseB"
        PhaseC = "PhaseC"
        PhaseD = "PhaseD"

    def getPhase(self) -> Phase:
        """Get enum Loopback phase selection """
        return self.Phase(self.QueryResponse_enum(self.Phase, "Phase?\n"))

    def setPhase(self, newvalue: Phase) :
        """Set enum Loopback phase selection """
        self.SendCommand("Phase " + newvalue.value + "\n")
        return None

    class Rank(Enum):
        R0 = "R0"
        R1 = "R1"

    def getRank(self) -> Rank:
        """Get enum SM Bus rank selection """
        return self.Rank(self.QueryResponse_enum(self.Rank, "Rank?\n"))

    def setRank(self, newvalue: Rank) :
        """Set enum SM Bus rank selection """
        self.SendCommand("Rank " + newvalue.value + "\n")
        return None

    class Speed(Enum):
        DDR5_3200 = "DDR5-3200"
        DDR5_3600 = "DDR5-3600"
        DDR5_4000 = "DDR5-4000"
        DDR5_4400 = "DDR5-4400"
        DDR5_4800 = "DDR5-4800"
        DDR5_5200 = "DDR5-5200"
        DDR5_5600 = "DDR5-5600"
        DDR5_6000 = "DDR5-6000"
        DDR5_6400 = "DDR5-6400"

    def getSpeed(self) -> Speed:
        """Get enum Loopback DDR module type and speed selection """
        return self.Speed(self.QueryResponse_enum(self.Speed, "Speed?\n"))

    def setSpeed(self, newvalue: Speed) :
        """Set enum Loopback DDR module type and speed selection """
        self.SendCommand("Speed " + newvalue.value + "\n")
        return None

    def FetchDevices(self):
        """Method for Fetch list of devices currently available. Todo: add arguments if needed"""
        print("BranchAccDDR:FetchDevices(), Todo: add arguments if needed")
        self.SendCommand("FetchDevices\n")
        return None

    def FetchLanes(self):
        """Method for Fetch list of lanes currently available. Todo: add arguments if needed"""
        print("BranchAccDDR:FetchLanes(), Todo: add arguments if needed")
        self.SendCommand("FetchLanes\n")
        return None

    def FetchPhases(self):
        """Method for Fetch list of phases currently available. Todo: add arguments if needed"""
        print("BranchAccDDR:FetchPhases(), Todo: add arguments if needed")
        self.SendCommand("FetchPhases\n")
        return None

    def Loopback(self):
        """Method for Start loopback (asynchronous). Todo: add arguments if needed"""
        print("BranchAccDDR:Loopback(), Todo: add arguments if needed")
        self.SendCommand("Loopback\n")
        return None

    def LoopbackCancel(self):
        """Method for Loopback cancel. Todo: add arguments if needed"""
        print("BranchAccDDR:LoopbackCancel(), Todo: add arguments if needed")
        self.SendCommand("LoopbackCancel\n")
        return None

    def PowerOn(self):
        """Method for Power-on MIC. Todo: add arguments if needed"""
        print("BranchAccDDR:PowerOn(), Todo: add arguments if needed")
        self.SendCommand("PowerOn\n")
        return None

    def ProgramPhase(self):
        """Method for Program Phase DRAM+RCD. Todo: add arguments if needed"""
        print("BranchAccDDR:ProgramPhase(), Todo: add arguments if needed")
        self.SendCommand("ProgramPhase\n")
        return None

# ================================ #


class BranchAcc(AutomationExtender):
    """BranchAcc class.  Accessory connector"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.DDR = BranchAccDDR(self, "DDR:")
        self.PUL = BranchAccPUL(self, "PUL:")

    def __del__(self):
        super().__del__()
        return None

    def getIsAttached(self) -> bool:
        """Get Probe is attached """
        return self.QueryResponse_bool("IsAttached?\n")

    class Type(Enum):
        _None = "None"
        DDR5 = "DDR5"
        Pulser = "Pulser"

    def getType(self) -> Type:
        """Get enum Accessory type """
        return self.Type(self.QueryResponse_enum(self.Type, "Type?\n"))

    def setType(self, newvalue: Type) :
        """Set enum Accessory type """
        self.SendCommand("Type " + newvalue.value + "\n")
        return None

# EOF

