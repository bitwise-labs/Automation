# autogenCommon.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================
import datetime

from pyBitwiseAutomation.AutomationInterface import AutomationInterface
from pyBitwiseAutomation.AutomationExtender import AutomationExtender
from enum import Enum


# ================================ #


class BranchConst(AutomationExtender):
    """BranchConst class.  Constants"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getOptions(self) -> str:
        """Get Option Code """
        return self.QueryResponse("Options?\n")

    def getSN(self) -> str:
        """Get Serial Number """
        return self.QueryResponse("SN?\n")


# ================================ #


class BranchApp(AutomationExtender):
    """BranchApp class.  Applications"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getList(self) -> str:
        """Get List of all applications """
        return self.QueryResponse("List?\n")

    def getRunActive(self) -> str:
        """Get List of active run objects """
        return self.QueryResponse("RunActive?\n")

    def getRunDurLimit(self) -> str:
        """Get Run Duration Limit """
        return self.QueryResponse("RunDurLimit?\n")

    def setRunDurLimit(self, newvalue: str):
        """Set Run Duration Limit """
        self.SendCommand("RunDurLimit " + "\"" + newvalue + "\"" + "\n")
        return None

    def getRunList(self) -> str:
        """Get List of all run objects """
        return self.QueryResponse("RunList?\n")

    def getRunState(self) -> str:
        """Get List of all run object states """
        return self.QueryResponse("RunState?\n")

    def getSequence(self) -> int:
        """Get Gui Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowNav(self) -> bool:
        """Get Show Navigation Toolbar """
        return self.QueryResponse_bool("ShowNav?\n")

    def setShowNav(self, newvalue: bool):
        """Set Show Navigation Toolbar """
        self.SendCommand("ShowNav " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowText(self) -> bool:
        """Get Show Text on GUI """
        return self.QueryResponse_bool("ShowText?\n")

    def setShowText(self, newvalue: bool):
        """Set Show Text on GUI """
        self.SendCommand("ShowText " + ("T" if newvalue else "F") + "\n")
        return None

    def getTab(self) -> str:
        """Get Application Tab """
        return self.QueryResponse("Tab?\n")

    def setTab(self, newvalue: str):
        """Set Application Tab """
        self.SendCommand("Tab " + "\"" + newvalue + "\"" + "\n")
        return None

    def Clear(self):
        """Method for Clear all applications."""
        self.SendCommand("Clear\n")
        return None

    def GuiReset(self):
        """Method for Gui Reset Tabs."""
        self.SendCommand("GuiReset\n")
        return None

    def Refresh(self):
        """Method for Gui Refresh."""
        self.SendCommand("Refresh\n")
        return None

    def Run(self, runOnceFlag: bool = False):
        """Method for Run all applications."""
        self.SendCommand("Run" + (" Once" if runOnceFlag else "") + "\n")
        return None

    def Stop(self):
        """Method for Stop all applications."""
        self.SendCommand("Stop\n")
        return None


# ================================ #


class BranchPatt(AutomationExtender):
    """BranchPatt class.  User Patterns"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getFile(self, index: int) -> str:
        """Get User pattern filename[] """
        return self.QueryResponse("File[" + str(index) + "]?\n")

    def getFolder(self) -> str:
        """Get Current folder """
        return self.QueryResponse("Folder?\n")

    def setFolder(self, newvalue: str):
        """Set Current folder """
        self.SendCommand("Folder " + "\"" + newvalue + "\"" + "\n")
        return None

    class GuiCh(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Dual = "Dual"

    def getGuiCh(self) -> GuiCh:
        """Get enum Gui channel """
        return self.GuiCh(self.QueryResponse_enum(self.GuiCh, "GuiCh?\n"))

    def setGuiCh(self, newvalue: GuiCh):
        """Set enum Gui channel """
        self.SendCommand("GuiCh " + newvalue.value + "\n")
        return None

    class GuiFormat(Enum):
        Hex = "Hex"
        Decimal = "Decimal"
        Octal = "Octal"
        Binary = "Binary"

    def getGuiFormat(self) -> GuiFormat:
        """Get enum Gui number format """
        return self.GuiFormat(self.QueryResponse_enum(self.GuiFormat, "GuiFormat?\n"))

    def setGuiFormat(self, newvalue: GuiFormat):
        """Set enum Gui number format """
        self.SendCommand("GuiFormat " + newvalue.value + "\n")
        return None

    def getGuiSymbols(self) -> int:
        """Get Gui number of symbols """
        return self.QueryResponse_int("GuiSymbols?\n")

    def setGuiSymbols(self, newvalue: int):
        """Set Gui number of symbols """
        self.SendCommand("GuiSymbols " + str(newvalue) + "\n")
        return None

    def getGuiSymbolSize(self) -> int:
        """Get Gui bits per symbol """
        return self.QueryResponse_int("GuiSymbolSize?\n")

    def setGuiSymbolSize(self, newvalue: int):
        """Set Gui bits per symbol """
        self.SendCommand("GuiSymbolSize " + str(newvalue) + "\n")
        return None

    class GuiType(Enum):
        All = "All"
        Pattern = "Pattern"
        Playlist = "Playlist"

    def getGuiType(self) -> GuiType:
        """Get enum Gui file type """
        return self.GuiType(self.QueryResponse_enum(self.GuiType, "GuiType?\n"))

    def setGuiType(self, newvalue: GuiType):
        """Set enum Gui file type """
        self.SendCommand("GuiType " + newvalue.value + "\n")
        return None

    def getRestoreBitShift(self, index: int) -> int:
        """Get Restore bit shift[] """
        return self.QueryResponse_int("RestoreBitShift[" + str(index) + "]?\n")

    def setRestoreBitShift(self, index: int, newvalue: int):
        """Set Restore bit shift[] """
        self.SendCommand("RestoreBitShift[" + str(index) + "] " + str(newvalue) + "\n")
        return None

    def getRestoreFile(self, index: int) -> str:
        """Get Restore user pattern files[] """
        return self.QueryResponse("RestoreFile[" + str(index) + "]?\n")

    def setRestoreFile(self, index: int, newvalue: str):
        """Set Restore user pattern files[] """
        self.SendCommand("RestoreFile[" + str(index) + "] " + "\"" + newvalue + "\"" + "\n")
        return None

    def getRootFolder(self) -> str:
        """Get User Patterns root folder """
        return self.QueryResponse("RootFolder?\n")

    def getStatusMsg(self) -> str:
        """Get Status message """
        return self.QueryResponse("StatusMsg?\n")

    def getVerifyMsg(self) -> str:
        """Get Verify message """
        return self.QueryResponse("VerifyMsg?\n")

    def ClearStatusMsg(self):
        """Method for Clear status message. """
        self.SendCommand("ClearStatusMsg\n")
        return None

    def ClearVerifyMsg(self):
        """Method for Clear verify message."""
        self.SendCommand("ClearVerifyMsg\n")
        return None

    def Copy(self, fromPath: str, toPath: str):
        """Method for File copy."""
        self.SendCommand("Copy \"" + fromPath + "\" \"" + toPath + "\"\n")
        return None

    def Delete(self, filePath: str):
        """Method for File delete. """
        self.SendCommand("Delete \"" + filePath + "\"\n")
        return None

    class PatternChannel(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Dual = "Dual"

    def Deploy(self, ch: PatternChannel, filename: str, bitShift: int = 0):
        """Method for Deploy pattern"""

        self.SendCommand("Deploy " + ch.value + " " + str(bitShift) + " \"" + filename + "\"\n")
        return None

    def Fetch(self, filePath: str) -> bytes:
        """Binary response method for Fetch file."""

        return self.QueryBinaryResponse("Fetch \"" + filePath + "\"\n")

    def FetchDir(self, pathName: str, optionalType: GuiType = GuiType.All) -> str:
        """Binary string response method for Fetch directory. """
        return str(self.QueryBinaryResponse("FetchDir \"" + pathName + "\" " + str(optionalType) + "\n"),
                   encoding='utf-8')

    def Grab(self, ch: PatternChannel, symSize: int, fmt: GuiFormat, filePath: str):
        """Method for Grab pattern. """
        print("BranchPatt:Grab()")
        self.SendCommand("Grab " + str(ch) + " " + str(symSize) + " " + str(fmt) + "\"" + filePath + "\"\n")
        return None

    def NewFolder(self, folderPath: str):
        """Method for New folder. """
        self.SendCommand("NewFolder \"" + folderPath + "\"\n")
        return None

    def Rename(self, fromPath: str, toName: str):
        """Method for File rename."""
        self.SendCommand("Rename \"" + fromPath + "\" \"" + toName + "\"\n")
        return None

    def Save(self, filePath: str):
        """Method for File save."""
        self.SendCommand("Save \"" + filePath + "\"\n")
        return None

    def Verify(self, filePath: str):
        """Method for Verify file."""
        self.SendCommand("Verify \"" + filePath + "\"\n")
        return None


# ================================ #


class BranchSys(AutomationExtender):
    """BranchSys class.  System"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBuild(self) -> str:
        """Get Software Build """
        return self.QueryResponse("Build?\n")

    def getCheckDNS(self) -> str:
        """Get DNS Check of bitwiselaboratories.com """
        return self.QueryResponse("CheckDNS?\n")

    def getCompile(self) -> str:
        """Get Compile type """
        return self.QueryResponse("Compile?\n")

    def getGateway(self) -> str:
        """Get Gateway """
        return self.QueryResponse("Gateway?\n")

    def getHostname(self) -> str:
        """Get Hostname """
        return self.QueryResponse("Hostname?\n")

    def getIP(self) -> str:
        """Get IP Address """
        return self.QueryResponse("IP?\n")

    def getNickname(self) -> str:
        """Get System nickname """
        return self.QueryResponse("Nickname?\n")

    def setNickname(self, newvalue: str):
        """Set System nickname """
        self.SendCommand("Nickname " + "\"" + newvalue + "\"" + "\n")
        return None

    def getPmuTempC(self) -> float:
        """Get PMU Temperature """
        return self.QueryResponse_float("PmuTemp?\n")

    def getProtoVer(self) -> str:
        """Get Protocol Version """
        return self.QueryResponse("ProtoVer?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue: bool):
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getUsers(self) -> int:
        """Get Number of users """
        return self.QueryResponse_int("Users?\n")


# ================================ #

class BranchSyn(AutomationExtender):
    """BranchSyn class.  Clock source control"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getClockRateGHz(self) -> float:
        """Get Internal clock rate """
        return self.QueryResponse_float("ClockRate?\n")

    def setClockRateGHz(self, newvalue: float):
        """Set Internal clock rate """
        self.SendCommand("ClockRate " + str(newvalue) + "\n")
        return None

    def getDataRateGbps(self) -> float:
        """Get Doubled clock rate """
        return self.QueryResponse_float("DataRate?\n")

    def setDataRateGbps(self, newvalue: float):
        """Set Doubled clock rate """
        self.SendCommand("DataRate " + str(newvalue) + "\n")

        return None

    class Dest(Enum):
        Ch0 = "Ch0"
        Ch1 = "Ch1"
        Calib = "Calib"
        Output = "Output"

    def getDest(self, index: int) -> Dest:
        """Get enum Clock Destinations[] """
        return self.Dest(self.QueryResponse_enum(self.Dest, "Dest[" + str(index) + "]?\n"))

    def setDest(self, index: int, newvalue: Dest):
        """Set enum Clock Destinations[] """
        self.SendCommand("Dest[" + str(index) + "] " + newvalue.value + "\n")
        return None

    class DivCalib(Enum):
        Div2 = "Div2"
        Div4 = "Div4"
        Div8 = "Div8"
        Div16 = "Div16"

    def getDivCalib(self) -> DivCalib:
        """Get enum Output clock divider """
        return self.DivCalib(self.QueryResponse_enum(self.DivCalib, "DivCalib?\n"))

    def setDivCalib(self, newvalue: DivCalib):
        """Set enum Output clock divider """
        self.SendCommand("DivCalib " + newvalue.value + "\n")
        return None

    class DivOutput(Enum):
        Div2 = "Div2"
        Div4 = "Div4"
        Div8 = "Div8"
        Div16 = "Div16"

    def getDivOutput(self) -> DivOutput:
        """Get enum Output clock divider """
        return self.DivOutput(self.QueryResponse_enum(self.DivOutput, "DivOutput?\n"))

    def setDivOutput(self, newvalue: DivOutput):
        """Set enum Output clock divider """
        self.SendCommand("DivOutput " + newvalue.value + "\n")
        return None

    def getHwVersion(self) -> int:
        """Get Hardware version """
        return self.QueryResponse_int("HwVersion?\n")

    class Led(Enum):
        Auto = "Auto"
        Green = "Green"
        Red = "Red"
        Off = "Off"

    def getLed(self, index: int) -> Led:
        """Get enum LED State[] """
        return self.Led(self.QueryResponse_enum(self.Led, "Led[" + str(index) + "]?\n"))

    def setLed(self, index: int, newvalue: Led):
        """Set enum LED State[] """
        self.SendCommand("Led[" + str(index) + "] " + newvalue.value + "\n")
        return None

    def getLockDetect(self) -> bool:
        """Get Synthesizer Lock detected """
        return self.QueryResponse_bool("LockDetect?\n")

    def getOpRateGHz(self) -> float:
        """Get Operating clock rate, -1 means not set """
        return self.QueryResponse_float("OpRate?\n")

    def setOpRateGHz(self, newvalue: float):
        """Set Operating clock rate, -1 means not set """
        self.SendCommand("OpRate " + str(newvalue) + "\n")
        return None

    class RefSource(Enum):
        IntRef = "IntRef"
        ExtRef = "ExtRef"

    def getRefSource(self) -> RefSource:
        """Get enum 100 MHz Reference Source setting """
        return self.RefSource(self.QueryResponse_enum(self.RefSource, "RefSource?\n"))

    def setRefSource(self, newvalue: RefSource):
        """Set enum 100 MHz Reference Source setting """
        self.SendCommand("RefSource " + newvalue.value + "\n")
        return None

    class Source(Enum):
        Internal = "Internal"
        ExtA = "ExtA"
        ExtB = "ExtB"

    def getSource(self, index: int) -> Source:
        """Get enum Clock Sources[] """
        return self.Source(self.QueryResponse_enum(self.Source, "Source[" + str(index) + "]?\n"))

    def setSource(self, index: int, newvalue: Source):
        """Set enum Clock Sources[] """
        self.SendCommand("Source[" + str(index) + "] " + newvalue.value + "\n")
        return None

    def Map(self, clockSource: Source, clockDest: Dest):
        """Method for Map clock source to destination(s). """
        self.SendCommand("Map " + str(clockSource) + " " + str(clockDest) + "\n")
        return None


# ================================ #


class BranchFile(AutomationExtender):
    """BranchFile class.  File System Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getDir(self) -> str:
        """Get Current Directory """
        return self.QueryResponse("Dir?\n")

    def setDir(self, newvalue: str):
        """Set Current Directory """
        self.SendCommand("Dir " + "\"" + newvalue + "\"" + "\n")
        return None

    def Checksum(self, filepath: str) -> str:
        """Response method for Checksum File."""
        return self.QueryResponse("Checksum " + "\"" + filepath + "\"" + "\n")

    def Copy(self, frompath: str, topath: str):
        """Method for Copy File."""
        self.SendCommand("Copy " + "\"" + frompath + "\"" + " " + "\"" + topath + "\"" + "\n")
        return None

    def Del(self, filepath: str):
        """Method for Delete File."""
        self.SendCommand("Del " + "\"" + filepath + "\"" + "\n")
        return None

    def Exists(self, filepath: str) -> str:
        """Response method for File Exists."""
        return self.QueryResponse("Exists " + "\"" + filepath + "\"" + "\n")

    def Fetch(self, filepath: str) -> bytes:
        """Binary response method for Fetch File."""
        return self.QueryBinaryResponse("Fetch " + "\"" + filepath + "\"" + "\n")

    def Length(self, filepath: str):
        """Method for File Length. """
        self.SendCommand("Length " + "\"" + filepath + "\"" + "\n")
        return None

    def List(self, dirpath: str, otheroptions: str = "") -> str:
        """Binary string response method for List Directory."""
        return str(self.QueryBinaryResponse("List " + "\"" + dirpath + "\" " + otheroptions + "\n"), encoding='utf-8')

    def Rename(self, frompath: str, topath: str):
        """Method for Rename File."""
        self.SendCommand("Rename " + "\"" + frompath + "\"" + " " + "\"" + topath + "\"" + "\n")
        return None

# EOF
