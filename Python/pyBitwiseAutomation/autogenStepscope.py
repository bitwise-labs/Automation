# autogenStepscope.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation.SocketDevice import *
from pyBitwiseAutomation.autogenCommon import *
from enum import Enum

# ================================ #

class BranchCalib(AutomationExtender):
    """BranchCalib class.  Calibration features"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getDelayFile(self) -> str:
        """Get Delay table file """
        return self.QueryResponse("DelayFile?\n")

    def getNoiseFile(self) -> str:
        """Get Noise table file """
        return self.QueryResponse("NoiseFile?\n")

    class Status(Enum):
        Ready = "Ready"
        Error = "Error"
        Success = "Success"
        Running = "Running"
        Canceled = "Canceled"

    def getStatus(self) -> Status:
        """Get enum Calibration Status """
        return self.Status(self.QueryResponse_enum(self.Status, "Status?\n"))

    def Cancel(self):
        """Method for Cancel calibration."""
        self.SendCommand("Cancel\n")
        return None

    def RunDelay(self):
        """Method for Run Delay calibration."""
        self.SendCommand("RunDelay")
        return None

    def RunNoise(self):
        """Method for Run Delay calibration."""
        self.SendCommand("RunNoise")
        return None


class BranchPulse(AutomationExtender):
    """BranchPulse class.  Pulser Access"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAccAmplMV(self) -> float:
        """Get Accessory pulser amplitude """
        return self.QueryResponse_float("AccAmpl?\n")

    def setAccAmplMV(self, newvalue: float):
        """Set Accessory pulser amplitude """
        self.SendCommand("AccAmpl " + str(newvalue) + "\n")
        return None

    class AccWidth(Enum):
        _1 = "1"
        _2 = "2"
        _4 = "4"
        _8 = "8"
        _16 = "16"

    def getAccWidth(self) -> AccWidth:
        """Get enum Accessory pulser width selection """
        return self.AccWidth(self.QueryResponse_enum(self.AccWidth, "AccWidth?\n"))

    def setAccWidth(self, newvalue: AccWidth):
        """Set enum Accessory pulser width selection """
        self.SendCommand("AccWidth " + newvalue.value + "\n")
        return None

    def getAmplMV(self) -> float:
        """Get Local Pulser amplitude """
        return self.QueryResponse_float("Ampl?\n")

    def setAmplMV(self, newvalue: float):
        """Set Local Pulser amplitude """
        self.SendCommand("Ampl " + str(newvalue) + "\n")
        return None

    def getFreqMHz(self) -> float:
        """Get Pulser frequency """
        return self.QueryResponse_float("Freq?\n")

    def getLength(self) -> int:
        """Get Pulser length, sets period to 2X """
        return self.QueryResponse_int("Length?\n")

    def setLength(self, newvalue: int):
        """Set Pulser length, sets period to 2X """
        self.SendCommand("Length " + str(newvalue) + "\n")
        return None

    class Mode(Enum):
        Off = "Off"
        Local = "Local"
        Remote = "Remote"
        Triggered = "Triggered"
        Accessory = "Accessory"

    def getMode(self) -> Mode:
        """Get enum Pulser mode """
        return self.Mode(self.QueryResponse_enum(self.Mode, "Mode?\n"))

    def setMode(self, newvalue: Mode):
        """Set enum Pulser mode """
        self.SendCommand("Mode " + newvalue.value + "\n")
        return None

    def getResetDac(self) -> int:
        """Get Delay Dac value during pulser reset """
        return self.QueryResponse_int("ResetDac?\n")

    def setResetDac(self, newvalue: int):
        """Set Delay Dac value during pulser reset """
        self.SendCommand("ResetDac " + str(newvalue) + "\n")
        return None

    def getSlaveAmplMV(self) -> float:
        """Get Slave pulser amplitude """
        return self.QueryResponse_float("SlaveAmpl?\n")

    def setSlaveAmplMV(self, newvalue: float):
        """Set Slave pulser amplitude """
        self.SendCommand("SlaveAmpl " + str(newvalue) + "\n")
        return None

    def getSlaveIP(self) -> str:
        """Get Pulser Slave IP address """
        return self.QueryResponse("SlaveIP?\n")

    def setSlaveIP(self, newvalue: str):
        """Set Pulser Slave IP address """
        self.SendCommand("SlaveIP " + "\"" + newvalue + "\"" + "\n")
        return None

    def Reset(self):
        """Method for Pulser reset."""
        self.SendCommand("Reset\n")
        return None


class BranchS11Cfg(AutomationExtender):
    """BranchS11Cfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getApplySmooth(self) -> bool:
        """Get Apply FFT Smoothing """
        return self.QueryResponse_bool("ApplySmooth?\n")

    def setApplySmooth(self, newvalue:bool) :
        """Set Apply FFT Smoothing """
        self.SendCommand("ApplySmooth " + ("T" if newvalue else "F") + "\n")
        return None

    def getAvg(self) -> int:
        """Get Averages """
        return self.QueryResponse_int("Avg?\n")

    def setAvg(self, newvalue:int) :
        """Set Averages """
        self.SendCommand("Avg " + str(newvalue) + "\n")
        return None

    class FileFormat(Enum):
        CSV = "CSV"
        S1P_RI = "S1P_RI"
        S1P_DB = "S1P_DB"

    def getFileFormat(self) -> FileFormat:
        """Get enum File Format """
        return self.FileFormat(self.QueryResponse_enum(self.FileFormat, "FileFormat?\n"))

    def setFileFormat(self, newvalue: FileFormat) :
        """Set enum File Format """
        self.SendCommand("FileFormat " + newvalue.value + "\n")
        return None

    def getOffsetGHz(self) -> float:
        """Get Record Offset """
        return self.QueryResponse_float("Offset?\n")

    def getPersist(self) -> int:
        """Get Persistence """
        return self.QueryResponse_int("Persist?\n")

    def setPersist(self, newvalue:int) :
        """Set Persistence """
        self.SendCommand("Persist " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getShowIncident(self) -> bool:
        """Get Show Incident trace """
        return self.QueryResponse_bool("ShowIncident?\n")

    def setShowIncident(self, newvalue:bool) :
        """Set Show Incident trace """
        self.SendCommand("ShowIncident " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowReflected(self) -> bool:
        """Get Show Reflected trace """
        return self.QueryResponse_bool("ShowReflected?\n")

    def setShowReflected(self, newvalue:bool) :
        """Set Show Reflected trace """
        self.SendCommand("ShowReflected " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowS11(self) -> bool:
        """Get Show S11 trace """
        return self.QueryResponse_bool("ShowS11?\n")

    def setShowS11(self, newvalue:bool) :
        """Set Show S11 trace """
        self.SendCommand("ShowS11 " + ("T" if newvalue else "F") + "\n")
        return None

    def getSmoothWidth(self) -> int:
        """Get FFT Smoothing width """
        return self.QueryResponse_int("SmoothWidth?\n")

    def setSmoothWidth(self, newvalue:int) :
        """Set FFT Smoothing width """
        self.SendCommand("SmoothWidth " + str(newvalue) + "\n")
        return None

    def getSpanGHz(self) -> float:
        """Get Record Span """
        return self.QueryResponse_float("Span?\n")

# ================================ #

class BranchS11Chart(AutomationExtender):
    """BranchS11Chart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class AxisX(Enum):
        Linear = "Linear"
        Log = "Log"

    def getAxisX(self) -> AxisX:
        """Get enum X-Axis type """
        return self.AxisX(self.QueryResponse_enum(self.AxisX, "AxisX?\n"))

    def setAxisX(self, newvalue: AxisX) :
        """Set enum X-Axis type """
        self.SendCommand("AxisX " + newvalue.value + "\n")
        return None

    def getBottomDB(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomDB(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    class Cursor1(Enum):
        Manual = "Manual"
        AutoYS11 = "AutoYS11"
        AutoYIncident = "AutoYIncident"
        AutoYReflected = "AutoYReflected"
        AutoXS11 = "AutoXS11"
        AutoXIncident = "AutoXIncident"
        AutoXReflected = "AutoXReflected"

    def getCursor1(self) -> Cursor1:
        """Get enum Cursor 1 Mode """
        return self.Cursor1(self.QueryResponse_enum(self.Cursor1, "Cursor1?\n"))

    def setCursor1(self, newvalue: Cursor1) :
        """Set enum Cursor 1 Mode """
        self.SendCommand("Cursor1 " + newvalue.value + "\n")
        return None

    class Cursor2(Enum):
        Manual = "Manual"
        AutoYS11 = "AutoYS11"
        AutoYIncident = "AutoYIncident"
        AutoYReflected = "AutoYReflected"
        AutoXS11 = "AutoXS11"
        AutoXIncident = "AutoXIncident"
        AutoXReflected = "AutoXReflected"

    def getCursor2(self) -> Cursor2:
        """Get enum Cursor 2 Mode """
        return self.Cursor2(self.QueryResponse_enum(self.Cursor2, "Cursor2?\n"))

    def setCursor2(self, newvalue: Cursor2) :
        """Set enum Cursor 2 Mode """
        self.SendCommand("Cursor2 " + newvalue.value + "\n")
        return None

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightDB(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightDB(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftGHz(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftGHz(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthGHz(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthGHz(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchS11(AutomationExtender):
    """BranchS11 class.  S11 Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchS11Cfg(self,"Cfg:")
        self.Chart = BranchS11Chart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getBinaryIncident(self) -> list:
        """Get binary Binary Incident Results """
        return self.QueryBinaryResponse_float( "BinaryIncident?\n")

    def getBinaryMagn(self) -> list:
        """Get binary Binary Magnitude Results """
        return self.QueryBinaryResponse_float( "BinaryMagn?\n")

    def getBinaryReflected(self) -> list:
        """Get binary Binary Reflected Results """
        return self.QueryBinaryResponse_float( "BinaryReflected?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Status Message """
        return self.QueryResponse("StatusMsg?\n")

    def FileSave(self, optFilename: str = "") -> str:
        """Response method for S11 file save. """
        return self.QueryResponse("FileSave\n" if optFilename == "" else 'FileSave "'+optFilename+'"\n')

    def Fit(self):
        """Method for S11 Chart Fit. """
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position."""
        self.SendCommand("Reset\n")
        return None

# ================================ #

class BranchS21Cfg(AutomationExtender):
    """BranchS21Cfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getApplySmooth(self) -> bool:
        """Get Apply FFT Smoothing """
        return self.QueryResponse_bool("ApplySmooth?\n")

    def setApplySmooth(self, newvalue:bool) :
        """Set Apply FFT Smoothing """
        self.SendCommand("ApplySmooth " + ("T" if newvalue else "F") + "\n")
        return None

    def getAvg(self) -> int:
        """Get Averages """
        return self.QueryResponse_int("Avg?\n")

    def setAvg(self, newvalue:int) :
        """Set Averages """
        self.SendCommand("Avg " + str(newvalue) + "\n")
        return None

    class FileFormat(Enum):
        CSV = "CSV"
        S1P_RI = "S1P_RI"
        S1P_DB = "S1P_DB"

    def getFileFormat(self) -> FileFormat:
        """Get enum File Format """
        return self.FileFormat(self.QueryResponse_enum(self.FileFormat, "FileFormat?\n"))

    def setFileFormat(self, newvalue: FileFormat) :
        """Set enum File Format """
        self.SendCommand("FileFormat " + newvalue.value + "\n")
        return None

    def getOffsetGHz(self) -> float:
        """Get Record Offset """
        return self.QueryResponse_float("Offset?\n")

    def getPersist(self) -> int:
        """Get Persistence """
        return self.QueryResponse_int("Persist?\n")

    def setPersist(self, newvalue:int) :
        """Set Persistence """
        self.SendCommand("Persist " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getShowDut(self) -> bool:
        """Get Show DUT trace """
        return self.QueryResponse_bool("ShowDut?\n")

    def setShowDut(self, newvalue:bool) :
        """Set Show DUT trace """
        self.SendCommand("ShowDut " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowS21(self) -> bool:
        """Get Show S21 Trace """
        return self.QueryResponse_bool("ShowS21?\n")

    def setShowS21(self, newvalue:bool) :
        """Set Show S21 Trace """
        self.SendCommand("ShowS21 " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowThrough(self) -> bool:
        """Get Show Through trace """
        return self.QueryResponse_bool("ShowThrough?\n")

    def setShowThrough(self, newvalue:bool) :
        """Set Show Through trace """
        self.SendCommand("ShowThrough " + ("T" if newvalue else "F") + "\n")
        return None

    def getSmoothWidth(self) -> int:
        """Get FFT Smoothing width """
        return self.QueryResponse_int("SmoothWidth?\n")

    def setSmoothWidth(self, newvalue:int) :
        """Set FFT Smoothing width """
        self.SendCommand("SmoothWidth " + str(newvalue) + "\n")
        return None

    def getSpanGHz(self) -> float:
        """Get Record Span """
        return self.QueryResponse_float("Span?\n")

# ================================ #

class BranchS21Chart(AutomationExtender):
    """BranchS21Chart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    class AxisX(Enum):
        Linear = "Linear"
        Log = "Log"

    def getAxisX(self) -> AxisX:
        """Get enum X-Axis type """
        return self.AxisX(self.QueryResponse_enum(self.AxisX, "AxisX?\n"))

    def setAxisX(self, newvalue: AxisX) :
        """Set enum X-Axis type """
        self.SendCommand("AxisX " + newvalue.value + "\n")
        return None

    def getBottomDB(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomDB(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    class Cursor1(Enum):
        Manual = "Manual"
        AutoYS21 = "AutoYS21"
        AutoYDut = "AutoYDut"
        AutoYThrough = "AutoYThrough"
        AutoXS21 = "AutoXS21"
        AutoXDut = "AutoXDut"
        AutoXThrough = "AutoXThrough"

    def getCursor1(self) -> Cursor1:
        """Get enum Cursor 1 Mode """
        return self.Cursor1(self.QueryResponse_enum(self.Cursor1, "Cursor1?\n"))

    def setCursor1(self, newvalue: Cursor1) :
        """Set enum Cursor 1 Mode """
        self.SendCommand("Cursor1 " + newvalue.value + "\n")
        return None

    class Cursor2(Enum):
        Manual = "Manual"
        AutoYS21 = "AutoYS21"
        AutoYDut = "AutoYDut"
        AutoYThrough = "AutoYThrough"
        AutoXS21 = "AutoXS21"
        AutoXDut = "AutoXDut"
        AutoXThrough = "AutoXThrough"

    def getCursor2(self) -> Cursor2:
        """Get enum Cursor 2 Mode """
        return self.Cursor2(self.QueryResponse_enum(self.Cursor2, "Cursor2?\n"))

    def setCursor2(self, newvalue: Cursor2) :
        """Set enum Cursor 2 Mode """
        self.SendCommand("Cursor2 " + newvalue.value + "\n")
        return None

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightDB(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightDB(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftGHz(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftGHz(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthGHz(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthGHz(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchS21(AutomationExtender):
    """BranchS21 class.  S21 Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg=BranchS21Cfg(self,"Cfg:")
        self.Chart=BranchS21Chart(self,"Chart:")


    def __del__(self):
        super().__del__()
        return None

    def getBinaryDut(self) -> list:
        """Get binary Binary Dut Results """
        return self.QueryBinaryResponse_float( "BinaryDut?\n")

    def getBinaryMagn(self) -> list:
        """Get binary Binary Magnitude Results """
        return self.QueryBinaryResponse_float( "BinaryMagn?\n")

    def getBinaryThrough(self) -> list:
        """Get binary Binary Through Results """
        return self.QueryBinaryResponse_float( "BinaryThrough?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Status Message """
        return self.QueryResponse("StatusMsg?\n")

    def FileSave(self, optFilename: str = "") -> str:
        """Response method for S21 file save. """
        return self.QueryResponse("FileSave\n" if optFilename == "" else 'FileSave "'+optFilename+'"\n')

    def Fit(self):
        """Method for S21 Chart Fit. """
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position."""
        self.SendCommand("Reset\n")
        return None

# ================================ #

class BranchStepCfg(AutomationExtender):
    """BranchStepCfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAutoRefresh(self) -> bool:
        """Get Automatic refresh """
        return self.QueryResponse_bool("AutoRefresh?\n")

    def setAutoRefresh(self, newvalue:bool) :
        """Set Automatic refresh """
        self.SendCommand("AutoRefresh " + ("T" if newvalue else "F") + "\n")
        return None

    def getAvg(self) -> int:
        """Get Averages """
        return self.QueryResponse_int("Avg?\n")

    def setAvg(self, newvalue:int) :
        """Set Averages """
        self.SendCommand("Avg " + str(newvalue) + "\n")
        return None

    def getBWGHz(self) -> float:
        """Get BW Limit GHz """
        return self.QueryResponse_float("BW?\n")

    def setBWGHz(self, newvalue:float) :
        """Set BW Limit GHz """
        self.SendCommand("BW " + str(newvalue) + "\n")
        return None

    def getDepth(self) -> int:
        """Get Sample Depth """
        return self.QueryResponse_int("Depth?\n")

    def setDepth(self, newvalue:int) :
        """Set Sample Depth """
        self.SendCommand("Depth " + str(newvalue) + "\n")
        return None

    class DSPMode(Enum):
        Off = "Off"
        Differential = "Differential"
        SEPositive = "SEPositive"
        SENegative = "SENegative"

    def getDSPMode(self) -> DSPMode:
        """Get enum DSP processing mode """
        return self.DSPMode(self.QueryResponse_enum(self.DSPMode, "DSPMode?\n"))

    def setDSPMode(self, newvalue: DSPMode) :
        """Set enum DSP processing mode """
        self.SendCommand("DSPMode " + newvalue.value + "\n")
        return None

    class NoiseMode(Enum):
        Off = "Off"
        Normal = "Normal"
        Double = "Double"

    def getNoiseMode(self) -> NoiseMode:
        """Get enum Noise Mode """
        return self.NoiseMode(self.QueryResponse_enum(self.NoiseMode, "NoiseMode?\n"))

    def setNoiseMode(self, newvalue: NoiseMode) :
        """Set enum Noise Mode """
        self.SendCommand("NoiseMode " + newvalue.value + "\n")
        return None

    def getOffsetPS(self) -> float:
        """Get Record Offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffsetPS(self, newvalue:float) :
        """Set Record Offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getSpanPS(self) -> float:
        """Get Record Span """
        return self.QueryResponse_float("Span?\n")

    def setSpanPS(self, newvalue:float) :
        """Set Record Span """
        self.SendCommand("Span " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchStepChart(AutomationExtender):
    """BranchStepChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    class Cursor1(Enum):
        Manual = "Manual"
        AutoY = "AutoY"
        AutoX = "AutoX"

    def getCursor1(self) -> Cursor1:
        """Get enum Cursor 1 Mode """
        return self.Cursor1(self.QueryResponse_enum(self.Cursor1, "Cursor1?\n"))

    def setCursor1(self, newvalue: Cursor1) :
        """Set enum Cursor 1 Mode """
        self.SendCommand("Cursor1 " + newvalue.value + "\n")
        return None

    class Cursor2(Enum):
        Manual = "Manual"
        AutoY = "AutoY"
        AutoX = "AutoX"

    def getCursor2(self) -> Cursor2:
        """Get enum Cursor 2 Mode """
        return self.Cursor2(self.QueryResponse_enum(self.Cursor2, "Cursor2?\n"))

    def setCursor2(self, newvalue: Cursor2) :
        """Set enum Cursor 2 Mode """
        self.SendCommand("Cursor2 " + newvalue.value + "\n")
        return None

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchStep(AutomationExtender):
    """BranchStep class.  Step Response Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchStepCfg(self,"Cfg:")
        self.Chart = BranchStepChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> list:
        """Get binary Binary Data """
        return self.QueryBinaryResponse_float("Binary?\n")

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowSettings(self) -> bool:
        """Get Show settings on gui """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show settings on gui """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Status Message """
        return self.QueryResponse("StatusMsg?\n")

    def getTimeFallPS(self) -> float:
        """Get Time of falling edge """
        return self.QueryResponse_float("TimeFall?\n")

    def getTimeRisePS(self) -> float:
        """Get Time of rising edge """
        return self.QueryResponse_float("TimeRise?\n")

    class AlignMode(Enum):
        alignNone = "None"
        align0101 = "0101"
        align0111 = "0111"
        align0110 = "0110"
        align0011 = "0011"
        align0000 = "0000"
        align1010 = "1010"
        align1000 = "1000"
        align1001 = "1001"
        align1100 = "1100"
        align1111 = "1111"
        CalNoiseLow = "CalNoiseLow"
        CalNoiseHigh = "CalNoiseHigh"
        CalRefLow = "CalRefLow"
        CalRefHigh = "CalRefHigh"
        FallingEdge = "FallingEdge"
        RisingEdge = "RisingEdge"

    def WaitForAlignmentToComplete(self, timeoutSec:float = 15.0):
        """Wait for alignment operation to complete. """

        now = SocketDevice.timestamp()
        begin_time = now
        timeout = now + timeoutSec

        while now < timeout:
            time.sleep(0.2)
            now = SocketDevice.timestamp()
            if self.getDebugging():
                print("Aligning "+ "{:.1f}".format(now - begin_time))

            if not self.getRunning() == BranchStep.Running.Stop:
                break

        if now >= timeout:
            raise Exception("[Timeout_During_Alignment]")

        return None

    def Align(self, mode: AlignMode, waitToComplete: bool = True, waitUntilAligningTimeout: float = 10.0):
        """Method for Step Align."""
        self.SendCommand("Align " + mode.value + "\n")

        now = SocketDevice.timestamp()
        begin_time = now
        timeout = now + waitUntilAligningTimeout

        while now < timeout:
            time.sleep(0.1)
            now = SocketDevice.timestamp()
            if self.getDebugging():
                print("Begin Aligning "+ "{:.1f}".format(now - begin_time))

            if not self.getRunning() == BranchStep.Running.Stop:
                break

        if now >= timeout:
            raise Exception("[Timeout_During_Alignment]")

        if waitToComplete:
            self.WaitForAlignmentToComplete()

        return None

    def Csv(self, optFilename: str = "") -> str:
        """Response method for Step Csv. """
        return self.QueryResponse("Csv\n" if optFilename == "" else 'Csv "'+optFilename+'"\n')

    def Fit(self):
        """Method for Step Chart Fit.  """
        self.SendCommand("Fit\n")
        return None

    def PulseStats(self) -> str:
        """Binary string response method for Pulse statistics. """
        return str(self.QueryBinaryResponse("PulseStats\n"), encoding='utf-8')

# ================================ #


class BranchTdrCfg(AutomationExtender):
    """BranchTdrCfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAutoRefresh(self) -> bool:
        """Get Automatic refresh """
        return self.QueryResponse_bool("AutoRefresh?\n")

    def setAutoRefresh(self, newvalue:bool) :
        """Set Automatic refresh """
        self.SendCommand("AutoRefresh " + ("T" if newvalue else "F") + "\n")
        return None

    def getAvg(self) -> int:
        """Get Avergages """
        return self.QueryResponse_int("Avg?\n")

    def setAvg(self, newvalue:int) :
        """Set Avergages """
        self.SendCommand("Avg " + str(newvalue) + "\n")
        return None

    def getBWGHz(self) -> float:
        """Get BW Limit GHz """
        return self.QueryResponse_float("BW?\n")

    def setBWGHz(self, newvalue:float) :
        """Set BW Limit GHz """
        self.SendCommand("BW " + str(newvalue) + "\n")
        return None

    def getCalAvg(self) -> int:
        """Get Calibration averages """
        return self.QueryResponse_int("CalAvg?\n")

    def setCalAvg(self, newvalue:int) :
        """Set Calibration averages """
        self.SendCommand("CalAvg " + str(newvalue) + "\n")
        return None

    def getCalDepth(self) -> int:
        """Get Calibration sample depth """
        return self.QueryResponse_int("CalDepth?\n")

    def setCalDepth(self, newvalue:int) :
        """Set Calibration sample depth """
        self.SendCommand("CalDepth " + str(newvalue) + "\n")
        return None

    def getCalReclen(self) -> int:
        """Get Calibration record length """
        return self.QueryResponse_int("CalReclen?\n")

    def setCalReclen(self, newvalue:int) :
        """Set Calibration record length """
        self.SendCommand("CalReclen " + str(newvalue) + "\n")
        return None

    class Edge(Enum):
        Rising = "Rising"
        Falling = "Falling"

    def getEdge(self) -> Edge:
        """Get enum Reference Edge """
        return self.Edge(self.QueryResponse_enum(self.Edge, "Edge?\n"))

    def setEdge(self, newvalue: Edge) :
        """Set enum Reference Edge """
        self.SendCommand("Edge " + newvalue.value + "\n")
        return None

    def getOffsetPS(self) -> float:
        """Get Record Offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffsetPS(self, newvalue:float) :
        """Set Record Offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getSpanPS(self) -> float:
        """Get Record Span """
        return self.QueryResponse_float("Span?\n")

    def setSpanPS(self, newvalue:float) :
        """Set Record Span """
        self.SendCommand("Span " + str(newvalue) + "\n")
        return None

    def getTermOhms(self) -> float:
        """Get Termination Impedance """
        return self.QueryResponse_float("Term?\n")

    def setTermOhms(self, newvalue:float) :
        """Set Termination Impedance """
        self.SendCommand("Term " + str(newvalue) + "\n")
        return None

    def getUseBeforeStep(self) -> bool:
        """Get Use estimated level before step """
        return self.QueryResponse_bool("UseBeforeStep?\n")

    def setUseBeforeStep(self, newvalue:bool) :
        """Set Use estimated level before step """
        self.SendCommand("UseBeforeStep " + ("T" if newvalue else "F") + "\n")
        return None

    def getUseDiff(self) -> bool:
        """Get Use Differential """
        return self.QueryResponse_bool("UseDiff?\n")

    def setUseDiff(self, newvalue:bool) :
        """Set Use Differential """
        self.SendCommand("UseDiff " + ("T" if newvalue else "F") + "\n")
        return None

# ================================ #

class BranchTdrChart(AutomationExtender):
    """BranchTdrChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottomOhms(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottomOhms(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    class Cursor1(Enum):
        Manual = "Manual"
        AutoY = "AutoY"
        AutoX = "AutoX"

    def getCursor1(self) -> Cursor1:
        """Get enum Cursor 1 Mode """
        return self.Cursor1(self.QueryResponse_enum(self.Cursor1, "Cursor1?\n"))

    def setCursor1(self, newvalue: Cursor1) :
        """Set enum Cursor 1 Mode """
        self.SendCommand("Cursor1 " + newvalue.value + "\n")
        return None

    class Cursor2(Enum):
        Manual = "Manual"
        AutoY = "AutoY"
        AutoX = "AutoX"

    def getCursor2(self) -> Cursor2:
        """Get enum Cursor 2 Mode """
        return self.Cursor2(self.QueryResponse_enum(self.Cursor2, "Cursor2?\n"))

    def setCursor2(self, newvalue: Cursor2) :
        """Set enum Cursor 2 Mode """
        self.SendCommand("Cursor2 " + newvalue.value + "\n")
        return None

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeightOhms(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeightOhms(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchTdr(AutomationExtender):
    """BranchTdr class.  TDR Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchTdrCfg(self,"Cfg:")
        self.Chart = BranchTdrChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getBinary(self) -> list:
        """Get binary Binary Data """
        return self.QueryBinaryResponse_float( "Binary?\n")

    class CalState(Enum):
        _None = "None"
        Short = "Short"
        Term = "Term"
        Success = "Success"
        Fail = "Fail"

    def getCalState(self) -> CalState:
        """Get enum Calibration State """
        return self.CalState(self.QueryResponse_enum(self.CalState, "CalState?\n"))

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShortCalFile(self) -> str:
        """Get Short cal table file """
        return self.QueryResponse("ShortCalFile?\n")

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Status Message """
        return self.QueryResponse("StatusMsg?\n")

    def getTermCalFile(self) -> str:
        """Get Term cal table file """
        return self.QueryResponse("TermCalFile?\n")

    def CancelCal(self):
        """Method for Cancel calibration. """
        self.SendCommand("CancelCal\n")
        return None

    def ClearCal(self):
        """Method for Clear calibration. """
        self.SendCommand("ClearCal\n")
        return None

    def Csv(self, optFilename: str = "") -> str:
        """Response method for Tdr Csv. """
        return self.QueryResponse("Csv\n" if optFilename == "" else 'Csv "'+optFilename+'"\n')

    def Fit(self):
        """Method for Tdr Chart Fit. """
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position. """
        self.SendCommand("Reset\n")
        return None

    def RunShortCal(self):
        """Method for Run Short calibration."""
        self.SendCommand("RunShortCal\n")
        return None

    def RunTermCal(self):
        """Method for Run 50 Ohm calibration."""
        self.SendCommand("RunTermCal\n")
        return None

    def LoadShortCal(self, fileName: str):
        """Method for Load short calibration."""
        self.SendCommand("LoadShortCal \"" + fileName + "\"\n")
        return None

    def LoadTermCal(self, fileName: str):
        """Method for Load termination calibration."""
        self.SendCommand("LoadTermCal \"" + fileName + "\"\n")
        return None

    def SaveShortCal(self, fileName: str):
        """Method for Save short calibration."""
        self.SendCommand("SaveShortCal \"" + fileName + "\"\n")
        return None

    def SaveTermCal(self, fileName: str):
        """Method for Save termination calibration."""
        self.SendCommand("SaveTermCal \"" + fileName + "\"\n")
        return None

# ================================ #

class BranchTdtCfg(AutomationExtender):
    """BranchTdtCfg class.  Configuration"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getAlignRef(self) -> bool:
        """Get Align Reference Step """
        return self.QueryResponse_bool("AlignRef?\n")

    def setAlignRef(self, newvalue:bool) :
        """Set Align Reference Step """
        self.SendCommand("AlignRef " + ("T" if newvalue else "F") + "\n")
        return None

    def getAutoRefresh(self) -> bool:
        """Get Automatic refresh """
        return self.QueryResponse_bool("AutoRefresh?\n")

    def setAutoRefresh(self, newvalue:bool) :
        """Set Automatic refresh """
        self.SendCommand("AutoRefresh " + ("T" if newvalue else "F") + "\n")
        return None

    def getAvg(self) -> int:
        """Get Avergages """
        return self.QueryResponse_int("Avg?\n")

    def setAvg(self, newvalue:int) :
        """Set Avergages """
        self.SendCommand("Avg " + str(newvalue) + "\n")
        return None

    def getBWGHz(self) -> float:
        """Get BW Limit GHz """
        return self.QueryResponse_float("BW?\n")

    def setBWGHz(self, newvalue:float) :
        """Set BW Limit GHz """
        self.SendCommand("BW " + str(newvalue) + "\n")
        return None

    def getCalAvg(self) -> int:
        """Get Calibration averages """
        return self.QueryResponse_int("CalAvg?\n")

    def setCalAvg(self, newvalue:int) :
        """Set Calibration averages """
        self.SendCommand("CalAvg " + str(newvalue) + "\n")
        return None

    def getCalDepth(self) -> int:
        """Get Calibration sample depth """
        return self.QueryResponse_int("CalDepth?\n")

    def setCalDepth(self, newvalue:int) :
        """Set Calibration sample depth """
        self.SendCommand("CalDepth " + str(newvalue) + "\n")
        return None

    def getCalReclen(self) -> int:
        """Get Calibration record length """
        return self.QueryResponse_int("CalReclen?\n")

    def setCalReclen(self, newvalue:int) :
        """Set Calibration record length """
        self.SendCommand("CalReclen " + str(newvalue) + "\n")
        return None

    class DSPMode(Enum):
        Off = "Off"
        Differential = "Differential"
        SEPositive = "SEPositive"
        SENegative = "SENegative"

    def getDSPMode(self) -> DSPMode:
        """Get enum DSP processing mode """
        return self.DSPMode(self.QueryResponse_enum(self.DSPMode, "DSPMode?\n"))

    def setDSPMode(self, newvalue: DSPMode) :
        """Set enum DSP processing mode """
        self.SendCommand("DSPMode " + newvalue.value + "\n")
        return None

    class Edge(Enum):
        Rising = "Rising"
        Falling = "Falling"

    def getEdge(self) -> Edge:
        """Get enum Reference Edge """
        return self.Edge(self.QueryResponse_enum(self.Edge, "Edge?\n"))

    def setEdge(self, newvalue: Edge) :
        """Set enum Reference Edge """
        self.SendCommand("Edge " + newvalue.value + "\n")
        return None

    def getOffsetPS(self) -> float:
        """Get Record Offset """
        return self.QueryResponse_float("Offset?\n")

    def setOffsetPS(self, newvalue:float) :
        """Set Record Offset """
        self.SendCommand("Offset " + str(newvalue) + "\n")
        return None

    def getReclen(self) -> int:
        """Get Record Length """
        return self.QueryResponse_int("Reclen?\n")

    def setReclen(self, newvalue:int) :
        """Set Record Length """
        self.SendCommand("Reclen " + str(newvalue) + "\n")
        return None

    def getSpanPS(self) -> float:
        """Get Record Span """
        return self.QueryResponse_float("Span?\n")

    def setSpanPS(self, newvalue:float) :
        """Set Record Span """
        self.SendCommand("Span " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchTdtChart(AutomationExtender):
    """BranchTdtChart class.  Chart View"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)

    def __del__(self):
        super().__del__()
        return None

    def getBottom(self) -> float:
        """Get Chart Bottom """
        return self.QueryResponse_float("Bottom?\n")

    def setBottom(self, newvalue:float) :
        """Set Chart Bottom """
        self.SendCommand("Bottom " + str(newvalue) + "\n")
        return None

    def getCursAvail(self, index: int) -> bool:
        """Get Chart Cursor Available[] """
        return self.QueryResponse_bool("CursAvail["+str(index)+"]?\n")

    def getCursEnabled(self, index: int) -> bool:
        """Get Chart Cursor Enabled[] """
        return self.QueryResponse_bool("CursEnabled["+str(index)+"]?\n")

    def setCursEnabled(self, index: int, newvalue:bool) :
        """Set Chart Cursor Enabled[] """
        self.SendCommand("CursEnabled["+str(index)+"] " + ("T" if newvalue else "F") + "\n")
        return None

    def getCursLabel(self, index: int) -> str:
        """Get Chart Cursor Label[] """
        return self.QueryResponse("CursLabel["+str(index)+"]?\n")

    class Cursor1(Enum):
        Manual = "Manual"
        AutoYDut = "AutoYDut"
        AutoYThrough = "AutoYThrough"
        AutoXDut = "AutoXDut"
        AutoXThrough = "AutoXThrough"

    def getCursor1(self) -> Cursor1:
        """Get enum Cursor 1 Mode """
        return self.Cursor1(self.QueryResponse_enum(self.Cursor1, "Cursor1?\n"))

    def setCursor1(self, newvalue: Cursor1) :
        """Set enum Cursor 1 Mode """
        self.SendCommand("Cursor1 " + newvalue.value + "\n")
        return None

    class Cursor2(Enum):
        Manual = "Manual"
        AutoYDut = "AutoYDut"
        AutoYThrough = "AutoYThrough"
        AutoXDut = "AutoXDut"
        AutoXThrough = "AutoXThrough"

    def getCursor2(self) -> Cursor2:
        """Get enum Cursor 2 Mode """
        return self.Cursor2(self.QueryResponse_enum(self.Cursor2, "Cursor2?\n"))

    def setCursor2(self, newvalue: Cursor2) :
        """Set enum Cursor 2 Mode """
        self.SendCommand("Cursor2 " + newvalue.value + "\n")
        return None

    def getCursValue(self, index: int) -> float:
        """Get Chart Cursor Value[] """
        return self.QueryResponse_float("CursValue["+str(index)+"]?\n")

    def setCursValue(self, index: int, newvalue:float) :
        """Set Chart Cursor Value[] """
        self.SendCommand("CursValue["+str(index)+"] " + str(newvalue) + "\n")
        return None

    def getHeight(self) -> float:
        """Get Chart Height """
        return self.QueryResponse_float("Height?\n")

    def setHeight(self, newvalue:float) :
        """Set Chart Height """
        self.SendCommand("Height " + str(newvalue) + "\n")
        return None

    def getLeftPS(self) -> float:
        """Get Chart Left """
        return self.QueryResponse_float("Left?\n")

    def setLeftPS(self, newvalue:float) :
        """Set Chart Left """
        self.SendCommand("Left " + str(newvalue) + "\n")
        return None

    def getLimits(self, index: int) -> float:
        """Get Chart Limits (LRBT)[] """
        return self.QueryResponse_float("Limits["+str(index)+"]?\n")

    def getLocked(self) -> bool:
        """Get Chart Locked """
        return self.QueryResponse_bool("Locked?\n")

    def setLocked(self, newvalue:bool) :
        """Set Chart Locked """
        self.SendCommand("Locked " + ("T" if newvalue else "F") + "\n")
        return None

    def getLogscale(self) -> bool:
        """Get Chart LogScale """
        return self.QueryResponse_bool("Logscale?\n")

    def setLogscale(self, newvalue:bool) :
        """Set Chart LogScale """
        self.SendCommand("Logscale " + ("T" if newvalue else "F") + "\n")
        return None

    class Scroll(Enum):
        _None = "None"
        X1 = "X1"
        X2 = "X2"
        X3 = "X3"
        X4 = "X4"
        DX12 = "DX12"
        DX34 = "DX34"
        XPan = "XPan"
        XScale = "XScale"
        Y1 = "Y1"
        Y2 = "Y2"
        Y3 = "Y3"
        Y4 = "Y4"
        DY12 = "DY12"
        DY34 = "DY34"
        YPan = "YPan"
        YScale = "YScale"
        P1 = "P1"
        P2 = "P2"
        P3 = "P3"

    def getScroll(self) -> Scroll:
        """Get enum Chart Scroll Mode """
        return self.Scroll(self.QueryResponse_enum(self.Scroll, "Scroll?\n"))

    def setScroll(self, newvalue: Scroll) :
        """Set enum Chart Scroll Mode """
        self.SendCommand("Scroll " + newvalue.value + "\n")
        return None

    def getShowMemory(self) -> bool:
        """Get Show memories """
        return self.QueryResponse_bool("ShowMemory?\n")

    def setShowMemory(self, newvalue:bool) :
        """Set Show memories """
        self.SendCommand("ShowMemory " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowOverlays(self) -> bool:
        """Get Show overlays """
        return self.QueryResponse_bool("ShowOverlays?\n")

    def setShowOverlays(self, newvalue:bool) :
        """Set Show overlays """
        self.SendCommand("ShowOverlays " + ("T" if newvalue else "F") + "\n")
        return None

    def getTitle(self) -> str:
        """Get Chart Title """
        return self.QueryResponse("Title?\n")

    def getWidthPS(self) -> float:
        """Get Chart Width """
        return self.QueryResponse_float("Width?\n")

    def setWidthPS(self, newvalue:float) :
        """Set Chart Width """
        self.SendCommand("Width " + str(newvalue) + "\n")
        return None

# ================================ #

class BranchTdt(AutomationExtender):
    """BranchTdt class.  TDR Application"""

    def __init__(self, parent: AutomationInterface, prefix: str):
        super().__init__(parent, prefix)
        self.Cfg = BranchTdtCfg(self,"Cfg:")
        self.Chart = BranchTdtChart(self,"Chart:")

    def __del__(self):
        super().__del__()
        return None

    def getAlignPS(self) -> float:
        """Get Alignment between DUT and REF """
        return self.QueryResponse_float("Align?\n")

    def getBinary(self) -> list:
        """Get binary Binary Data """
        return self.QueryBinaryResponse_float( "Binary?\n")

    class CalState(Enum):
        _None = "None"
        Through = "Through"
        Success = "Success"
        Fail = "Fail"

    def getCalState(self) -> CalState:
        """Get enum Calibration State """
        return self.CalState(self.QueryResponse_enum(self.CalState, "CalState?\n"))

    def getElapsedSeconds(self) -> float:
        """Get Elapsed Time Seconds """
        return self.QueryResponse_float("Elapsed?\n")

    def getRef(self) -> bytes:
        """Get binary Binary Ref Data """
        return self.QueryBinaryResponse( "Ref?\n")

    class Running(Enum):
        Stop = "Stop"
        Run = "Run"
        RunOnce = "RunOnce"

    def getRunning(self) -> Running:
        """Get enum Running state """
        return self.Running(self.QueryResponse_enum(self.Running, "Running?\n"))

    def getSequence(self) -> int:
        """Get Run Sequence """
        return self.QueryResponse_int("Sequence?\n")

    def getShowDut(self) -> bool:
        """Get Show TDR trace """
        return self.QueryResponse_bool("ShowDut?\n")

    def setShowDut(self, newvalue:bool) :
        """Set Show TDR trace """
        self.SendCommand("ShowDut " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowSettings(self) -> bool:
        """Get Show Settings """
        return self.QueryResponse_bool("ShowSettings?\n")

    def setShowSettings(self, newvalue:bool) :
        """Set Show Settings """
        self.SendCommand("ShowSettings " + ("T" if newvalue else "F") + "\n")
        return None

    def getShowThrough(self) -> bool:
        """Get Show Reference trace """
        return self.QueryResponse_bool("ShowThrough?\n")

    def setShowThrough(self, newvalue:bool) :
        """Set Show Reference trace """
        self.SendCommand("ShowThrough " + ("T" if newvalue else "F") + "\n")
        return None

    def getStatusMsg(self) -> str:
        """Get Status Message """
        return self.QueryResponse("StatusMsg?\n")

    def getThroughCalFile(self) -> str:
        """Get Through cal table file """
        return self.QueryResponse("ThroughCalFile?\n")

    def CancelCal(self):
        """Method for Cancel calibration."""
        self.SendCommand("CancelCal\n")
        return None

    def ClearCal(self):
        """Method for Clear calibration."""
        self.SendCommand("ClearCal\n")
        return None

    def Csv(self, optFilename: str = "") -> str:
        """Response method for Tdt Csv. """
        return self.QueryResponse("Csv\n" if optFilename == "" else 'Csv "'+optFilename+'"\n')

    def Fit(self):
        """Method for Tdt Chart Fit. """
        self.SendCommand("Fit\n")
        return None

    def Reset(self):
        """Method for Reset position."""
        self.SendCommand("Reset\n")
        return None

    def RunThroughCal(self):
        """Method for Run Through calibration."""
        self.SendCommand("RunThroughCal\n")
        return None

    def SaveThroughCal(self, fileName: str):
        """Method for Save through calibration."""
        self.SendCommand("SaveThroughCal \"" + fileName + "\"\n")
        return None

    def LoadThroughCal(self, fileName: str):
        """Method for Load through calibration."""
        self.SendCommand("LoadThroughCal \"" + fileName + "\"\n")
        return None
