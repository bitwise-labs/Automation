# test_main.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation import *

def test_main_001(ip_address: str):
    Pega = PegaDevice()
    try:
        Pega.Connect(ip_address)
        Pega.ED.setDebugging(True)

        print("Serial number......." + Pega.Const.getSN())
        print("Build..............." + Pega.Sys.getBuild())
        print("Nickname............" + Pega.Sys.getNickname())
        print("Clk S/N............." + Pega.Clk.Const.getSN())
        print("Accessory attached.." + str(Pega.Acc.getIsAttached()))
        print("Accessory..........." + Pega.Acc.getType().value)

        if Pega.Acc.getType() == Pega.Acc.Type.DDR5:
            print("DDR5 Serial number.." + Pega.Acc.DDR.Const.getSN())

        Pega.PG.Amp.setAmplMV(0, 500.0)
        Pega.PG.Amp.setAmplMV(1, 500.0)
        Pega.Patt.Deploy(BranchPatt.PatternChannel.Ch0, "10.patt")
        Pega.Patt.Deploy(BranchPatt.PatternChannel.Ch1, "11110000.patt")
        Pega.PG.setPattern(0, BranchPG.Pattern.Prbs7)
        Pega.PG.setPattern(1, BranchPG.Pattern.Prbs15)
        Pega.PG.setAllOn(True)
        Pega.App.setTab("TUB")
        Pega.Stop()

        print("Accessory..........." + Pega.Acc.getType().value)
        print("Pattern............." + Pega.PG.getPattern(0).value)
        print("Amplitude..........." + str(Pega.PG.Amp.getAmplMV(0)))

        Pega.ED.AlignData(BranchED.AlignBy.All)
        Pega.RunSingle()

        now = SocketDevice.timestamp()
        timeout = now + 600;

        last_progress = -1
        while now < timeout and Pega.getIsRunning():
            time.sleep(0.5)
            now = SocketDevice.timestamp()

            progress = Pega.Tub.getProgress100Pcnt()
            if progress != last_progress:
                print('\r'+'='*progress+'-'*(100-progress)+' ' + str(progress) + "% ", end='', flush=True)
                last_progress = progress

        Pega.Stop()

        progress = Pega.Tub.getProgress100Pcnt()
        print('\r' + '=' * progress + '-' * (100 - progress) + ' ' + str(progress) + "% ", flush=True)

        if now >= timeout:
            raise Exception("[Tub_Completion_Timeout]")

        status_message = Pega.Tub.getStatusMsg()
        print("STATUS: " + status_message)

        results = Pega.Tub.FetchResults()
        print("RESULTS:\n" + results)

        print("Tub RJ.........."+str(BitwiseDevice.unpackDoubleByKey(results, "RJ")) + " ps")

    finally:
        Pega.Disconnect()
        Pega = None
    return None

def test_main_002(ip_address: str):
    Pega = PegaDevice()
    try:
        Pega.Connect(ip_address)
        Pega.ED.setDebugging(True)
        Pega.PG.setDebugging(True)

        print("Serial number......." + Pega.Const.getSN())
        print("Build..............." + Pega.Sys.getBuild())
        print("Nickname............" + Pega.Sys.getNickname())

        Pega.Stop()
        Pega.RestoreConfiguration("[factory]")
        Pega.App.setTab("BERT")
        Pega.PG.Amp.setAmplMV(0, 500.0)
        Pega.PG.Amp.setAmplMV(1, 500.0)

        Pega.PG.setPattern(0, BranchPG.Pattern.Prbs7)
        Pega.PG.setPattern(1, BranchPG.Pattern.Prbs31)

        Pega.Syn.setSource(0, BranchSyn.Source.Internal)
        Pega.Syn.setSource(1, BranchSyn.Source.Internal)

        Pega.PG.setAllOn(True)

        Pega.ED.setEnabled(True)
        Pega.ED.Sampler.setMode(BranchEDSampler.Mode.CalInput)
        Pega.ED.setEyeSubrate(BranchED.EyeSubrate.DivBy1)
        Pega.ED.setAutoResync(True)
        Pega.ED.setPatt(BranchED.Patt.Auto)

        noSync = 0
        nonZeroBER = 0
        BERErrors = ""
        SyncErrors = ""

        STOP_ON_ERROR = False
        STARTGHZ = 1.0
        ENDGHZ = 28.0
        STEPGHZ = 0.5
        MAX_CALIB_GHZ = 3.0;

        CALNUM = [2, 4, 8, 16, 0]
        CALDIV = [BranchSyn.DivCalib.Div2, BranchSyn.DivCalib.Div4, BranchSyn.DivCalib.Div8, BranchSyn.DivCalib.Div16]

        dataRateGbps = STARTGHZ
        while dataRateGbps <= ENDGHZ:
            print("=============================== Data Rate: " + str(dataRateGbps) + " Gbps")

            nIndex = 0;
            while CALNUM[nIndex] != 0:
                if dataRateGbps / CALNUM[nIndex] <= MAX_CALIB_GHZ:
                    break
                nIndex += 1

            if CALNUM[nIndex] == 0:
                raise Exception("[Unable_To_Find_Matching_Calib_GHz]")

            clockRateGHz = dataRateGbps / 2.0

            print("Set DDR Clock Rate to: "+str(clockRateGHz)+" GHz")

            Pega.Syn.setClockRateGHz(clockRateGHz)

            print("Set calib divider to: " +str(CALDIV[nIndex]))
            Pega.Syn.setDivCalib(CALDIV[nIndex])

            print("Wait for clock to settle")
            Pega.PG.WaitForClockToSettle(clockRateGHz)

            print("Read calib rate: "+str(Pega.ED.getCalibRateGHz())+" GHz")

            print("Align Data")

            Pega.ED.AlignData(BranchED.AlignBy.All)

            print("Align status: " + Pega.ED.getAlignDataMsg() )

            inSyncFlag = Pega.ED.getInSync()

            if inSyncFlag:
                print("Sync....Yes")
                print("Patt...." + str(Pega.ED.getDetPatt()))

                Pega.App.Clear()
                Pega.App.Run()
                time.sleep(5)
                Pega.App.Stop()

                print("Bits...."+ str(Pega.Err.getBits()))
                print("Errors.."+ str(Pega.Err.getErrors()))

                BER = Pega.Err.getABER()
                print("BER..." + "{:.2e}".format(BER))
                if BER != 0.0:
                    print("ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR")
                    nonZeroBER += 1
                    BERErrors += str(dataRateGbps) + " "

                    if STOP_ON_ERROR:
                        raise Exception("[Non_Zero_BER_Error]")
            else:
                print("Sync....No")
                print("Patt...."+ str(Pega.ED.getDetPatt()) )
                print("ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR ERR")
                noSync += 1
                SyncErrors += str(dataRateGbps) + " "
                if STOP_ON_ERROR:
                    raise Exception("[No_Syc_Error]")


            dataRateGbps += STEPGHZ

        print("===============================")
        print("Tests complete.  NoSyncErrs="+str(noSync)+", NonZeroBER="+str(nonZeroBER))
        if noSync > 0:
            print("Sync Errors: " + SyncErrors)

        if nonZeroBER > 0:
            print("Non-zero BER Errors: " + BERErrors)

    finally:
        Pega.Disconnect()
        Pega = None
    return None

if __name__ == '__main__':
    print("Test Main\n")
    test_main_001("192.168.1.176:923")
    #test_main_002("192.168.1.176:923")

# EOF