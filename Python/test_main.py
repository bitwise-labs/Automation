# test_main.py
# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation import *


def test_main():
    Pega = PegaDevice()
    try:
        Pega.Connect("192.168.1.176")
        Pega.ED.setDebugging(True)

        print("Serial number......." + Pega.Const.getSN())
        print("Build..............." + Pega.Sys.getBuild())
        print("Nickname............" + Pega.Sys.getNickname())
        print("Clk S/N............." + Pega.Clk.Const.getSN())
        print("Accessory attached.." + str(Pega.Acc.getIsAttached()))
        print("Accessory..........." + Pega.Acc.getType().value)

        if Pega.Acc.getType() == Pega.Acc.Type.DDR5:
            print("DDR5 Serial number.." + Pega.Acc.DDR.Const.getSN())

        Pega.PG.Amp.setAmplMV(0, 500.0)
        Pega.PG.Amp.setAmplMV(1, 500.0)
        Pega.Patt.Deploy(BranchPatt.PatternChannel.Ch0, "10.patt")
        Pega.Patt.Deploy(BranchPatt.PatternChannel.Ch1, "11110000.patt")
        Pega.PG.setPattern(0, BranchPG.Pattern.Prbs7)
        Pega.PG.setPattern(1, BranchPG.Pattern.Prbs15)
        Pega.PG.setAllOn(True)
        Pega.App.setTab("TUB")
        Pega.Stop()

        print("Accessory..........." + Pega.Acc.getType().value)
        print("Pattern............." + Pega.PG.getPattern(0).value)
        print("Amplitude..........." + str(Pega.PG.Amp.getAmplMV(0)))

        Pega.ED.AlignData(BranchED.AlignBy.All)
        Pega.RunSingle()

        now = SocketDevice.timestamp()
        timeout = now + 600;

        last_progress = -1
        while now < timeout and Pega.getIsRunning():
            time.sleep(0.5)
            now = SocketDevice.timestamp()

            progress = Pega.Tub.getProgress100Pcnt()
            if progress != last_progress:
                print('\r'+'='*progress+'-'*(100-progress)+' ' + str(progress) + "% ", end='', flush=True)
                last_progress = progress

        Pega.Stop()

        progress = Pega.Tub.getProgress100Pcnt()
        print('\r' + '=' * progress + '-' * (100 - progress) + ' ' + str(progress) + "% ", flush=True)

        if now >= timeout:
            raise Exception("[Tub_Completion_Timeout]")

        status_message = Pega.Tub.getStatusMsg()
        print("STATUS: " + status_message)

        results = Pega.Tub.FetchResults()
        print("RESULTS:\n" + results)

    finally:
        Pega.Disconnect()
        Pega = None
    return None


if __name__ == '__main__':
    print("Test Main\n")
    test_main()

# EOF