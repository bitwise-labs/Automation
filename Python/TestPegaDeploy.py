# TestPegaDeploy.py

# -loop 100 -drate 1.0 -drate 2.0 -drate 3.0 -drate 4.0 -drate 5.0 -drate 6.0 -drate 8.0 -drate 10.0 -ch 0 -ch 1 192.168.1.176

# ================================================================================
# BOOST SOFTWARE LICENSE
#
# Copyright 2020 BitWise Laboratories Inc.
# Original Author.......Jim Waschura
# Contact...............info@bitwiselabs.com
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ================================================================================

from pyBitwiseAutomation import *
import sys
import math


def test_PegaDeploy(
        ip_address: str,
        loop_count: int = 1,
        verbose_flag: bool = False,
        data_rate_ghz: float = 5.5,
        channel: BranchPatt.PatternChannel = BranchPatt.PatternChannel.Ch0
) -> int:
    # returns number of errors encountered

    print("ip_addr=" + ip_address + ", loop=" + str(loop_count) +
          ", drate=" + str(data_rate_ghz) + ", ch=" + str(channel)   )

    errors = 0
    Pega = PegaDevice()
    channel_num = 0 if channel == BranchPatt.PatternChannel.Ch0 else 1
    counter = 0

    try:
        # Pega.setDebugging(verbose_flag)
        Pega.Connect(ip_address)

        if verbose_flag:
            print("PEGA DEPLOY TEST")
            print("IP Address........" + ip_address)
            print("Serial number....." + Pega.Const.getSN())
            print("Build............." + Pega.Sys.getBuild())
            print("Loop.............." + str(loop_count))
            print("Verbose..........." + str(verbose_flag))
            print("Data rate GHz....." + str(data_rate_ghz))
            print("Channel..........." + str(channel))

        # Pega.RestoreConfiguration("[factory]")
        # Pega.PG.setAllOn(1)
        Pega.Syn.setDataRateGbps(data_rate_ghz)
        Pega.PG.WaitForClockToSettle(data_rate_ghz / 2.0)

        pg_clk = Pega.Syn.getDataRateGbps()
        print("Operating data rate: " + str(pg_clk) + " Gbps")

        fnames = []
        fnames.append("1100.patt")
        # fnames.append("Prbs/prbs13.patt")
        fnames.append("10.patt")
        # fnames.append("Prbs/prbs15.patt")

        Pega.PG.setPattern(channel_num, Pega.PG.Pattern.User)

        while counter < loop_count:
            time_start = time.time()
            error_msg = "Okay"
            try:
                Pega.Patt.Deploy(channel, fnames[counter % len(fnames)], 0)

            except Exception as e:
                errors += 1
                error_msg = "Error"

            counter += 1
            time_elapsed = time.time() - time_start

            print(str(channel) +
                  ", " + str(data_rate_ghz) + " Gbps" +
                  ", loop=" + str(counter) +
                  ", " + error_msg +
                  ", " + "{:.2f}".format(time_elapsed) + " sec" +
                  ", file=" + fnames[counter % len(fnames)]
                  )

    finally:
        Pega.Disconnect()
        Pega = None

    return errors


if __name__ == '__main__':
    print("TestPegaDeploy, Version 1.1\n")

    loop = 1
    ip = ""
    verbose = False
    data_rate = []
    channel = []

    i = 1
    while i < len(sys.argv):
        # print("argv[" + str(i) + "] = " + sys.argv[i])

        if sys.argv[i] == "-loop":
            loop = int(sys.argv[i + 1])
            i += 1
        elif sys.argv[i] == "-verbose":
            verbose = True
        elif sys.argv[i] == "-drate":
            data_rate.append(float(sys.argv[i + 1]))
            i += 1
        elif sys.argv[i] == "-ch":
            if int(sys.argv[i + 1]) == 0:
                channel.append(BranchPatt.PatternChannel.Ch0)
            elif int(sys.argv[i + 1]) == 1:
                channel.append(BranchPatt.PatternChannel.Ch1)
            else:
                print("Unknown channel number. Must be 0 or 1")
            i += 1
        elif ip == "":
            ip = sys.argv[i]
        else:
            print("Unknown command-line argument: " + sys.argv[i])

        i += 1

    if ip == "" or loop < 1:
        print("Usage:  TestPegaDeploy [options] <ip-address>")
        print("Options:  -loop N ... set looping count (dflt 1)")
        print("          -drate F ... set data rate in GHz (multiple allowed)")
        print("          -ch N ....... set channel 0 or 1 to test (multiple allowed)")
        print("          -verbose ... set verbose mode for debugging")

        exit()

    if len(channel) == 0:
        channel.append(BranchPatt.PatternChannel.Ch0)

    if len(data_rate) == 0:
        data_rate.append(5.5)

    summary = []

    try:
        for ch in channel:
            for dr in data_rate:
                errors_encountered = test_PegaDeploy(ip, loop, verbose, dr, ch)
                summary.append(errors_encountered)

    except KeyboardInterrupt:
        print("\nCtrl-C encountered")

    print("Error summary:")

    for n in range(len(summary)):
        print(str(channel[int(n / len(data_rate))]) +
              ", " + str(data_rate[int(n % len(data_rate))]) + " Gbps" +
              ", Errors=" + str(summary[n]))

# EOF
