//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdio.h>
#include <unistd.h> /* usleep */
#include <stdlib.h> /* free */
#include <math.h> /* log10 */

#include "PelaDevice.h"

void test_pela(char *ip_address, bool stopOnError, int run );

int main( int argc, char *argv[] )
{
	setbuf(stdout, NULL); /* disable stdout buffering */
	printf("TestPela, Version 1.0\n");

	bool stopOnError=false;
	char *ip[32];
	int ipCount=0;
	int repeat=1;


	while( *(++argv) )
		if( !strcmp( *argv, "-stop") )
			stopOnError=true;

		else if( !strcmp( *argv, "-repeat") )
			repeat=atoi(*(++argv));
		else if( ipCount<32 )
			ip[ipCount++] = *argv;
		else
		{
			printf("Too many IP addresses, maximum is 32\n");
			exit(0);
		}

	if( ipCount==0 || repeat<1 )
	{
		printf("Usage:  TestPela [options] IP0 IP1 ... IPn\n");
		printf("Options:  -stop ..... stop on first error\n");
		printf("          -repeat N.. number of tests for each IP\n");
		exit(0);
	}

	try
	{
		for( int n=0; n<ipCount; n++ )
			for( int k=0; k<repeat; k++ )
				test_pela(ip[n],stopOnError,k+1);
	}
	catch(const char*msg)
	{
		printf("\nError: %s\n", msg );
	}

	return 0;
}

void test_pela(char *ip_address, bool stopOnError, int run )
{

	if( ip_address==0 || ip_address[0]==0 )
		throw "[Invalid_Parameter]";

	PelaDevice Pela;

	Pela.Connect( ip_address );

	char serialNumber[1024];
	Pela.Const.getSN( serialNumber, 1024 );

	char buffer[4096];
	printf("PELA TEST PROGRAM\n");
	printf("run...............%d\n", run );
	printf("IP Address........%s\n", ip_address );
	printf("Serial number.....%s\n", serialNumber ) ;
	printf("Build.............%s\n", Pela.Sys.getBuild( buffer, 4096 )) ;
	printf("Architecture......%s\n", Pela.Sys.getArchitecture( buffer, 4096));
	printf("StopOnError.......%c\n", stopOnError?'T':'F');
	printf("Clock rate........%.3lf\n", Pela.ED.getClockRateGHz());
	printf("Clock type........%s\n",BranchPelaED::ClockType_Strings[(int)Pela.ED.getClockType()]);
	printf("Link mode.........%s\n",BranchPelaED::LinkMode_Strings[(int)Pela.ED.getLinkMode()]);
	printf("Ch0...............%s\n",BranchPelaED::DetPatt_Strings[(int)Pela.ED.getDetPatt(0)]);
	printf("Ch1...............%s\n",BranchPelaED::DetPatt_Strings[(int)Pela.ED.getDetPatt(1)]);
	printf("Temperature.......%.1lf C\n", Pela.getTemperatureC());

	printf("\n");

	Pela.Disconnect();
}

