/* BitwiseDevice.h */
//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#ifndef BITWISE_BITWISE_DEVICE
#define  BITWISE_BITWISE_DEVICE

#include "SocketDevice.h"
#include "autogenCommon.h"

class BitwiseDevice :
  public SocketDevice
{
	public:
	typedef SocketDevice base;

	BitwiseDevice() :
		App(this,"App:"),
		File(this,"File:"),
		Sys(this,"Sys:"),
		Const(this,"Const:")
		{}

	virtual ~BitwiseDevice() {}

	static double unpackDoubleByKey(const char *str, const char *key );
	static int unpackIntegerByKey(const char *str, const char *key );
	static char *unpackValueByKey( char *buffer, int buflen, const char *str, const char *key );

	virtual void Connect( const char *ipaddress, int port=923 ); /* provide default port 923 */
	virtual void SendCommand( const char *command, ... );
	virtual char *QueryResponse( char *buffer, int buflen, const char *command, ... );

	/* specifying configurations: */
	/* "[recent]"  ...  most recent settings */
	/* "[factory]"  ... factory settings */
	/* "[startup]"  ... settings from selectable startup configuration file */
	/* full-path-name ... settings from fully-specified configuration file path  */
	/* filename-only ... settings from file located in configuration folder */

	void SaveConfiguration( const char *configuration );
	void RestoreConfiguration( const char *configuration, bool waitToComplete=true);
	void WaitForRestoreToComplete();

	void Run( double waitUntilRunningTimeout=30.0 );
	void RunSingle( double waitUntilRunningTimeout=30.0 );
	void WaitForRunToComplete( double timeoutSec );
	void Stop();
	void Clear();
	bool getIsRunning();

	public:
	BranchApp App;
	BranchFile File;
	BranchSys Sys;
	BranchConst Const;
};

#endif // BITWISE_BITWISE_DEVICE

