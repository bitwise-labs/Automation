/* autogenPela.cpp */
//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdio.h> /* fprintf, stderr */
#include <unistd.h> /* usleep */
#include <math.h> /* fabs */

#include "SocketDevice.h"
#include "autogenPela.h"

/* ================================================================ */

char* BranchBasic::getBasicReport(char *buffer,int buflen) /* Basic Ela report of 24 things */
{
    return QueryResponse(buffer,buflen,"BasicReport?\n");
}

long long BranchBasic::getBits(int index) /* Bit Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Bits[%d]?\n",index);
}

double BranchBasic::getCapturePcnt(int index) /* Capture rate */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Capture[%d]?\n",index);
}

double BranchBasic::getCBER(int index) /* Captured BER */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CBER[%d]?\n",index);
}

double BranchBasic::getCSER(int index) /* Captured SER */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CSER[%d]?\n",index);
}

bool BranchBasic::getEnabled(int index) /* Enable processor */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("Enabled[%d]?\n",index);
}

long long BranchBasic::getErrors(int index) /* Bit Errors Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Errors[%d]?\n",index);
}

const char *BranchBasic::Pattern_Strings[] =
{
    "AllZeros",
    "AllOnes",
    "Prbs7",
    "InvPrbs7",
    "Prbs11",
    "InvPrbs11",
    "Prbs13",
    "InvPrbs13",
    "Prbs15",
    "InvPrbs15",
    "Prbs20",
    "InvPrbs20",
    "Prbs23",
    "InvPrbs23",
    "Prbs31",
    "InvPrbs31",
    "RamGrab",
    "InvRamGrab",
    "RamShift",
    "InvRamShift",
    "None",
    "Unknown",
    0
};

BranchBasic::Pattern BranchBasic::getPattern(int index)
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return (Pattern)QueryResponse_enum(Pattern_Strings,"Pattern[%d]?\n",index);
}

bool BranchBasic::getPhaseFound(int index) /* Pattern Phase Found */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("PhaseFound[%d]?\n",index);
}

int BranchBasic::getResyncCount(int index) /* Resync Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("ResyncCount[%d]?\n",index);
}

const char *BranchBasic::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchBasic::Status BranchBasic::getStatus(int index)
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return (Status)QueryResponse_enum(Status_Strings,"Status[%d]?\n",index);
}

int BranchBasic::getSymbolSizeBits(int index) /* Symbol Size */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("SymbolSize[%d]?\n",index);
}


/* ================================================================ */

/* ================================================================ */


/* ================================================================ */

char *BranchBlockChannel::getBinary(int *pcount) /* Packed histogram binary data, char[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

int BranchBlockChannel::getBins() /* Histogram bin count */
{
    return QueryResponse_int("Bins?\n");
}

void BranchBlockChannel::setBins(int newValue) /* Histogram bin count */
{
    SendCommand("Bins %d\n",newValue);
}

int BranchBlockChannel::getBlockSize() /* Block Size */
{
    return QueryResponse_int("BlockSize?\n");
}

double BranchBlockChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchBlockChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchBlockChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchBlockChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchBlockChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchBlockChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchBlockChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchBlockChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchBlockChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchBlockChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchBlockChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

int BranchBlockChannel::getHistory() /* Histogram history length */
{
    return QueryResponse_int("History?\n");
}

void BranchBlockChannel::setHistory(int newValue) /* Histogram history length */
{
    SendCommand("History %d\n",newValue);
}

char* BranchBlockChannel::getHReport(char *buffer,int buflen) /* Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen */
{
    return QueryResponse(buffer,buflen,"HReport?\n");
}

int BranchBlockChannel::getHSeq() /* Histogram Sequence number */
{
    return QueryResponse_int("HSeq?\n");
}

double BranchBlockChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchBlockChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchBlockChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchBlockChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchBlockChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchBlockChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchBlockChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

double BranchBlockChannel::getOffset() /* Histogram bin offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchBlockChannel::setOffset(double newValue) /* Histogram bin offset */
{
    SendCommand("Offset %lf\n",newValue);
}

char* BranchBlockChannel::getReport(char *buffer,int buflen) /* Report-Total,Squelched,Processed,InErr,Max,Avg,Rate */
{
    return QueryResponse(buffer,buflen,"Report?\n");
}

double BranchBlockChannel::getResol() /* Histogram bin resolution */
{
    return QueryResponse_double("Resol?\n");
}

void BranchBlockChannel::setResol(double newValue) /* Histogram bin resolution */
{
    SendCommand("Resol %lf\n",newValue);
}

const char *BranchBlockChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchBlockChannel::Scroll BranchBlockChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchBlockChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchBlockChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchBlockChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchBlockChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchBlockChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchBlockChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchBlockChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchBlockChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchBlockChannel::Status BranchBlockChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchBlockChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchBlockChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchBlockChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchBlockChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File*/
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchBlockChannel::Fit() /* Fit chart to data, */
{
    SendCommand("Fit\n");
}

void BranchBlockChannel::Reset() /* Reset chart */
{
    SendCommand("Reset\n");
}

void BranchBlockChannel::MapRange(double fromValue, double toValue) /* Map histogram to fit range */
{
    SendCommand("MapRange %lf %lf\n");
}

/* ================================================================ */

char *BranchBurstChannel::getBinary(int *pcount) /* Packed histogram binary data, char[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

int BranchBurstChannel::getBins() /* Histogram bin count */
{
    return QueryResponse_int("Bins?\n");
}

void BranchBurstChannel::setBins(int newValue) /* Histogram bin count */
{
    SendCommand("Bins %d\n",newValue);
}

double BranchBurstChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchBurstChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchBurstChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchBurstChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchBurstChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchBurstChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchBurstChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchBurstChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchBurstChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchBurstChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchBurstChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

int BranchBurstChannel::getHistory() /* Histogram history length */
{
    return QueryResponse_int("History?\n");
}

void BranchBurstChannel::setHistory(int newValue) /* Histogram history length */
{
    SendCommand("History %d\n",newValue);
}

char* BranchBurstChannel::getHReport(char *buffer,int buflen) /* Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen */
{
    return QueryResponse(buffer,buflen,"HReport?\n");
}

int BranchBurstChannel::getHSeq() /* Histogram Sequence number */
{
    return QueryResponse_int("HSeq?\n");
}

double BranchBurstChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchBurstChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchBurstChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchBurstChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchBurstChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchBurstChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchBurstChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

double BranchBurstChannel::getOffset() /* Histogram bin offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchBurstChannel::setOffset(double newValue) /* Histogram bin offset */
{
    SendCommand("Offset %lf\n",newValue);
}

double BranchBurstChannel::getResol() /* Histogram bin resolution */
{
    return QueryResponse_double("Resol?\n");
}

void BranchBurstChannel::setResol(double newValue) /* Histogram bin resolution */
{
    SendCommand("Resol %lf\n",newValue);
}

const char *BranchBurstChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchBurstChannel::Scroll BranchBurstChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchBurstChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

int BranchBurstChannel::getSeparation() /* Minimum Efi */
{
    return QueryResponse_int("Separation?\n");
}

void BranchBurstChannel::setSeparation(int newValue) /* Minimum Efi */
{
    SendCommand("Separation %d\n",newValue);
}

bool BranchBurstChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchBurstChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchBurstChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchBurstChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchBurstChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchBurstChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchBurstChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchBurstChannel::Status BranchBurstChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchBurstChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchBurstChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchBurstChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchBurstChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchBurstChannel::Fit() /* Fit chart to data, */
{
    SendCommand("Fit\n");
}

void BranchBurstChannel::Reset() /* Reset chart,*/
{
    SendCommand("Reset\n");
}

void BranchBurstChannel::MapRange(double fromValue, double toValue) /* Map histogram to fit range */
{
    SendCommand("MapRange %lf %lf\n");
}

/* ================================================================ */

const char *BranchData::BitsFmt_Strings[] =
{
    "Scientific",
    "Decimal",
    0
};

BranchData::BitsFmt BranchData::getBitsFmt()
{
    return (BitsFmt)QueryResponse_enum(BitsFmt_Strings,"BitsFmt?\n");
}

void BranchData::setBitsFmt(BitsFmt newValue )
{
    SendCommand("BitsFmt \"%s\"\n",BitsFmt_Strings[(int)newValue]);
}

double BranchData::getDataRateGHz() /* Data Data Rate */
{
    return QueryResponse_double("DataRate?\n");
}

const char *BranchData::DataLinkMode_Strings[] =
{
    "Ch0",
    "Ch1",
    "Unlinked",
    "Interleaved",
    0
};

BranchData::DataLinkMode BranchData::getDataLinkMode()
{
    return (DataLinkMode)QueryResponse_enum(DataLinkMode_Strings,"DataLinkMode?\n");
}

bool BranchData::getDataShowAllCh() /* Data Show All Channels */
{
    return QueryResponse_bool("DataShowAllCh?\n");
}

double BranchData::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchData::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchData::Running BranchData::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchData::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchData::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchData::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

int BranchData::getSymbolSizeBits(int index) /* Global bits per symbol */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("SymbolSize[%d]?\n",index);
}

void BranchData::setSymbolSizeBits(int index,int newValue) /* Global bits per symbol */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    SendCommand("SymbolSize[%d] %d\n",index,newValue);
}

double BranchData::getTransferBytessec() /* Bytes per second */
{
    return QueryResponse_double("Transfer?\n");
}

char* BranchData::Csv(char *buffer,int buflen, const char *optFilename) /* Save ELA Results in CSV file */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

long long BranchData::getCommonBits() /* Common bit count */
{
    return QueryResponse_int64("Common:Bits?\n");
}

int BranchData::getCommonBuffers() /* Number of buffers */
{
    return QueryResponse_int("Common:Buffers?\n");
}

bool BranchData::getCommonEnabled() /* Common Enable processor */
{
    return QueryResponse_bool("Common:Enabled?\n");
}

double BranchData::getCommonMarkDensityPcnt() /* Common mark density */
{
    return QueryResponse_double("Common:MarkDensity?\n");
}

long long BranchData::getCommonMarks() /* Common mark count */
{
    return QueryResponse_int64("Common:Marks?\n");
}

const char *BranchData::CommonStatus_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchData::CommonStatus BranchData::getCommonStatus()
{
    return (CommonStatus)QueryResponse_enum(CommonStatus_Strings,"Common:Status?\n");
}


/* ================================================================ */

/* ================================================================ */

char* BranchPelaED::getAutoClockMsg(char *buffer,int buflen) /* Autoset clock results */
{
    return QueryResponse(buffer,buflen,"AutoClockMsg?\n");
}

char* BranchPelaED::getAutoDataMsg(char *buffer,int buflen) /* Autoset data results */
{
    return QueryResponse(buffer,buflen,"AutoDataMsg?\n");
}

bool BranchPelaED::getAutoResync(int index) /* Auto Resync Enable */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("AutoResync[%d]?\n",index);
}

void BranchPelaED::setAutoResync(int index,bool newValue) /* Auto Resync Enable */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("AutoResync[%d] %c\n",index,newValue?'T':'F');
}

const char *BranchPelaED::AuxIn1_Strings[] =
{
    "Marker",
    0
};

BranchPelaED::AuxIn1 BranchPelaED::getAuxIn1()
{
    return (AuxIn1)QueryResponse_enum(AuxIn1_Strings,"AuxIn1?\n");
}

void BranchPelaED::setAuxIn1(AuxIn1 newValue )
{
    SendCommand("AuxIn1 \"%s\"\n",AuxIn1_Strings[(int)newValue]);
}

const char *BranchPelaED::AuxIn2_Strings[] =
{
    "Blanking",
    0
};

BranchPelaED::AuxIn2 BranchPelaED::getAuxIn2()
{
    return (AuxIn2)QueryResponse_enum(AuxIn2_Strings,"AuxIn2?\n");
}

void BranchPelaED::setAuxIn2(AuxIn2 newValue )
{
    SendCommand("AuxIn2 \"%s\"\n",AuxIn2_Strings[(int)newValue]);
}

const char *BranchPelaED::AuxOut1_Strings[] =
{
    "Ch0Pattern",
    "Ch1Pattern",
    "Ch0Error",
    "Ch1Error",
    "AnyError",
    "WordClock",
    "AuxLoopback",
    "Off",
    0
};

BranchPelaED::AuxOut1 BranchPelaED::getAuxOut1()
{
    return (AuxOut1)QueryResponse_enum(AuxOut1_Strings,"AuxOut1?\n");
}

void BranchPelaED::setAuxOut1(AuxOut1 newValue )
{
    SendCommand("AuxOut1 \"%s\"\n",AuxOut1_Strings[(int)newValue]);
}

const char *BranchPelaED::AuxOut2_Strings[] =
{
    "Ch0Pattern",
    "Ch1Pattern",
    "Ch0Error",
    "Ch1Error",
    "AnyError",
    "WordClock",
    "AuxLoopback",
    "Off",
    0
};

BranchPelaED::AuxOut2 BranchPelaED::getAuxOut2()
{
    return (AuxOut2)QueryResponse_enum(AuxOut2_Strings,"AuxOut2?\n");
}

void BranchPelaED::setAuxOut2(AuxOut2 newValue )
{
    SendCommand("AuxOut2 \"%s\"\n",AuxOut2_Strings[(int)newValue]);
}

double BranchPelaED::getDataRateGHz() /* Data Rate */
{
    return QueryResponse_double("DataRate?\n");
}

double BranchPelaED::getClockRateGHz() /* Input Clock Rate */
{
    return QueryResponse_double("ClockRate?\n");
}

double BranchPelaED::getClockThreshMV() /* Clock threshold */
{
    return QueryResponse_double("ClockThresh?\n");
}

void BranchPelaED::setClockThreshMV(double newValue) /* Clock threshold */
{
    SendCommand("ClockThresh %lf\n",newValue);
}

const char *BranchPelaED::ClockType_Strings[] =
{
    "Fullrate",
    "Halfrate",
    0
};

BranchPelaED::ClockType BranchPelaED::getClockType()
{
    return (ClockType)QueryResponse_enum(ClockType_Strings,"ClockType?\n");
}

void BranchPelaED::setClockType(ClockType newValue )
{
    SendCommand("ClockType \"%s\"\n",ClockType_Strings[(int)newValue]);
}

double BranchPelaED::getDelayPS(int index) /* Delay */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Delay[%d]?\n",index);
}

void BranchPelaED::setDelayPS(int index,double newValue) /* Delay */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("Delay[%d] %lf\n",index,newValue);
}

const char *BranchPelaED::DetPatt_Strings[] =
{
    "AllZeros",
    "AllOnes",
    "Prbs7",
    "InvPrbs7",
    "Prbs11",
    "InvPrbs11",
    "Prbs13",
    "InvPrbs13",
    "Prbs15",
    "InvPrbs15",
    "Prbs20",
    "InvPrbs20",
    "Prbs23",
    "InvPrbs23",
    "Prbs31",
    "InvPrbs31",
    "RamGrab",
    "InvRamGrab",
    "RamShift",
    "InvRamShift",
    "None",
    "Unknown",
    0
};

BranchPelaED::DetPatt BranchPelaED::getDetPatt(int index)
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return (DetPatt)QueryResponse_enum(DetPatt_Strings,"DetPatt[%d]?\n",index);
}

int BranchPelaED::getDetShift(int index) /* Detected Shift */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("DetShift[%d]?\n",index);
}

bool BranchPelaED::getGrayCode() /* Using Gray Coding (MSB=Ch1, LSB=Ch0) */
{
    return QueryResponse_bool("GrayCode?\n");
}

void BranchPelaED::setGrayCode(bool newValue) /* Using Gray Coding (MSB=Ch1, LSB=Ch0) */
{
    SendCommand("GrayCode %c\n",newValue?'T':'F');
}

bool BranchPelaED::getInSync(int index) /* In Sync Flag */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("InSync[%d]?\n",index);
}

const char *BranchPelaED::LinkMode_Strings[] =
{
    "Ch0",
    "Ch1",
    "Unlinked",
    "Interleaved",
    0
};

BranchPelaED::LinkMode BranchPelaED::getLinkMode()
{
    return (LinkMode)QueryResponse_enum(LinkMode_Strings,"LinkMode?\n");
}

void BranchPelaED::setLinkMode(LinkMode newValue )
{
    SendCommand("LinkMode \"%s\"\n",LinkMode_Strings[(int)newValue]);
}

int BranchPelaED::getManualAmount(int index) /* Manual Shift Amount */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("ManualAmount[%d]?\n",index);
}

void BranchPelaED::setManualAmount(int index,int newValue) /* Manual Shift Amount */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("ManualAmount[%d] %d\n",index,newValue);
}

bool BranchPelaED::getManualShift() /* Manual Shift Enable */
{
    return QueryResponse_bool("ManualShift?\n");
}

void BranchPelaED::setManualShift(bool newValue) /* Manual Shift Enable */
{
    SendCommand("ManualShift %c\n",newValue?'T':'F');
}

double BranchPelaED::getOperatingRateGHz() /* Operating Clock Rate */
{
    return QueryResponse_double("OperatingRate?\n");
}

const char *BranchPelaED::Patt_Strings[] =
{
    "AllZeros",
    "AllOnes",
    "Prbs7",
    "InvPrbs7",
    "Prbs11",
    "InvPrbs11",
    "Prbs13",
    "InvPrbs13",
    "Prbs15",
    "InvPrbs15",
    "Prbs20",
    "InvPrbs20",
    "Prbs23",
    "InvPrbs23",
    "Prbs31",
    "InvPrbs31",
    "RamGrab",
    "InvRamGrab",
    "RamShift",
    "InvRamShift",
    "Auto",
    "Unknown",
    0
};

BranchPelaED::Patt BranchPelaED::getPatt(int index)
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return (Patt)QueryResponse_enum(Patt_Strings,"Patt[%d]?\n",index);
}

void BranchPelaED::setPatt(int index,Patt newValue )
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("Patt[%d] \"%s\"\n",index,Patt_Strings[(int)newValue]);
}

int BranchPelaED::getResyncThresh(int index) /* Resync Threshold */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("ResyncThresh[%d]?\n",index);
}

void BranchPelaED::setResyncThresh(int index,int newValue) /* Resync Threshold */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("ResyncThresh[%d] %d\n",index,newValue);
}

bool BranchPelaED::getShowAllCh() /* Show All Channels */
{
    return QueryResponse_bool("ShowAllCh?\n");
}

void BranchPelaED::setShowAllCh(bool newValue) /* Show All Channels */
{
    SendCommand("ShowAllCh %c\n",newValue?'T':'F');
}

double BranchPelaED::getThreshMV(int index) /* Threshold */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Thresh[%d]?\n",index);
}

void BranchPelaED::setThreshMV(int index,double newValue) /* Threshold */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("Thresh[%d] %lf\n",index,newValue);
}

int BranchPelaED::getUserWordsWords(int index) /* User words */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("UserWords[%d]?\n",index);
}

void BranchPelaED::setUserWordsWords(int index,int newValue) /* User words */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("UserWords[%d] %d\n",index,newValue);
}

bool BranchPelaED::getUsingEye() /* Using Eye Diagramming */
{
    return QueryResponse_bool("UsingEye?\n");
}

void BranchPelaED::ResetClock() /* Reset Clocking, */
{
    SendCommand("ResetClock\n");
}

const char *BranchPelaED::EDChannels_Strings[] = { "All", "Ch0", "Ch1", 0 };

void BranchPelaED::AutosetData(EDChannels ch) /* Perform Data Autoset */
{
    SendCommand("AutosetData %s\n",EDChannels_Strings[(int)ch] );
}

void BranchPelaED::Resync(EDChannels ch) /* Manual Resync */
{
    SendCommand("Resync %s\n",EDChannels_Strings[(int)ch] );
}

void BranchPelaED::SetDefaults(EDChannels ch ) /* Set Channel Defaults, */
{
    SendCommand("SetDefaults %s\n",EDChannels_Strings[(int)ch] );
}

/* ================================================================ */

char *BranchEfiChannel::getBinary(int *pcount) /* Packed histogram binary data, char[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

int BranchEfiChannel::getBins() /* Histogram bin count */
{
    return QueryResponse_int("Bins?\n");
}

void BranchEfiChannel::setBins(int newValue) /* Histogram bin count */
{
    SendCommand("Bins %d\n",newValue);
}

double BranchEfiChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchEfiChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchEfiChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchEfiChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchEfiChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchEfiChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchEfiChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchEfiChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchEfiChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchEfiChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchEfiChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

int BranchEfiChannel::getHistory() /* Histogram history length */
{
    return QueryResponse_int("History?\n");
}

void BranchEfiChannel::setHistory(int newValue) /* Histogram history length */
{
    SendCommand("History %d\n",newValue);
}

char* BranchEfiChannel::getHReport(char *buffer,int buflen) /* Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen */
{
    return QueryResponse(buffer,buflen,"HReport?\n");
}

int BranchEfiChannel::getHSeq() /* Histogram Sequence number */
{
    return QueryResponse_int("HSeq?\n");
}

double BranchEfiChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchEfiChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchEfiChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchEfiChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchEfiChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchEfiChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchEfiChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

double BranchEfiChannel::getOffset() /* Histogram bin offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchEfiChannel::setOffset(double newValue) /* Histogram bin offset */
{
    SendCommand("Offset %lf\n",newValue);
}

double BranchEfiChannel::getResol() /* Histogram bin resolution */
{
    return QueryResponse_double("Resol?\n");
}

void BranchEfiChannel::setResol(double newValue) /* Histogram bin resolution */
{
    SendCommand("Resol %lf\n",newValue);
}

const char *BranchEfiChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchEfiChannel::Scroll BranchEfiChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchEfiChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchEfiChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchEfiChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchEfiChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchEfiChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchEfiChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchEfiChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchEfiChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchEfiChannel::Status BranchEfiChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchEfiChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchEfiChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchEfiChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchEfiChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchEfiChannel::Fit() /* Fit chart to data, */
{
    SendCommand("Fit\n");
}

void BranchEfiChannel::Reset() /* Reset chart, */
{
    SendCommand("Reset\n");
}

void BranchEfiChannel::MapRange(double fromValue, double toValue) /* Map histogram to fit range */
{
    SendCommand("MapRange %lf %lf\n");
}

/* ================================================================ */

const char *BranchEla::BitOrder_Strings[] =
{
    "MsbFirst",
    "LsbFirst",
    0
};

BranchEla::BitOrder BranchEla::getBitOrder()
{
    return (BitOrder)QueryResponse_enum(BitOrder_Strings,"BitOrder?\n");
}

void BranchEla::setBitOrder(BitOrder newValue )
{
    SendCommand("BitOrder \"%s\"\n",BitOrder_Strings[(int)newValue]);
}

const char *BranchEla::BitsFmt_Strings[] =
{
    "Scientific",
    "Decimal",
    0
};

BranchEla::BitsFmt BranchEla::getBitsFmt()
{
    return (BitsFmt)QueryResponse_enum(BitsFmt_Strings,"BitsFmt?\n");
}

void BranchEla::setBitsFmt(BitsFmt newValue )
{
    SendCommand("BitsFmt \"%s\"\n",BitsFmt_Strings[(int)newValue]);
}

int BranchEla::getBlockSizeSymbols(int index) /* Global symbols per block */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("BlockSize[%d]?\n",index);
}

void BranchEla::setBlockSizeSymbols(int index,int newValue) /* Global symbols per block */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    SendCommand("BlockSize[%d] %d\n",index,newValue);
}

double BranchEla::getElaDataRateGHz() /* Ela Data Rate */
{
    return QueryResponse_double("ElaDataRate?\n");
}

const char *BranchEla::ElaLinkMode_Strings[] =
{
    "Ch0",
    "Ch1",
    "Unlinked",
    "Interleaved",
    0
};

BranchEla::ElaLinkMode BranchEla::getElaLinkMode()
{
    return (ElaLinkMode)QueryResponse_enum(ElaLinkMode_Strings,"ElaLinkMode?\n");
}

double BranchEla::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

char* BranchEla::getElaReport(char *buffer,int buflen) /* Ela report of 10 things */
{
    return QueryResponse(buffer,buflen,"ElaReport?\n");
}

bool BranchEla::getElaShowAllCh() /* Ela Show All Channels */
{
    return QueryResponse_bool("ElaShowAllCh?\n");
}

char* BranchEla::getFile(char *buffer,int buflen) /* Ela Filename */
{
    return QueryResponse(buffer,buflen,"File?\n");
}

void BranchEla::setFile(const char* newValue) /* Ela Filename */
{
    SendCommand("File \"%s\"\n",newValue);
}

int BranchEla::getLimitMBMB() /* File Limit MB */
{
    return QueryResponse_int("LimitMB?\n");
}

void BranchEla::setLimitMBMB(int newValue) /* File Limit MB */
{
    SendCommand("LimitMB %d\n",newValue);
}

bool BranchEla::getRecordOnly() /* ELA Record Only flag */
{
    return QueryResponse_bool("RecordOnly?\n");
}

void BranchEla::setRecordOnly(bool newValue) /* ELA Record Only flag */
{
    SendCommand("RecordOnly %c\n",newValue?'T':'F');
}

const char *BranchEla::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchEla::Running BranchEla::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchEla::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchEla::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchEla::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

double BranchEla::getSizeMBMB() /* File size MB */
{
    return QueryResponse_double("SizeMB?\n");
}

int BranchEla::getSymbolSizeBits(int index) /* Global bits per symbol */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("SymbolSize[%d]?\n",index);
}

void BranchEla::setSymbolSizeBits(int index,int newValue) /* Global bits per symbol */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    SendCommand("SymbolSize[%d] %d\n",index,newValue);
}

double BranchEla::getTransferBytessec() /* Bytes per second */
{
    return QueryResponse_double("Transfer?\n");
}

char* BranchEla::Csv(char *buffer,int buflen, const char *optFilename) /* Save ELA Results in CSV file */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

double BranchEla::getCommonCapturePcnt() /* Common Capture percentage */
{
    return QueryResponse_double("Common:Capture?\n");
}

bool BranchEla::getCommonEnabled() /* Common Enable processor */
{
    return QueryResponse_bool("Common:Enabled?\n");
}

int BranchEla::getCommonEvents(int index) /* Event Count M,R,S,B,P */
{
    if(index<0||index>=5) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("Common:Events[%d]?\n",index);
}

long long BranchEla::getCommonLongRecords() /* Long Record Count */
{
    return QueryResponse_int64("Common:LongRecords?\n");
}

long long BranchEla::getCommonMediumRecords() /* Medium Record Count */
{
    return QueryResponse_int64("Common:MediumRecords?\n");
}

bool BranchEla::getCommonResyncLev() /* Resynchronization Level */
{
    return QueryResponse_bool("Common:ResyncLev?\n");
}

long long BranchEla::getCommonShortRecords() /* Short Record Count */
{
    return QueryResponse_int64("Common:ShortRecords?\n");
}

const char *BranchEla::CommonStatus_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchEla::CommonStatus BranchEla::getCommonStatus()
{
    return (CommonStatus)QueryResponse_enum(CommonStatus_Strings,"Common:Status?\n");
}


/* ================================================================ */

/* ================================================================ */

double BranchErr::getABER(int index) /* Accumulated BER Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("ABER[%d]?\n",index);
}

char* BranchErr::getBerReport(char *buffer,int buflen) /* Ber report of 15 things */
{
    return QueryResponse(buffer,buflen,"BerReport?\n");
}

char *BranchErr::getBinary(int *pcount) /* Binary Data, float[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

long long BranchErr::getBits(int index) /* Bit Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Bits[%d]?\n",index);
}

const char *BranchErr::BitsFmt_Strings[] =
{
    "Scientific",
    "Decimal",
    0
};

BranchErr::BitsFmt BranchErr::getBitsFmt()
{
    return (BitsFmt)QueryResponse_enum(BitsFmt_Strings,"BitsFmt?\n");
}

void BranchErr::setBitsFmt(BitsFmt newValue )
{
    SendCommand("BitsFmt \"%s\"\n",BitsFmt_Strings[(int)newValue]);
}

double BranchErr::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

long long BranchErr::getErrors(int index) /* Bit Errors Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Errors[%d]?\n",index);
}

double BranchErr::getIBER(int index) /* Instantaneous BER Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("IBER[%d]?\n",index);
}

long long BranchErr::getResyncCount(int index) /* Resync Count */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("ResyncCount[%d]?\n",index);
}

const char *BranchErr::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchErr::Running BranchErr::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchErr::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

int BranchErr::getSerial() /* Serial Number of Integration */
{
    return QueryResponse_int("Serial?\n");
}

bool BranchErr::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchErr::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

bool BranchErr::getShowStripSettings() /* Show Strip Chart Settings */
{
    return QueryResponse_bool("ShowStripSettings?\n");
}

void BranchErr::setShowStripSettings(bool newValue) /* Show Strip Chart Settings */
{
    SendCommand("ShowStripSettings %c\n",newValue?'T':'F');
}

char* BranchErr::Csv(char *buffer,int buflen, const char *optFilename) /* PelaED Csv */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

char* BranchErr::Csv2(char *buffer,int buflen, const char *optFilename) /* PelaErr Csv */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv2\n");

	return QueryResponse(buffer,buflen,"Csv2 \"%s\"\n", optFilename );
}

void BranchErr::Fit() /* PelaED Chart Fit, */
{
    SendCommand("Fit\n");
}

void BranchErr::Reset() /* Reset position, */
{
    SendCommand("Reset\n");
}


/* ================================================================ */

double BranchErrCfg::getIntervalSeconds() /* Update interval */
{
    return QueryResponse_double("Interval?\n");
}

void BranchErrCfg::setIntervalSeconds(double newValue) /* Update interval */
{
    SendCommand("Interval %lf\n",newValue);
}

int BranchErrCfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchErrCfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}


/* ================================================================ */

/* ================================================================ */

double BranchErrChart::getBottomLogBER() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchErrChart::setBottomLogBER(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchErrChart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchErrChart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchErrChart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchErrChart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchErrChart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchErrChart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchErrChart::getHeightLogBER() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchErrChart::setHeightLogBER(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchErrChart::getLeftSeconds() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchErrChart::setLeftSeconds(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchErrChart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchErrChart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchErrChart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchErrChart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchErrChart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchErrChart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchErrChart::Scroll BranchErrChart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchErrChart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchErrChart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchErrChart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchErrChart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchErrChart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchErrChart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchErrChart::getWidthSeconds() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchErrChart::setWidthSeconds(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */

char *BranchMaxTChannel::getBinary(int *pcount) /* Binary Data, float[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

int BranchMaxTChannel::getBlockSize() /* Block Size */
{
    return QueryResponse_int("BlockSize?\n");
}

double BranchMaxTChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchMaxTChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchMaxTChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchMaxTChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchMaxTChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchMaxTChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchMaxTChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchMaxTChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchMaxTChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchMaxTChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchMaxTChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchMaxTChannel::getIntervalSeconds() /* Update interval */
{
    return QueryResponse_double("Interval?\n");
}

void BranchMaxTChannel::setIntervalSeconds(double newValue) /* Update interval */
{
    SendCommand("Interval %lf\n",newValue);
}

double BranchMaxTChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchMaxTChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchMaxTChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchMaxTChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchMaxTChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchMaxTChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchMaxTChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

int BranchMaxTChannel::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchMaxTChannel::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

char* BranchMaxTChannel::getReport(char *buffer,int buflen) /* Report-TotalBlocks */
{
    return QueryResponse(buffer,buflen,"Report?\n");
}

const char *BranchMaxTChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchMaxTChannel::Scroll BranchMaxTChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchMaxTChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

int BranchMaxTChannel::getSerial() /* Serial Number of Integration */
{
    return QueryResponse_int("Serial?\n");
}

bool BranchMaxTChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchMaxTChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchMaxTChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchMaxTChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchMaxTChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchMaxTChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchMaxTChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchMaxTChannel::Status BranchMaxTChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchMaxTChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchMaxTChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchMaxTChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchMaxTChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchMaxTChannel::Fit() /* Fit chart to data,  */
{
    SendCommand("Fit\n");
}

/* ================================================================ */

char *BranchModChannel::getBinary(int *pcount) /* Packed histogram binary data, char[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

int BranchModChannel::getBins() /* Histogram bin count */
{
    return QueryResponse_int("Bins?\n");
}

void BranchModChannel::setBins(int newValue) /* Histogram bin count */
{
    SendCommand("Bins %d\n",newValue);
}

double BranchModChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchModChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchModChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchModChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchModChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchModChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchModChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchModChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchModChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchModChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchModChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

int BranchModChannel::getHistory() /* Histogram history length */
{
    return QueryResponse_int("History?\n");
}

void BranchModChannel::setHistory(int newValue) /* Histogram history length */
{
    SendCommand("History %d\n",newValue);
}

char* BranchModChannel::getHReport(char *buffer,int buflen) /* Report-Pop,Ovrflw,Min,Max,Start,End,HistryLen */
{
    return QueryResponse(buffer,buflen,"HReport?\n");
}

int BranchModChannel::getHSeq() /* Histogram Sequence number */
{
    return QueryResponse_int("HSeq?\n");
}

double BranchModChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchModChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchModChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchModChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchModChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchModChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchModChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

int BranchModChannel::getModSize() /* Modulo Size */
{
    return QueryResponse_int("ModSize?\n");
}

void BranchModChannel::setModSize(int newValue) /* Modulo Size */
{
    SendCommand("ModSize %d\n",newValue);
}

const char *BranchModChannel::ModType_Strings[] =
{
    "Pattern",
    "Manual",
    0
};

BranchModChannel::ModType BranchModChannel::getModType()
{
    return (ModType)QueryResponse_enum(ModType_Strings,"ModType?\n");
}

void BranchModChannel::setModType(ModType newValue )
{
    SendCommand("ModType \"%s\"\n",ModType_Strings[(int)newValue]);
}

double BranchModChannel::getOffset() /* Histogram bin offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchModChannel::setOffset(double newValue) /* Histogram bin offset */
{
    SendCommand("Offset %lf\n",newValue);
}

char* BranchModChannel::getPattern(char *buffer,int buflen) /* Pattern Type */
{
    return QueryResponse(buffer,buflen,"Pattern?\n");
}

char* BranchModChannel::getReport(char *buffer,int buflen) /* Report-ModSize,ModPattern */
{
    return QueryResponse(buffer,buflen,"Report?\n");
}

double BranchModChannel::getResol() /* Histogram bin resolution */
{
    return QueryResponse_double("Resol?\n");
}

void BranchModChannel::setResol(double newValue) /* Histogram bin resolution */
{
    SendCommand("Resol %lf\n",newValue);
}

const char *BranchModChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchModChannel::Scroll BranchModChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchModChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

int BranchModChannel::getSeed() /* Pattern Seed */
{
    return QueryResponse_int("Seed?\n");
}

bool BranchModChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchModChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchModChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchModChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchModChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchModChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchModChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchModChannel::Status BranchModChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchModChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchModChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchModChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchModChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchModChannel::Fit() /* Fit chart to data,*/
{
    SendCommand("Fit\n");
}

void BranchModChannel::Reset() /* Reset chart, */
{
    SendCommand("Reset\n");
}

void BranchModChannel::MapRange(double fromValue, double toValue) /* Map histogram to fit range */
{
    SendCommand("MapRange %lf %lf\n");
}

/* ================================================================ */

char *BranchRLenChannel::getBinary(int *pcount) /* Histogram binary data, u32[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

long long BranchRLenChannel::getBitPop() /* Bit population */
{
    return QueryResponse_int64("BitPop?\n");
}

double BranchRLenChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchRLenChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchRLenChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchRLenChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchRLenChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchRLenChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchRLenChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchRLenChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchRLenChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchRLenChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchRLenChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchRLenChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchRLenChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchRLenChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchRLenChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchRLenChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchRLenChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchRLenChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchRLenChannel::RunType_Strings[] =
{
    "Space",
    "Mark",
    0
};

BranchRLenChannel::RunType BranchRLenChannel::getRunType()
{
    return (RunType)QueryResponse_enum(RunType_Strings,"RunType?\n");
}

void BranchRLenChannel::setRunType(RunType newValue )
{
    SendCommand("RunType \"%s\"\n",RunType_Strings[(int)newValue]);
}

const char *BranchRLenChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchRLenChannel::Scroll BranchRLenChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchRLenChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchRLenChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchRLenChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchRLenChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchRLenChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchRLenChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchRLenChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

const char *BranchRLenChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchRLenChannel::Status BranchRLenChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchRLenChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

int BranchRLenChannel::getUsed() /* Number Used */
{
    return QueryResponse_int("Used?\n");
}

double BranchRLenChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchRLenChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

char* BranchRLenChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchRLenChannel::Fit() /* Fit chart to data */
{
    SendCommand("Fit\n");
}

void BranchRLenChannel::Reset() /* Reset chart*/
{
     SendCommand("Reset\n");
}

/* ================================================================ */

long long BranchStat::getBits(int index) /* Bit Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Bits[%d]?\n",index);
}

bool BranchStat::getEnabled(int index) /* Enable processor */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("Enabled[%d]?\n",index);
}

double BranchStat::getMarkDensityPcnt(int index) /* Mark Density results */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("MarkDensity[%d]?\n",index);
}

long long BranchStat::getMarks(int index) /* Marks Count Result */
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return QueryResponse_int64("Marks[%d]?\n",index);
}

char* BranchStat::getReport(char *buffer,int buflen) /* Statistics report */
{
    return QueryResponse(buffer,buflen,"Report?\n");
}

const char *BranchStat::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchStat::Status BranchStat::getStatus(int index)
{
    if(index<0||index>=3) throw "[Index_Out_Of_Range]";
    return (Status)QueryResponse_enum(Status_Strings,"Status[%d]?\n",index);
}

/* ================================================================ */

char *BranchWanderChannel::getBinary(int *pcount) /* Histogram binary data, u32[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

long long BranchWanderChannel::getBitPop() /* Bit population */
{
    return QueryResponse_int64("BitPop?\n");
}

double BranchWanderChannel::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchWanderChannel::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchWanderChannel::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchWanderChannel::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchWanderChannel::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchWanderChannel::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchWanderChannel::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchWanderChannel::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

bool BranchWanderChannel::getEnabled() /* Enable processor */
{
    return QueryResponse_bool("Enabled?\n");
}

double BranchWanderChannel::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchWanderChannel::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchWanderChannel::getLargestPcnt() /* Largest disparity */
{
    return QueryResponse_double("Largest?\n");
}

double BranchWanderChannel::getLeft() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchWanderChannel::setLeft(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchWanderChannel::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchWanderChannel::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchWanderChannel::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchWanderChannel::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchWanderChannel::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchWanderChannel::Mode_Strings[] =
{
    "TwoLevel",
    "FourLevel",
    0
};

BranchWanderChannel::Mode BranchWanderChannel::getMode()
{
    return (Mode)QueryResponse_enum(Mode_Strings,"Mode?\n");
}

void BranchWanderChannel::setMode(Mode newValue )
{
    SendCommand("Mode \"%s\"\n",Mode_Strings[(int)newValue]);
}

const char *BranchWanderChannel::Order_Strings[] =
{
    "MsbFirst",
    "LsbFirst",
    0
};

BranchWanderChannel::Order BranchWanderChannel::getOrder()
{
    return (Order)QueryResponse_enum(Order_Strings,"Order?\n");
}

void BranchWanderChannel::setOrder(Order newValue )
{
    SendCommand("Order \"%s\"\n",Order_Strings[(int)newValue]);
}

const char *BranchWanderChannel::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchWanderChannel::Scroll BranchWanderChannel::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchWanderChannel::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchWanderChannel::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchWanderChannel::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchWanderChannel::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchWanderChannel::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

bool BranchWanderChannel::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchWanderChannel::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

double BranchWanderChannel::getSmallestPcnt() /* Smallest disparity */
{
    return QueryResponse_double("Smallest?\n");
}

const char *BranchWanderChannel::Status_Strings[] =
{
    "NotAvail",
    "Disabled",
    "Stopped",
    "Running",
    0
};

BranchWanderChannel::Status BranchWanderChannel::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

char* BranchWanderChannel::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchWanderChannel::getWidth() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchWanderChannel::setWidth(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

int BranchWanderChannel::getWindowBits() /* Bit window */
{
    return QueryResponse_int("Window?\n");
}

void BranchWanderChannel::setWindowBits(int newValue) /* Bit window */
{
    SendCommand("Window %d\n",newValue);
}

char* BranchWanderChannel::Csv(char *buffer,int buflen, const char *optFilename) /* Download CSV File */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchWanderChannel::Fit() /* Fit chart to data */
{
    SendCommand("Fit\n");
}

void BranchWanderChannel::Reset() /* Reset chart */
{
    SendCommand("Reset\n");
}

/* ================================================================ */

double BranchPelaEye::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchPelaEye::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchPelaEye::Running BranchPelaEye::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchPelaEye::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchPelaEye::getShowSettings() /* Show gui settings panel */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchPelaEye::setShowSettings(bool newValue) /* Show gui settings panel */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

void BranchPelaEye::Fit() /* Fit chart,  */
{
     SendCommand("Fit\n");
}

void BranchPelaEye::Reset() /* Reset position,  */
{
     SendCommand("Reset\n");
}


/* ================================================================ */

double BranchPelaEyeCfg::getBottom() /* Acquisition Voltage bottom */
{
    return QueryResponse_double("Bottom?\n");
}

double BranchPelaEyeCfg::getBright() /* Image Brightness */
{
    return QueryResponse_double("Bright?\n");
}

void BranchPelaEyeCfg::setBright(double newValue) /* Image Brightness */
{
    SendCommand("Bright %lf\n",newValue);
}

int BranchPelaEyeCfg::getColumns() /* Columns in Image */
{
    return QueryResponse_int("Columns?\n");
}

void BranchPelaEyeCfg::setColumns(int newValue) /* Columns in Image */
{
    SendCommand("Columns %d\n",newValue);
}

int BranchPelaEyeCfg::getDelaySettleUSec() /* Delay Settle Time */
{
    return QueryResponse_int("DelaySettle?\n");
}

void BranchPelaEyeCfg::setDelaySettleUSec(int newValue) /* Delay Settle Time */
{
    SendCommand("DelaySettle %d\n",newValue);
}

double BranchPelaEyeCfg::getDepthBits() /* E2 Depth */
{
    return QueryResponse_double("Depth?\n");
}

void BranchPelaEyeCfg::setDepthBits(double newValue) /* E2 Depth */
{
    SendCommand("Depth %lf\n",newValue);
}

int BranchPelaEyeCfg::getDivisions(int index) /* Number of divisions H,V */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_int("Divisions[%d]?\n",index);
}

void BranchPelaEyeCfg::setDivisions(int index,int newValue) /* Number of divisions H,V */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("Divisions[%d] %d\n",index,newValue);
}

bool BranchPelaEyeCfg::getEyeSync() /* Eye Sync mode */
{
    return QueryResponse_bool("EyeSync?\n");
}

double BranchPelaEyeCfg::getFloorNoSync() /* Floor threshold for No-Sync mode (500K) */
{
    return QueryResponse_double("FloorNoSync?\n");
}

void BranchPelaEyeCfg::setFloorNoSync(double newValue) /* Floor threshold for No-Sync mode (500K) */
{
    SendCommand("FloorNoSync %lf\n",newValue);
}

double BranchPelaEyeCfg::getFloorSync() /* Floor threshold for Sync mode (500K) */
{
    return QueryResponse_double("FloorSync?\n");
}

void BranchPelaEyeCfg::setFloorSync(double newValue) /* Floor threshold for Sync mode (500K) */
{
    SendCommand("FloorSync %lf\n",newValue);
}

double BranchPelaEyeCfg::getHeight() /* Acquisition Voltage height */
{
    return QueryResponse_double("Height?\n");
}

double BranchPelaEyeCfg::getOffset() /* Acquisition Time offset */
{
    return QueryResponse_double("Offset?\n");
}

double BranchPelaEyeCfg::getPerDiv(int index) /* Span per division */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("PerDiv[%d]?\n",index);
}

void BranchPelaEyeCfg::setPerDiv(int index,double newValue) /* Span per division */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("PerDiv[%d] %lf\n",index,newValue);
}

int BranchPelaEyeCfg::getPersist() /* Persistence */
{
    return QueryResponse_int("Persist?\n");
}

void BranchPelaEyeCfg::setPersist(int newValue) /* Persistence */
{
    SendCommand("Persist %d\n",newValue);
}

int BranchPelaEyeCfg::getRows() /* Rows in Image */
{
    return QueryResponse_int("Rows?\n");
}

void BranchPelaEyeCfg::setRows(int newValue) /* Rows in Image */
{
    SendCommand("Rows %d\n",newValue);
}

bool BranchPelaEyeCfg::getShowRaw() /* Show Raw Data */
{
    return QueryResponse_bool("ShowRaw?\n");
}

void BranchPelaEyeCfg::setShowRaw(bool newValue) /* Show Raw Data */
{
    SendCommand("ShowRaw %c\n",newValue?'T':'F');
}

double BranchPelaEyeCfg::getSpan() /* Acquisition Time span */
{
    return QueryResponse_double("Span?\n");
}

int BranchPelaEyeCfg::getThreshSettleUSec() /* Threshold Settle Time */
{
    return QueryResponse_int("ThreshSettle?\n");
}

void BranchPelaEyeCfg::setThreshSettleUSec(int newValue) /* Threshold Settle Time */
{
    SendCommand("ThreshSettle %d\n",newValue);
}

bool BranchPelaEyeCfg::getUseClip() /* Use Clipping for Floor level */
{
    return QueryResponse_bool("UseClip?\n");
}

void BranchPelaEyeCfg::setUseClip(bool newValue) /* Use Clipping for Floor level */
{
    SendCommand("UseClip %c\n",newValue?'T':'F');
}

/* ================================================================ */

char *BranchPelaEyeChannel::getBinary(int *pcount) /* Binary Data, char[] - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

double BranchPelaEyeChannel::getScalePcnt() /* Scale ratio percentage */
{
    return QueryResponse_double("Scale?\n");
}

void BranchPelaEyeChannel::setScalePcnt(double newValue) /* Scale ratio percentage */
{
    SendCommand("Scale %lf\n",newValue);
}

bool BranchPelaEyeChannel::getShow() /* Show trace */
{
    return QueryResponse_bool("Show?\n");
}

void BranchPelaEyeChannel::setShow(bool newValue) /* Show trace */
{
    SendCommand("Show %c\n",newValue?'T':'F');
}

double BranchPelaEyeChannel::getTimeOffsPS() /* Time Offset */
{
    return QueryResponse_double("TimeOffs?\n");
}

void BranchPelaEyeChannel::setTimeOffsPS(double newValue) /* Time Offset */
{
    SendCommand("TimeOffs %lf\n",newValue);
}

double BranchPelaEyeChannel::getVoltOffsMV() /* Volt Offset */
{
    return QueryResponse_double("VoltOffs?\n");
}

void BranchPelaEyeChannel::setVoltOffsMV(double newValue) /* Volt Offset */
{
    SendCommand("VoltOffs %lf\n",newValue);
}

char* BranchPelaEyeChannel::Jpg(char *buffer,int buflen, const char *optFilename) /* PelaEye Jpg Image*/
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Jpg\n");

	return QueryResponse(buffer,buflen,"Jpg \"%s\"\n", optFilename );
}

/* ================================================================ */

double BranchPelaEyeChart::getBottomMV() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchPelaEyeChart::setBottomMV(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchPelaEyeChart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchPelaEyeChart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchPelaEyeChart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchPelaEyeChart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

double BranchPelaEyeChart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchPelaEyeChart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchPelaEyeChart::getHeightMV() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchPelaEyeChart::setHeightMV(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchPelaEyeChart::getLeftPS() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchPelaEyeChart::setLeftPS(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchPelaEyeChart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchPelaEyeChart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchPelaEyeChart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchPelaEyeChart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchPelaEyeChart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchPelaEyeChart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchPelaEyeChart::Scroll BranchPelaEyeChart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchPelaEyeChart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchPelaEyeChart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchPelaEyeChart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchPelaEyeChart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchPelaEyeChart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchPelaEyeChart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchPelaEyeChart::getWidthPS() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchPelaEyeChart::setWidthPS(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

