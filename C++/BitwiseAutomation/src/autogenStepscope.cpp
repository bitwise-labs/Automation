/* autogenStepscope.cpp */
//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdio.h> /* fprintf, stderr */
#include <unistd.h> /* usleep */
#include <math.h> /* fabs */

#include "SocketDevice.h"
#include "autogenStepscope.h"

/* ================================================================ */

char* BranchCalib::getDelayFile(char *buffer,int buflen) /* Delay table file */
{
    return QueryResponse(buffer,buflen,"DelayFile?\n");
}

char* BranchCalib::getNoiseFile(char *buffer,int buflen) /* Noise table file */
{
    return QueryResponse(buffer,buflen,"NoiseFile?\n");
}

const char *BranchCalib::Status_Strings[] =
{
    "Ready",
    "Error",
    "Success",
    "Running",
    "Canceled",
    0
};

BranchCalib::Status BranchCalib::getStatus()
{
    return (Status)QueryResponse_enum(Status_Strings,"Status?\n");
}

void BranchCalib::Cancel() /* Cancel calibration */
{
    SendCommand("Cancel\n");
}

void BranchCalib::RunDelay() /* Run Delay calibration */
{
    SendCommand("RunDelay\n");
}

void BranchCalib::RunNoise() /* Run Noise calibration */
{
    SendCommand("RunNoise\n");
}

/* ================================================================ */

double BranchPulse::getAccAmplMV() /* Accessory pulser amplitude */
{
    return QueryResponse_double("AccAmpl?\n");
}

void BranchPulse::setAccAmplMV(double newValue) /* Accessory pulser amplitude */
{
    SendCommand("AccAmpl %lf\n",newValue);
}

const char *BranchPulse::AccWidth_Strings[] =
{
    "1",
    "2",
    "4",
    "8",
    "16",
    0
};

BranchPulse::AccWidth BranchPulse::getAccWidth()
{
    return (AccWidth)QueryResponse_enum(AccWidth_Strings,"AccWidth?\n");
}

void BranchPulse::setAccWidth(AccWidth newValue )
{
    SendCommand("AccWidth \"%s\"\n",AccWidth_Strings[(int)newValue]);
}

double BranchPulse::getAmplMV() /* Local Pulser amplitude */
{
    return QueryResponse_double("Ampl?\n");
}

void BranchPulse::setAmplMV(double newValue) /* Local Pulser amplitude */
{
    SendCommand("Ampl %lf\n",newValue);
}

double BranchPulse::getFreqMHz() /* Pulser frequency */
{
    return QueryResponse_double("Freq?\n");
}

int BranchPulse::getLength() /* Pulser length, sets period to 2X */
{
    return QueryResponse_int("Length?\n");
}

void BranchPulse::setLength(int newValue) /* Pulser length, sets period to 2X */
{
    SendCommand("Length %d\n",newValue);
}

const char *BranchPulse::Mode_Strings[] =
{
    "Off",
    "Local",
    "Remote",
    "Triggered",
    "Accessory",
    0
};

BranchPulse::Mode BranchPulse::getMode()
{
    return (Mode)QueryResponse_enum(Mode_Strings,"Mode?\n");
}

void BranchPulse::setMode(Mode newValue )
{
    SendCommand("Mode \"%s\"\n",Mode_Strings[(int)newValue]);
}

int BranchPulse::getResetDac() /* Delay Dac value during pulser reset */
{
    return QueryResponse_int("ResetDac?\n");
}

void BranchPulse::setResetDac(int newValue) /* Delay Dac value during pulser reset */
{
    SendCommand("ResetDac %d\n",newValue);
}

double BranchPulse::getSlaveAmplMV() /* Slave pulser amplitude */
{
    return QueryResponse_double("SlaveAmpl?\n");
}

void BranchPulse::setSlaveAmplMV(double newValue) /* Slave pulser amplitude */
{
    SendCommand("SlaveAmpl %lf\n",newValue);
}

char* BranchPulse::getSlaveIP(char *buffer,int buflen) /* Pulser Slave IP address */
{
    return QueryResponse(buffer,buflen,"SlaveIP?\n");
}

void BranchPulse::setSlaveIP(const char* newValue) /* Pulser Slave IP address */
{
    SendCommand("SlaveIP \"%s\"\n",newValue);
}

void BranchPulse::Reset() /* Pulser reset */
{
    SendCommand("Reset\n");
}

/* ================================================================ */

char *BranchS11::getBinaryIncident(int *pcount) /* Binary Incident Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryIncident?\n");
}

char *BranchS11::getBinaryMagn(int *pcount) /* Binary Magnitude Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryMagn?\n");
}

char *BranchS11::getBinaryReflected(int *pcount) /* Binary Reflected Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryReflected?\n");
}

double BranchS11::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchS11::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchS11::Running BranchS11::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchS11::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchS11::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchS11::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

char* BranchS11::getStatusMsg(char *buffer,int buflen) /* Status Message */
{
    return QueryResponse(buffer,buflen,"StatusMsg?\n");
}

char* BranchS11::FileSave(char *buffer,int buflen, const char *optFilename) /* S21 file save*/
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"FileSave\n");

	return QueryResponse(buffer,buflen,"FileSave \"%s\"\n", optFilename );
}

void BranchS11::Fit() /* S11 Chart Fit */
{
    SendCommand("Fit\n");
}

void BranchS11::Reset() /* Reset position */
{
    SendCommand("Reset\n");
}

/* ================================================================ */

bool BranchS11Cfg::getApplySmooth() /* Apply FFT Smoothing */
{
    return QueryResponse_bool("ApplySmooth?\n");
}

void BranchS11Cfg::setApplySmooth(bool newValue) /* Apply FFT Smoothing */
{
    SendCommand("ApplySmooth %c\n",newValue?'T':'F');
}

int BranchS11Cfg::getAvg() /* Averages */
{
    return QueryResponse_int("Avg?\n");
}

void BranchS11Cfg::setAvg(int newValue) /* Averages */
{
    SendCommand("Avg %d\n",newValue);
}

const char *BranchS11Cfg::FileFormat_Strings[] =
{
    "CSV",
    "S1P_RI",
    "S1P_DB",
    0
};

BranchS11Cfg::FileFormat BranchS11Cfg::getFileFormat()
{
    return (FileFormat)QueryResponse_enum(FileFormat_Strings,"FileFormat?\n");
}

void BranchS11Cfg::setFileFormat(FileFormat newValue )
{
    SendCommand("FileFormat \"%s\"\n",FileFormat_Strings[(int)newValue]);
}

double BranchS11Cfg::getOffsetGHz() /* Record Offset */
{
    return QueryResponse_double("Offset?\n");
}

int BranchS11Cfg::getPersist() /* Persistence */
{
    return QueryResponse_int("Persist?\n");
}

void BranchS11Cfg::setPersist(int newValue) /* Persistence */
{
    SendCommand("Persist %d\n",newValue);
}

int BranchS11Cfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchS11Cfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

bool BranchS11Cfg::getShowIncident() /* Show Incident trace */
{
    return QueryResponse_bool("ShowIncident?\n");
}

void BranchS11Cfg::setShowIncident(bool newValue) /* Show Incident trace */
{
    SendCommand("ShowIncident %c\n",newValue?'T':'F');
}

bool BranchS11Cfg::getShowReflected() /* Show Reflected trace */
{
    return QueryResponse_bool("ShowReflected?\n");
}

void BranchS11Cfg::setShowReflected(bool newValue) /* Show Reflected trace */
{
    SendCommand("ShowReflected %c\n",newValue?'T':'F');
}

bool BranchS11Cfg::getShowS11() /* Show S11 trace */
{
    return QueryResponse_bool("ShowS11?\n");
}

void BranchS11Cfg::setShowS11(bool newValue) /* Show S11 trace */
{
    SendCommand("ShowS11 %c\n",newValue?'T':'F');
}

int BranchS11Cfg::getSmoothWidth() /* FFT Smoothing width */
{
    return QueryResponse_int("SmoothWidth?\n");
}

void BranchS11Cfg::setSmoothWidth(int newValue) /* FFT Smoothing width */
{
    SendCommand("SmoothWidth %d\n",newValue);
}

double BranchS11Cfg::getSpanGHz() /* Record Span */
{
    return QueryResponse_double("Span?\n");
}

/* ================================================================ */

const char *BranchS11Chart::AxisX_Strings[] =
{
    "Linear",
    "Log",
    0
};

BranchS11Chart::AxisX BranchS11Chart::getAxisX()
{
    return (AxisX)QueryResponse_enum(AxisX_Strings,"AxisX?\n");
}

void BranchS11Chart::setAxisX(AxisX newValue )
{
    SendCommand("AxisX \"%s\"\n",AxisX_Strings[(int)newValue]);
}

double BranchS11Chart::getBottomDB() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchS11Chart::setBottomDB(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchS11Chart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchS11Chart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchS11Chart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchS11Chart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

const char *BranchS11Chart::Cursor1_Strings[] =
{
    "Manual",
    "AutoYS11",
    "AutoYIncident",
    "AutoYReflected",
    "AutoXS11",
    "AutoXIncident",
    "AutoXReflected",
    0
};

BranchS11Chart::Cursor1 BranchS11Chart::getCursor1()
{
    return (Cursor1)QueryResponse_enum(Cursor1_Strings,"Cursor1?\n");
}

void BranchS11Chart::setCursor1(Cursor1 newValue )
{
    SendCommand("Cursor1 \"%s\"\n",Cursor1_Strings[(int)newValue]);
}

const char *BranchS11Chart::Cursor2_Strings[] =
{
    "Manual",
    "AutoYS11",
    "AutoYIncident",
    "AutoYReflected",
    "AutoXS11",
    "AutoXIncident",
    "AutoXReflected",
    0
};

BranchS11Chart::Cursor2 BranchS11Chart::getCursor2()
{
    return (Cursor2)QueryResponse_enum(Cursor2_Strings,"Cursor2?\n");
}

void BranchS11Chart::setCursor2(Cursor2 newValue )
{
    SendCommand("Cursor2 \"%s\"\n",Cursor2_Strings[(int)newValue]);
}

double BranchS11Chart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchS11Chart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchS11Chart::getHeightDB() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchS11Chart::setHeightDB(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchS11Chart::getLeftGHz() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchS11Chart::setLeftGHz(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchS11Chart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchS11Chart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchS11Chart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchS11Chart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchS11Chart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchS11Chart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchS11Chart::Scroll BranchS11Chart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchS11Chart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchS11Chart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchS11Chart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchS11Chart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchS11Chart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchS11Chart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchS11Chart::getWidthGHz() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchS11Chart::setWidthGHz(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */

char *BranchS21::getBinaryDut(int *pcount) /* Binary Dut Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryDut?\n");
}

char *BranchS21::getBinaryMagn(int *pcount) /* Binary Magnitude Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryMagn?\n");
}

char *BranchS21::getBinaryThrough(int *pcount) /* Binary Through Results - Must free() return value */
{
    return QueryBinaryResponse(pcount,"BinaryThrough?\n");
}

double BranchS21::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchS21::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchS21::Running BranchS21::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchS21::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchS21::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchS21::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

char* BranchS21::getStatusMsg(char *buffer,int buflen) /* Status Message */
{
    return QueryResponse(buffer,buflen,"StatusMsg?\n");
}

char* BranchS21::FileSave(char *buffer,int buflen, const char *optFilename) /* S21 file save */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"FileSave\n");

	return QueryResponse(buffer,buflen,"FileSave \"%s\"\n", optFilename );
}

void BranchS21::Fit() /* S21 Chart Fit */
{
    SendCommand("Fit\n");
}

void BranchS21::Reset() /* Reset position*/
{
    SendCommand("Reset\n");
}

/* ================================================================ */

bool BranchS21Cfg::getApplySmooth() /* Apply FFT Smoothing */
{
    return QueryResponse_bool("ApplySmooth?\n");
}

void BranchS21Cfg::setApplySmooth(bool newValue) /* Apply FFT Smoothing */
{
    SendCommand("ApplySmooth %c\n",newValue?'T':'F');
}

int BranchS21Cfg::getAvg() /* Averages */
{
    return QueryResponse_int("Avg?\n");
}

void BranchS21Cfg::setAvg(int newValue) /* Averages */
{
    SendCommand("Avg %d\n",newValue);
}

const char *BranchS21Cfg::FileFormat_Strings[] =
{
    "CSV",
    "S1P_RI",
    "S1P_DB",
    0
};

BranchS21Cfg::FileFormat BranchS21Cfg::getFileFormat()
{
    return (FileFormat)QueryResponse_enum(FileFormat_Strings,"FileFormat?\n");
}

void BranchS21Cfg::setFileFormat(FileFormat newValue )
{
    SendCommand("FileFormat \"%s\"\n",FileFormat_Strings[(int)newValue]);
}

double BranchS21Cfg::getOffsetGHz() /* Record Offset */
{
    return QueryResponse_double("Offset?\n");
}

int BranchS21Cfg::getPersist() /* Persistence */
{
    return QueryResponse_int("Persist?\n");
}

void BranchS21Cfg::setPersist(int newValue) /* Persistence */
{
    SendCommand("Persist %d\n",newValue);
}

int BranchS21Cfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchS21Cfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

bool BranchS21Cfg::getShowDut() /* Show DUT trace */
{
    return QueryResponse_bool("ShowDut?\n");
}

void BranchS21Cfg::setShowDut(bool newValue) /* Show DUT trace */
{
    SendCommand("ShowDut %c\n",newValue?'T':'F');
}

bool BranchS21Cfg::getShowS21() /* Show S21 Trace */
{
    return QueryResponse_bool("ShowS21?\n");
}

void BranchS21Cfg::setShowS21(bool newValue) /* Show S21 Trace */
{
    SendCommand("ShowS21 %c\n",newValue?'T':'F');
}

bool BranchS21Cfg::getShowThrough() /* Show Through trace */
{
    return QueryResponse_bool("ShowThrough?\n");
}

void BranchS21Cfg::setShowThrough(bool newValue) /* Show Through trace */
{
    SendCommand("ShowThrough %c\n",newValue?'T':'F');
}

int BranchS21Cfg::getSmoothWidth() /* FFT Smoothing width */
{
    return QueryResponse_int("SmoothWidth?\n");
}

void BranchS21Cfg::setSmoothWidth(int newValue) /* FFT Smoothing width */
{
    SendCommand("SmoothWidth %d\n",newValue);
}

double BranchS21Cfg::getSpanGHz() /* Record Span */
{
    return QueryResponse_double("Span?\n");
}

/* ================================================================ */

const char *BranchS21Chart::AxisX_Strings[] =
{
    "Linear",
    "Log",
    0
};

BranchS21Chart::AxisX BranchS21Chart::getAxisX()
{
    return (AxisX)QueryResponse_enum(AxisX_Strings,"AxisX?\n");
}

void BranchS21Chart::setAxisX(AxisX newValue )
{
    SendCommand("AxisX \"%s\"\n",AxisX_Strings[(int)newValue]);
}

double BranchS21Chart::getBottomDB() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchS21Chart::setBottomDB(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchS21Chart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchS21Chart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchS21Chart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchS21Chart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

const char *BranchS21Chart::Cursor1_Strings[] =
{
    "Manual",
    "AutoYS21",
    "AutoYDut",
    "AutoYThrough",
    "AutoXS21",
    "AutoXDut",
    "AutoXThrough",
    0
};

BranchS21Chart::Cursor1 BranchS21Chart::getCursor1()
{
    return (Cursor1)QueryResponse_enum(Cursor1_Strings,"Cursor1?\n");
}

void BranchS21Chart::setCursor1(Cursor1 newValue )
{
    SendCommand("Cursor1 \"%s\"\n",Cursor1_Strings[(int)newValue]);
}

const char *BranchS21Chart::Cursor2_Strings[] =
{
    "Manual",
    "AutoYS21",
    "AutoYDut",
    "AutoYThrough",
    "AutoXS21",
    "AutoXDut",
    "AutoXThrough",
    0
};

BranchS21Chart::Cursor2 BranchS21Chart::getCursor2()
{
    return (Cursor2)QueryResponse_enum(Cursor2_Strings,"Cursor2?\n");
}

void BranchS21Chart::setCursor2(Cursor2 newValue )
{
    SendCommand("Cursor2 \"%s\"\n",Cursor2_Strings[(int)newValue]);
}

double BranchS21Chart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchS21Chart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchS21Chart::getHeightDB() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchS21Chart::setHeightDB(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchS21Chart::getLeftGHz() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchS21Chart::setLeftGHz(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchS21Chart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchS21Chart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchS21Chart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchS21Chart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchS21Chart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchS21Chart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchS21Chart::Scroll BranchS21Chart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchS21Chart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchS21Chart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchS21Chart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchS21Chart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchS21Chart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchS21Chart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchS21Chart::getWidthGHz() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchS21Chart::setWidthGHz(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */

char *BranchStep::getBinary(int *pcount) /* Binary Data - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

double BranchStep::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchStep::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchStep::Running BranchStep::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchStep::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchStep::getShowSettings() /* Show settings on gui */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchStep::setShowSettings(bool newValue) /* Show settings on gui */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

char* BranchStep::getStatusMsg(char *buffer,int buflen) /* Status Message */
{
    return QueryResponse(buffer,buflen,"StatusMsg?\n");
}

double BranchStep::getTimeFallPS() /* Time of falling edge */
{
    return QueryResponse_double("TimeFall?\n");
}

double BranchStep::getTimeRisePS() /* Time of rising edge */
{
    return QueryResponse_double("TimeRise?\n");
}

const char *BranchStep::AlignMode_Strings[] =
{
	"None",
	"0101",
	"0111",
	"0110",
	"0011",
	"0000",
	"1010",
	"1000",
	"1001",
	"1100",
	"1111",
	"CalNoiseLow",
	"CalNoiseHigh",
	"CalRefLow",
	"CalRefHigh",
	"FallingEdge",
	"RisingEdge",
    0
};

void BranchStep::Align(AlignMode mode, bool waitToComplete, double waitUntilAligningTimeout ) /* Step Align, */
{
    SendCommand("Align %s\n", AlignMode_Strings[(int)mode] );

	if( waitUntilAligningTimeout>0 )
	{
		double now = SocketDevice::timestamp();
		double timeout = now + waitUntilAligningTimeout;

		while( now<timeout && getRunning()==Running::Stop )
		{
			usleep( 10*1000 );
			now=SocketDevice::timestamp();
		}

		if( now>=timeout )
			throw "[Aligning_Timeout]";
	}

    if(waitToComplete)
    	WaitForAlignmentToComplete();
}

void BranchStep::WaitForAlignmentToComplete( double timeoutSec )
{
	double now = SocketDevice::timestamp();
	double timeout = now + timeoutSec;

	while( now<timeout && getRunning()!=Running::Stop )
	{
		usleep( 200*1000 ); /* poll 5 times per second */
		now=SocketDevice::timestamp();
	}

	if( now>=timeout )
		throw "[Alignment_Timeout]";
}

char* BranchStep::Csv(char *buffer,int buflen, const char *optFilename) /* Step Csv */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchStep::Fit() /* Step Chart Fit */
{
    SendCommand("Fit\n");
}

char *BranchStep::PulseStats() /* Pulse statistics - Must free() return value */
{
    return QueryBinaryResponse(0,"PulseStats\n");
}

/* ================================================================ */

bool BranchStepCfg::getAutoRefresh() /* Automatic refresh */
{
    return QueryResponse_bool("AutoRefresh?\n");
}

void BranchStepCfg::setAutoRefresh(bool newValue) /* Automatic refresh */
{
    SendCommand("AutoRefresh %c\n",newValue?'T':'F');
}

int BranchStepCfg::getAvg() /* Averages */
{
    return QueryResponse_int("Avg?\n");
}

void BranchStepCfg::setAvg(int newValue) /* Averages */
{
    SendCommand("Avg %d\n",newValue);
}

double BranchStepCfg::getBWGHz() /* BW Limit GHz */
{
    return QueryResponse_double("BW?\n");
}

void BranchStepCfg::setBWGHz(double newValue) /* BW Limit GHz */
{
    SendCommand("BW %lf\n",newValue);
}

int BranchStepCfg::getDepth() /* Sample Depth */
{
    return QueryResponse_int("Depth?\n");
}

void BranchStepCfg::setDepth(int newValue) /* Sample Depth */
{
    SendCommand("Depth %d\n",newValue);
}

const char *BranchStepCfg::DSPMode_Strings[] =
{
    "Off",
    "Differential",
    "SEPositive",
    "SENegative",
    0
};

BranchStepCfg::DSPMode BranchStepCfg::getDSPMode()
{
    return (DSPMode)QueryResponse_enum(DSPMode_Strings,"DSPMode?\n");
}

void BranchStepCfg::setDSPMode(DSPMode newValue )
{
    SendCommand("DSPMode \"%s\"\n",DSPMode_Strings[(int)newValue]);
}

const char *BranchStepCfg::NoiseMode_Strings[] =
{
    "Off",
    "Normal",
    "Double",
    0
};

BranchStepCfg::NoiseMode BranchStepCfg::getNoiseMode()
{
    return (NoiseMode)QueryResponse_enum(NoiseMode_Strings,"NoiseMode?\n");
}

void BranchStepCfg::setNoiseMode(NoiseMode newValue )
{
    SendCommand("NoiseMode \"%s\"\n",NoiseMode_Strings[(int)newValue]);
}

double BranchStepCfg::getOffsetPS() /* Record Offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchStepCfg::setOffsetPS(double newValue) /* Record Offset */
{
    SendCommand("Offset %lf\n",newValue);
}

int BranchStepCfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchStepCfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

double BranchStepCfg::getSpanPS() /* Record Span */
{
    return QueryResponse_double("Span?\n");
}

void BranchStepCfg::setSpanPS(double newValue) /* Record Span */
{
    SendCommand("Span %lf\n",newValue);
}

const char *BranchStepCfg::BaseAxis_Strings[] =
{
    "Pico",
    "Nano",
    0
};

BranchStepCfg::BaseAxis BranchStepCfg::getBaseAxis()
{
    return (BaseAxis)QueryResponse_enum(BaseAxis_Strings,"BaseAxis?\n");
}

void BranchStepCfg::setBaseAxis(BaseAxis newValue )
{
    SendCommand("BaseAxis \"%s\"\n",BaseAxis_Strings[(int)newValue]);
}

/* ================================================================ */

double BranchStepChart::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchStepChart::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchStepChart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchStepChart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchStepChart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchStepChart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

const char *BranchStepChart::Cursor1_Strings[] =
{
    "Manual",
    "AutoY",
    "AutoX",
    0
};

BranchStepChart::Cursor1 BranchStepChart::getCursor1()
{
    return (Cursor1)QueryResponse_enum(Cursor1_Strings,"Cursor1?\n");
}

void BranchStepChart::setCursor1(Cursor1 newValue )
{
    SendCommand("Cursor1 \"%s\"\n",Cursor1_Strings[(int)newValue]);
}

const char *BranchStepChart::Cursor2_Strings[] =
{
    "Manual",
    "AutoY",
    "AutoX",
    0
};

BranchStepChart::Cursor2 BranchStepChart::getCursor2()
{
    return (Cursor2)QueryResponse_enum(Cursor2_Strings,"Cursor2?\n");
}

void BranchStepChart::setCursor2(Cursor2 newValue )
{
    SendCommand("Cursor2 \"%s\"\n",Cursor2_Strings[(int)newValue]);
}

double BranchStepChart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchStepChart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchStepChart::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchStepChart::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchStepChart::getLeftPS() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchStepChart::setLeftPS(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchStepChart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchStepChart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchStepChart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchStepChart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchStepChart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchStepChart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchStepChart::Scroll BranchStepChart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchStepChart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchStepChart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchStepChart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchStepChart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchStepChart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchStepChart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchStepChart::getWidthPS() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchStepChart::setWidthPS(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */

char *BranchTdr::getBinary(int *pcount) /* Binary Data - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

const char *BranchTdr::CalState_Strings[] =
{
    "None",
    "Short",
    "Term",
    "Success",
    "Fail",
    0
};

BranchTdr::CalState BranchTdr::getCalState()
{
    return (CalState)QueryResponse_enum(CalState_Strings,"CalState?\n");
}

double BranchTdr::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

const char *BranchTdr::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchTdr::Running BranchTdr::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchTdr::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchTdr::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchTdr::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

bool BranchTdr::getShowCalibrations() /* Show Calibrations */
{
    return QueryResponse_bool("ShowCalibrations?\n");
}

void BranchTdr::setShowCalibrations(bool newValue) /* Show Calibrations */
{
    SendCommand("ShowCalibrations %c\n",newValue?'T':'F');
}

char* BranchTdr::getStatusMsg(char *buffer,int buflen) /* Status Message */
{
    return QueryResponse(buffer,buflen,"StatusMsg?\n");
}

void BranchTdr::CancelCal() /* Cancel calibration */
{
    SendCommand("CancelCal\n");
}

void BranchTdr::ClearCal() /* Clear calibration */
{
    SendCommand("ClearCal\n");
}

char* BranchTdr::Csv(char *buffer,int buflen, const char *optFilename) /* Tdr Csv */
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchTdr::Fit() /* Tdr Chart Fit*/
{
    SendCommand("Fit\n");
}

void BranchTdr::Reset() /* Reset position */
{
    SendCommand("Reset\n");
}

void BranchTdr::RunShortCal() /* Run Short calibration */
{
    SendCommand("RunShortCal\n");
}

void BranchTdr::RunTermCal() /* Run 50 Ohm calibration */
{
    SendCommand("RunTermCal\n");
}

void BranchTdr::SaveCal(const char *fileName) /* Save TDR calibration */
{
    SendCommand("SaveCal \"%s\"\n",fileName);
}

char* BranchTdr::getCalFile(char *buffer,int buflen) /* Full path of TDR calibration table file  */
{
    return QueryResponse(buffer,buflen,"CalFile?\n");
}

char* BranchTdr::getLoadCalFile(char *buffer,int buflen) /* TDR calibration load file */
{
    return QueryResponse(buffer,buflen,"LoadCalFile?\n");
}

void BranchTdr::setLoadCalFile(const char *fileName) /* TDR calibration load file */
{
    SendCommand("LoadCalFile \"%s\"\n",fileName);
}

/* Deprecated */
char* BranchTdr::getShortCalFile(char *buffer,int buflen) /* Short cal table file */
{
    return QueryResponse(buffer,buflen,"ShortCalFile?\n");
}

/* Deprecated */
char* BranchTdr::getTermCalFile(char *buffer,int buflen) /* Term cal table file */
{
    return QueryResponse(buffer,buflen,"TermCalFile?\n");
}

/* Deprecated */
void BranchTdr::SaveShortCal(const char *fileName) /* Save short calibration */
{
    SendCommand("SaveShortCal \"%s\"\n",fileName);
}

/* Deprecated */
void BranchTdr::SaveTermCal(const char *fileName) /* Save termination calibration */
{
    SendCommand("SaveTermCal \"%s\"\n",fileName);
}

/* Deprecated */
void BranchTdr::LoadShortCal(const char *fileName) /* Load short calibration */
{
    SendCommand("LoadShortCal \"%s\"\n",fileName);
}

/* Deprecated */
void BranchTdr::LoadTermCal(const char *fileName) /* Load termination calibration */
{
    SendCommand("LoadTermCal \"%s\"\n",fileName);
}

/* ================================================================ */

bool BranchTdrCfg::getAutoRefresh() /* Automatic refresh */
{
    return QueryResponse_bool("AutoRefresh?\n");
}

void BranchTdrCfg::setAutoRefresh(bool newValue) /* Automatic refresh */
{
    SendCommand("AutoRefresh %c\n",newValue?'T':'F');
}

int BranchTdrCfg::getAvg() /* Avergages */
{
    return QueryResponse_int("Avg?\n");
}

void BranchTdrCfg::setAvg(int newValue) /* Avergages */
{
    SendCommand("Avg %d\n",newValue);
}

double BranchTdrCfg::getBWGHz() /* BW Limit GHz */
{
    return QueryResponse_double("BW?\n");
}

void BranchTdrCfg::setBWGHz(double newValue) /* BW Limit GHz */
{
    SendCommand("BW %lf\n",newValue);
}

int BranchTdrCfg::getCalAvg() /* Calibration averages */
{
    return QueryResponse_int("CalAvg?\n");
}

void BranchTdrCfg::setCalAvg(int newValue) /* Calibration averages */
{
    SendCommand("CalAvg %d\n",newValue);
}

int BranchTdrCfg::getCalDepth() /* Calibration sample depth */
{
    return QueryResponse_int("CalDepth?\n");
}

void BranchTdrCfg::setCalDepth(int newValue) /* Calibration sample depth */
{
    SendCommand("CalDepth %d\n",newValue);
}

int BranchTdrCfg::getCalReclen() /* Calibration record length */
{
    return QueryResponse_int("CalReclen?\n");
}

void BranchTdrCfg::setCalReclen(int newValue) /* Calibration record length */
{
    SendCommand("CalReclen %d\n",newValue);
}

const char *BranchTdrCfg::Edge_Strings[] =
{
    "Rising",
    "Falling",
    0
};

BranchTdrCfg::Edge BranchTdrCfg::getEdge()
{
    return (Edge)QueryResponse_enum(Edge_Strings,"Edge?\n");
}

void BranchTdrCfg::setEdge(Edge newValue )
{
    SendCommand("Edge \"%s\"\n",Edge_Strings[(int)newValue]);
}

double BranchTdrCfg::getOffsetPS() /* Record Offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchTdrCfg::setOffsetPS(double newValue) /* Record Offset */
{
    SendCommand("Offset %lf\n",newValue);
}

int BranchTdrCfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchTdrCfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

double BranchTdrCfg::getSpanPS() /* Record Span */
{
    return QueryResponse_double("Span?\n");
}

void BranchTdrCfg::setSpanPS(double newValue) /* Record Span */
{
    SendCommand("Span %lf\n",newValue);
}

double BranchTdrCfg::getTermOhms() /* Termination Impedance */
{
    return QueryResponse_double("Term?\n");
}

void BranchTdrCfg::setTermOhms(double newValue) /* Termination Impedance */
{
    SendCommand("Term %lf\n",newValue);
}

bool BranchTdrCfg::getUseBeforeStep() /* Use estimated level before step */
{
    return QueryResponse_bool("UseBeforeStep?\n");
}

void BranchTdrCfg::setUseBeforeStep(bool newValue) /* Use estimated level before step */
{
    SendCommand("UseBeforeStep %c\n",newValue?'T':'F');
}

bool BranchTdrCfg::getUseDiff() /* Use Differential */
{
    return QueryResponse_bool("UseDiff?\n");
}

void BranchTdrCfg::setUseDiff(bool newValue) /* Use Differential */
{
    SendCommand("UseDiff %c\n",newValue?'T':'F');
}

const char *BranchTdrCfg::BaseAxis_Strings[] =
{
    "Pico",
    "Nano",
    "Inch",
    "Centimeter",
    0
};

BranchTdrCfg::BaseAxis BranchTdrCfg::getBaseAxis()
{
    return (BaseAxis)QueryResponse_enum(BaseAxis_Strings,"BaseAxis?\n");
}

void BranchTdrCfg::setBaseAxis(BaseAxis newValue )
{
    SendCommand("BaseAxis \"%s\"\n",BaseAxis_Strings[(int)newValue]);
}

double BranchTdrCfg::getPermittivity() /* Relative permittivity, aka Dielectric constant, FR4 is 3.8 to 4.8 */
{
    return QueryResponse_double("Permittivity?\n");
}

void BranchTdrCfg::setPermittivity(double newValue) /* Relative permittivity, aka Dielectric constant, FR4 is 3.8 to 4.8 */
{
    SendCommand("Permittivity %lf\n",newValue);
}


double BranchTdrCfg::getResistivityOM() /* Resistivity, series resistance ohm per meter, requires Permittivity setting */
{
    return QueryResponse_double("Resistivity?\n");
}

void BranchTdrCfg::setResistivityOM(double newValue) /* Resistivity, series resistance ohm per meter, requires Permittivity setting */
{
    SendCommand("Resistivity %lf\n",newValue);
}



/* ================================================================ */

double BranchTdrChart::getBottomOhms() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchTdrChart::setBottomOhms(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchTdrChart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchTdrChart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchTdrChart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchTdrChart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

const char *BranchTdrChart::Cursor1_Strings[] =
{
    "Manual",
    "AutoY",
    "AutoX",
    "S11Window",  /* 03-15-2024 */
    0
};

BranchTdrChart::Cursor1 BranchTdrChart::getCursor1()
{
    return (Cursor1)QueryResponse_enum(Cursor1_Strings,"Cursor1?\n");
}

void BranchTdrChart::setCursor1(Cursor1 newValue )
{
    SendCommand("Cursor1 \"%s\"\n",Cursor1_Strings[(int)newValue]);
}

const char *BranchTdrChart::Cursor2_Strings[] =
{
    "Manual",
    "AutoY",
    "AutoX",
    "S11Window",  /* 03-15-2024 */
    0
};

BranchTdrChart::Cursor2 BranchTdrChart::getCursor2()
{
    return (Cursor2)QueryResponse_enum(Cursor2_Strings,"Cursor2?\n");
}

void BranchTdrChart::setCursor2(Cursor2 newValue )
{
    SendCommand("Cursor2 \"%s\"\n",Cursor2_Strings[(int)newValue]);
}

double BranchTdrChart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchTdrChart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchTdrChart::getHeightOhms() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchTdrChart::setHeightOhms(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchTdrChart::getLeftPS() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchTdrChart::setLeftPS(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchTdrChart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchTdrChart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchTdrChart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchTdrChart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchTdrChart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchTdrChart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchTdrChart::Scroll BranchTdrChart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchTdrChart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchTdrChart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchTdrChart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchTdrChart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchTdrChart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchTdrChart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchTdrChart::getWidthPS() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchTdrChart::setWidthPS(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */
/* BranchTdrWindow ... 03-15-2024 */

bool BranchTdrWindow::getEnabled() /* Enable using Region of interest window */
{
    return QueryResponse_bool("Enabled?\n");
}

void BranchTdrWindow::setEnabled(bool newValue) /* Enable using Region of interest window */
{
    SendCommand("Enabled %c\n",newValue?'T':'F');
}

double BranchTdrWindow::getRangePS(int index) /* Region of interest window range */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Range[%d]?\n",index);
}

void BranchTdrWindow::setRangePS(int index,double newValue) /* Region of interest window range */
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("Range[%d] %lf\n",index,newValue);
}

void BranchTdrWindow::setRangePS(double from_value, double to_value )
{
    SendCommand("Range { %lf, %lf }\n",from_value, to_value);
}

void BranchTdrWindow::Clear() /* Clear region of interest window range, Todo:add arguments */
{
    SendCommand("Clear\n");
}

void BranchTdrWindow::Fit() /* Fit region of interest window range to current acquisition, Todo:add arguments */
{
    SendCommand("Fit\n");
}

/* ================================================================ */

double BranchTdt::getAlignPS() /* Alignment between DUT and REF */
{
    return QueryResponse_double("Align?\n");
}

char *BranchTdt::getBinary(int *pcount) /* Binary Data - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Binary?\n");
}

const char *BranchTdt::CalState_Strings[] =
{
    "None",
    "Through",
    "Success",
    "Fail",
    0
};

BranchTdt::CalState BranchTdt::getCalState()
{
    return (CalState)QueryResponse_enum(CalState_Strings,"CalState?\n");
}

double BranchTdt::getElapsedSeconds() /* Elapsed Time Seconds */
{
    return QueryResponse_double("Elapsed?\n");
}

char *BranchTdt::getRef(int *pcount) /* Binary Ref Data - Must free() return value */
{
    return QueryBinaryResponse(pcount,"Ref?\n");
}

void BranchTdt::setRef(char *buffer,int count) /* Binary Ref Data */
{
    SendBinaryCommand(buffer,count,"Ref\n");
}

const char *BranchTdt::Running_Strings[] =
{
    "Stop",
    "Run",
    "RunOnce",
    0
};

BranchTdt::Running BranchTdt::getRunning()
{
    return (Running)QueryResponse_enum(Running_Strings,"Running?\n");
}

int BranchTdt::getSequence() /* Run Sequence */
{
    return QueryResponse_int("Sequence?\n");
}

bool BranchTdt::getShowDut() /* Show TDR trace */
{
    return QueryResponse_bool("ShowDut?\n");
}

void BranchTdt::setShowDut(bool newValue) /* Show TDR trace */
{
    SendCommand("ShowDut %c\n",newValue?'T':'F');
}

bool BranchTdt::getShowSettings() /* Show Settings */
{
    return QueryResponse_bool("ShowSettings?\n");
}

void BranchTdt::setShowSettings(bool newValue) /* Show Settings */
{
    SendCommand("ShowSettings %c\n",newValue?'T':'F');
}

bool BranchTdt::getShowCalibrations() /* Show Calibrations */
{
    return QueryResponse_bool("ShowCalibrations?\n");
}

void BranchTdt::setShowCalibrations(bool newValue) /* Show Calibrations */
{
    SendCommand("ShowCalibrations %c\n",newValue?'T':'F');
}

bool BranchTdt::getShowThrough() /* Show Reference trace */
{
    return QueryResponse_bool("ShowThrough?\n");
}

void BranchTdt::setShowThrough(bool newValue) /* Show Reference trace */
{
    SendCommand("ShowThrough %c\n",newValue?'T':'F');
}

char* BranchTdt::getStatusMsg(char *buffer,int buflen) /* Status Message */
{
    return QueryResponse(buffer,buflen,"StatusMsg?\n");
}

void BranchTdt::CancelCal() /* Cancel calibration */
{
    SendCommand("CancelCal\n");
}

void BranchTdt::ClearCal() /* Clear calibration */
{
    SendCommand("ClearCal\n");
}

char* BranchTdt::Csv(char *buffer,int buflen, const char *optFilename) /* Tdt Csv*/
{
	if( optFilename==NULL || optFilename[0]==0 )
		return QueryResponse(buffer,buflen,"Csv\n");

	return QueryResponse(buffer,buflen,"Csv \"%s\"\n", optFilename );
}

void BranchTdt::Fit() /* Tdt Chart Fit */
{
    SendCommand("Fit\n");
}

void BranchTdt::Reset() /* Reset position */
{
    SendCommand("Reset\n");
}

void BranchTdt::RunThroughCal() /* Run Through calibration */
{
    SendCommand("RunThroughCal\n");
}

/* Deprecated */
void BranchTdt::SaveThroughCal(const char *fileName) /* Save through calibration, deprecated, use Tdt:SaveCal.*/
{
    SendCommand("SaveThroughCal \"%s\"\n", fileName);
}

/* Deprecated */
void BranchTdt::LoadThroughCal(const char *fileName) /* Load through calibration, deprecated, use Tdt:CalFile. */
{
    SendCommand("LoadThroughCal \"%s\"\n", fileName);
}

/* Deprecated */
char* BranchTdt::getThroughCalFile(char *buffer,int buflen) /* Through cal table file, deprecated, use Tdt:CalFile. */
{
    return QueryResponse(buffer,buflen,"ThroughCalFile?\n");
}

void BranchTdt::SaveCal(const char *fileName) /* Save TDT calibration */
{
    SendCommand("SaveCal \"%s\"\n", fileName);
}

char* BranchTdt::getCalFile(char *buffer,int buflen) /* Full path of TDT calibration table file. */
{
    return QueryResponse(buffer,buflen,"CalFile?\n");
}

char* BranchTdt::getLoadCalFile(char *buffer,int buflen) /* TDT calibration load file */
{
    return QueryResponse(buffer,buflen,"CalFile?\n");
}

void BranchTdt::setLoadCalFile(const char *fileName) /* TDT calibration load file */
{
    SendCommand("LoadCalFile \"%s\"\n",fileName);
}

/* ================================================================ */

bool BranchTdtCfg::getAlignRef() /* Align Reference Step */
{
    return QueryResponse_bool("AlignRef?\n");
}

void BranchTdtCfg::setAlignRef(bool newValue) /* Align Reference Step */
{
    SendCommand("AlignRef %c\n",newValue?'T':'F');
}

bool BranchTdtCfg::getAutoRefresh() /* Automatic refresh */
{
    return QueryResponse_bool("AutoRefresh?\n");
}

void BranchTdtCfg::setAutoRefresh(bool newValue) /* Automatic refresh */
{
    SendCommand("AutoRefresh %c\n",newValue?'T':'F');
}

int BranchTdtCfg::getAvg() /* Avergages */
{
    return QueryResponse_int("Avg?\n");
}

void BranchTdtCfg::setAvg(int newValue) /* Avergages */
{
    SendCommand("Avg %d\n",newValue);
}

double BranchTdtCfg::getBWGHz() /* BW Limit GHz */
{
    return QueryResponse_double("BW?\n");
}

void BranchTdtCfg::setBWGHz(double newValue) /* BW Limit GHz */
{
    SendCommand("BW %lf\n",newValue);
}

int BranchTdtCfg::getCalAvg() /* Calibration averages */
{
    return QueryResponse_int("CalAvg?\n");
}

void BranchTdtCfg::setCalAvg(int newValue) /* Calibration averages */
{
    SendCommand("CalAvg %d\n",newValue);
}

int BranchTdtCfg::getCalDepth() /* Calibration sample depth */
{
    return QueryResponse_int("CalDepth?\n");
}

void BranchTdtCfg::setCalDepth(int newValue) /* Calibration sample depth */
{
    SendCommand("CalDepth %d\n",newValue);
}

int BranchTdtCfg::getCalReclen() /* Calibration record length */
{
    return QueryResponse_int("CalReclen?\n");
}

void BranchTdtCfg::setCalReclen(int newValue) /* Calibration record length */
{
    SendCommand("CalReclen %d\n",newValue);
}

const char *BranchTdtCfg::DSPMode_Strings[] =
{
    "Off",
    "Differential",
    "SEPositive",
    "SENegative",
    0
};

BranchTdtCfg::DSPMode BranchTdtCfg::getDSPMode()
{
    return (DSPMode)QueryResponse_enum(DSPMode_Strings,"DSPMode?\n");
}

void BranchTdtCfg::setDSPMode(DSPMode newValue )
{
    SendCommand("DSPMode \"%s\"\n",DSPMode_Strings[(int)newValue]);
}

const char *BranchTdtCfg::Edge_Strings[] =
{
    "Rising",
    "Falling",
    0
};

BranchTdtCfg::Edge BranchTdtCfg::getEdge()
{
    return (Edge)QueryResponse_enum(Edge_Strings,"Edge?\n");
}

void BranchTdtCfg::setEdge(Edge newValue )
{
    SendCommand("Edge \"%s\"\n",Edge_Strings[(int)newValue]);
}

double BranchTdtCfg::getOffsetPS() /* Record Offset */
{
    return QueryResponse_double("Offset?\n");
}

void BranchTdtCfg::setOffsetPS(double newValue) /* Record Offset */
{
    SendCommand("Offset %lf\n",newValue);
}

int BranchTdtCfg::getReclen() /* Record Length */
{
    return QueryResponse_int("Reclen?\n");
}

void BranchTdtCfg::setReclen(int newValue) /* Record Length */
{
    SendCommand("Reclen %d\n",newValue);
}

double BranchTdtCfg::getSpanPS() /* Record Span */
{
    return QueryResponse_double("Span?\n");
}

void BranchTdtCfg::setSpanPS(double newValue) /* Record Span */
{
    SendCommand("Span %lf\n",newValue);
}

const char *BranchTdtCfg::BaseAxis_Strings[] =
{
    "Pico",
    "Nano",
    0
};

BranchTdtCfg::BaseAxis BranchTdtCfg::getBaseAxis()
{
    return (BaseAxis)QueryResponse_enum(BaseAxis_Strings,"BaseAxis?\n");
}

void BranchTdtCfg::setBaseAxis(BaseAxis newValue )
{
    SendCommand("BaseAxis \"%s\"\n",BaseAxis_Strings[(int)newValue]);
}
/* ================================================================ */

double BranchTdtChart::getBottom() /* Chart Bottom */
{
    return QueryResponse_double("Bottom?\n");
}

void BranchTdtChart::setBottom(double newValue) /* Chart Bottom */
{
    SendCommand("Bottom %lf\n",newValue);
}

bool BranchTdtChart::getCursAvail(int index) /* Chart Cursor Available */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursAvail[%d]?\n",index);
}

bool BranchTdtChart::getCursEnabled(int index) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("CursEnabled[%d]?\n",index);
}

void BranchTdtChart::setCursEnabled(int index,bool newValue) /* Chart Cursor Enabled */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursEnabled[%d] %c\n",index,newValue?'T':'F');
}

char* BranchTdtChart::getCursLabel(int index,char *buffer,int buflen) /* Chart Cursor Label */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse(buffer,buflen,"CursLabel[%d]?\n",index);
}

const char *BranchTdtChart::Cursor1_Strings[] =
{
    "Manual",
    "AutoYDut",
    "AutoYThrough",
    "AutoXDut",
    "AutoXThrough",
    0
};

BranchTdtChart::Cursor1 BranchTdtChart::getCursor1()
{
    return (Cursor1)QueryResponse_enum(Cursor1_Strings,"Cursor1?\n");
}

void BranchTdtChart::setCursor1(Cursor1 newValue )
{
    SendCommand("Cursor1 \"%s\"\n",Cursor1_Strings[(int)newValue]);
}

const char *BranchTdtChart::Cursor2_Strings[] =
{
    "Manual",
    "AutoYDut",
    "AutoYThrough",
    "AutoXDut",
    "AutoXThrough",
    0
};

BranchTdtChart::Cursor2 BranchTdtChart::getCursor2()
{
    return (Cursor2)QueryResponse_enum(Cursor2_Strings,"Cursor2?\n");
}

void BranchTdtChart::setCursor2(Cursor2 newValue )
{
    SendCommand("Cursor2 \"%s\"\n",Cursor2_Strings[(int)newValue]);
}

double BranchTdtChart::getCursValue(int index) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("CursValue[%d]?\n",index);
}

void BranchTdtChart::setCursValue(int index,double newValue) /* Chart Cursor Value */
{
    if(index<0||index>=11) throw "[Index_Out_Of_Range]";
    SendCommand("CursValue[%d] %lf\n",index,newValue);
}

double BranchTdtChart::getHeight() /* Chart Height */
{
    return QueryResponse_double("Height?\n");
}

void BranchTdtChart::setHeight(double newValue) /* Chart Height */
{
    SendCommand("Height %lf\n",newValue);
}

double BranchTdtChart::getLeftPS() /* Chart Left */
{
    return QueryResponse_double("Left?\n");
}

void BranchTdtChart::setLeftPS(double newValue) /* Chart Left */
{
    SendCommand("Left %lf\n",newValue);
}

double BranchTdtChart::getLimits(int index) /* Chart Limits (LRBT) */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Limits[%d]?\n",index);
}

bool BranchTdtChart::getLocked() /* Chart Locked */
{
    return QueryResponse_bool("Locked?\n");
}

void BranchTdtChart::setLocked(bool newValue) /* Chart Locked */
{
    SendCommand("Locked %c\n",newValue?'T':'F');
}

bool BranchTdtChart::getLogscale() /* Chart LogScale */
{
    return QueryResponse_bool("Logscale?\n");
}

void BranchTdtChart::setLogscale(bool newValue) /* Chart LogScale */
{
    SendCommand("Logscale %c\n",newValue?'T':'F');
}

const char *BranchTdtChart::Scroll_Strings[] =
{
    "None",
    "X1",
    "X2",
    "X3",
    "X4",
    "DX12",
    "DX34",
    "XPan",
    "XScale",
    "Y1",
    "Y2",
    "Y3",
    "Y4",
    "DY12",
    "DY34",
    "YPan",
    "YScale",
    "P1",
    "P2",
    "P3",
    0
};

BranchTdtChart::Scroll BranchTdtChart::getScroll()
{
    return (Scroll)QueryResponse_enum(Scroll_Strings,"Scroll?\n");
}

void BranchTdtChart::setScroll(Scroll newValue )
{
    SendCommand("Scroll \"%s\"\n",Scroll_Strings[(int)newValue]);
}

bool BranchTdtChart::getShowMemory() /* Show memories */
{
    return QueryResponse_bool("ShowMemory?\n");
}

void BranchTdtChart::setShowMemory(bool newValue) /* Show memories */
{
    SendCommand("ShowMemory %c\n",newValue?'T':'F');
}

bool BranchTdtChart::getShowOverlays() /* Show overlays */
{
    return QueryResponse_bool("ShowOverlays?\n");
}

void BranchTdtChart::setShowOverlays(bool newValue) /* Show overlays */
{
    SendCommand("ShowOverlays %c\n",newValue?'T':'F');
}

char* BranchTdtChart::getTitle(char *buffer,int buflen) /* Chart Title */
{
    return QueryResponse(buffer,buflen,"Title?\n");
}

double BranchTdtChart::getWidthPS() /* Chart Width */
{
    return QueryResponse_double("Width?\n");
}

void BranchTdtChart::setWidthPS(double newValue) /* Chart Width */
{
    SendCommand("Width %lf\n",newValue);
}

/* ================================================================ */
/* EOF */
