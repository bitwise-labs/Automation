/* autogenAccessory.cpp */
//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdio.h> /* fprintf, stderr */

#include "autogenAccessory.h"

/* ================================================================ */

bool BranchAcc::getIsAttached() /* Probe is attached */
{
    return QueryResponse_bool("IsAttached?\n");
}

const char *BranchAcc::Type_Strings[] =
{
    "None",
    "DDR5",
    "Pulser",
    0
};

BranchAcc::Type BranchAcc::getType()
{
    return (Type)QueryResponse_enum(Type_Strings,"Type?\n");
}

void BranchAcc::setType(Type newValue )
{
    SendCommand("Type \"%s\"\n",Type_Strings[(int)newValue]);
}


/* ================================================================ */

const char *BranchAccDDR::CardType_Strings[] =
{
    "RDIMM",
    "LRDIMM",
    "COMBO",
    0
};

BranchAccDDR::CardType BranchAccDDR::getCardType()
{
    return (CardType)QueryResponse_enum(CardType_Strings,"CardType?\n");
}

void BranchAccDDR::setCardType(CardType newValue )
{
    SendCommand("CardType \"%s\"\n",CardType_Strings[(int)newValue]);
}

const char *BranchAccDDR::Channel_Strings[] =
{
    "ChA",
    "ChB",
    0
};

BranchAccDDR::Channel BranchAccDDR::getChannel()
{
    return (Channel)QueryResponse_enum(Channel_Strings,"Channel?\n");
}

void BranchAccDDR::setChannel(Channel newValue )
{
    SendCommand("Channel \"%s\"\n",Channel_Strings[(int)newValue]);
}

const char *BranchAccDDR::ConnectClock_Strings[] =
{
    "ClockSignals",
    "DataSignals",
    "CommandSignals",
    "CK",
    "DQS0_A",
    "DQS1_A",
    "DQS2_A",
    "DQS3_A",
    "DQS4_A",
    "DQS5_A",
    "DQS6_A",
    "DQS7_A",
    "DQS8_A",
    "DQS9_A",
    "DQS0_B",
    "DQS1_B",
    "DQS2_B",
    "DQS3_B",
    "DQS4_B",
    "DQS5_B",
    "DQS6_B",
    "DQS7_B",
    "DQS8_B",
    "DQS9_B",
    "DQ0_A",
    "DQ1_A",
    "DQ2_A",
    "DQ3_A",
    "DQ4_A",
    "DQ5_A",
    "DQ6_A",
    "DQ7_A",
    "DQ8_A",
    "DQ9_A",
    "DQ10_A",
    "DQ11_A",
    "DQ12_A",
    "DQ13_A",
    "DQ14_A",
    "DQ15_A",
    "DQ16_A",
    "DQ17_A",
    "DQ18_A",
    "DQ19_A",
    "DQ20_A",
    "DQ21_A",
    "DQ22_A",
    "DQ23_A",
    "DQ24_A",
    "DQ25_A",
    "DQ26_A",
    "DQ27_A",
    "DQ28_A",
    "DQ29_A",
    "DQ30_A",
    "DQ31_A",
    "DQ0_B",
    "DQ1_B",
    "DQ2_B",
    "DQ3_B",
    "DQ4_B",
    "DQ5_B",
    "DQ6_B",
    "DQ7_B",
    "DQ8_B",
    "DQ9_B",
    "DQ10_B",
    "DQ11_B",
    "DQ12_B",
    "DQ13_B",
    "DQ14_B",
    "DQ15_B",
    "DQ16_B",
    "DQ17_B",
    "DQ18_B",
    "DQ19_B",
    "DQ20_B",
    "DQ21_B",
    "DQ22_B",
    "DQ23_B",
    "DQ24_B",
    "DQ25_B",
    "DQ26_B",
    "DQ27_B",
    "DQ28_B",
    "DQ29_B",
    "DQ30_B",
    "DQ31_B",
    "CA0_A",
    "CA1_A",
    "CA2_A",
    "CA3_A",
    "CA4_A",
    "CA5_A",
    "CA6_A",
    "CA0_B",
    "CA1_B",
    "CA2_B",
    "CA3_B",
    "CA4_B",
    "CA5_B",
    "CA6_B",
    0
};

BranchAccDDR::ConnectClock BranchAccDDR::getConnectClock()
{
    return (ConnectClock)QueryResponse_enum(ConnectClock_Strings,"ConnectClock?\n");
}

const char *BranchAccDDR::ConnectData_Strings[] =
{
    "ClockSignals",
    "DataSignals",
    "CommandSignals",
    "CK",
    "DQS0_A",
    "DQS1_A",
    "DQS2_A",
    "DQS3_A",
    "DQS4_A",
    "DQS5_A",
    "DQS6_A",
    "DQS7_A",
    "DQS8_A",
    "DQS9_A",
    "DQS0_B",
    "DQS1_B",
    "DQS2_B",
    "DQS3_B",
    "DQS4_B",
    "DQS5_B",
    "DQS6_B",
    "DQS7_B",
    "DQS8_B",
    "DQS9_B",
    "DQ0_A",
    "DQ1_A",
    "DQ2_A",
    "DQ3_A",
    "DQ4_A",
    "DQ5_A",
    "DQ6_A",
    "DQ7_A",
    "DQ8_A",
    "DQ9_A",
    "DQ10_A",
    "DQ11_A",
    "DQ12_A",
    "DQ13_A",
    "DQ14_A",
    "DQ15_A",
    "DQ16_A",
    "DQ17_A",
    "DQ18_A",
    "DQ19_A",
    "DQ20_A",
    "DQ21_A",
    "DQ22_A",
    "DQ23_A",
    "DQ24_A",
    "DQ25_A",
    "DQ26_A",
    "DQ27_A",
    "DQ28_A",
    "DQ29_A",
    "DQ30_A",
    "DQ31_A",
    "DQ0_B",
    "DQ1_B",
    "DQ2_B",
    "DQ3_B",
    "DQ4_B",
    "DQ5_B",
    "DQ6_B",
    "DQ7_B",
    "DQ8_B",
    "DQ9_B",
    "DQ10_B",
    "DQ11_B",
    "DQ12_B",
    "DQ13_B",
    "DQ14_B",
    "DQ15_B",
    "DQ16_B",
    "DQ17_B",
    "DQ18_B",
    "DQ19_B",
    "DQ20_B",
    "DQ21_B",
    "DQ22_B",
    "DQ23_B",
    "DQ24_B",
    "DQ25_B",
    "DQ26_B",
    "DQ27_B",
    "DQ28_B",
    "DQ29_B",
    "DQ30_B",
    "DQ31_B",
    "CA0_A",
    "CA1_A",
    "CA2_A",
    "CA3_A",
    "CA4_A",
    "CA5_A",
    "CA6_A",
    "CA0_B",
    "CA1_B",
    "CA2_B",
    "CA3_B",
    "CA4_B",
    "CA5_B",
    "CA6_B",
    0
};

BranchAccDDR::ConnectData BranchAccDDR::getConnectData()
{
    return (ConnectData)QueryResponse_enum(ConnectData_Strings,"ConnectData?\n");
}

const char *BranchAccDDR::Device_Strings[] =
{
    "DRAM",
    "RCD",
    "DB",
    0
};

BranchAccDDR::Device BranchAccDDR::getDevice()
{
    return (Device)QueryResponse_enum(Device_Strings,"Device?\n");
}

void BranchAccDDR::setDevice(Device newValue )
{
    SendCommand("Device \"%s\"\n",Device_Strings[(int)newValue]);
}

const char *BranchAccDDR::DramType_Strings[] =
{
    "1RX4",
    "1RX8",
    "2RX4",
    "2RX8",
    0
};

BranchAccDDR::DramType BranchAccDDR::getDramType()
{
    return (DramType)QueryResponse_enum(DramType_Strings,"DramType?\n");
}

void BranchAccDDR::setDramType(DramType newValue )
{
    SendCommand("DramType \"%s\"\n",DramType_Strings[(int)newValue]);
}

const char *BranchAccDDR::Host_Strings[] =
{
    "Host0",
    "Host1",
    "Host2",
    "Host3",
    "Host4",
    "Host5",
    "Host6",
    "Host7",
    0
};

BranchAccDDR::Host BranchAccDDR::getHost()
{
    return (Host)QueryResponse_enum(Host_Strings,"Host?\n");
}

void BranchAccDDR::setHost(Host newValue )
{
    SendCommand("Host \"%s\"\n",Host_Strings[(int)newValue]);
}

bool BranchAccDDR::getInProgress() /* Loopback in progress */
{
    return QueryResponse_bool("InProgress?\n");
}

const char *BranchAccDDR::Lane_Strings[] =
{
    "DQ0_A",
    "DQ1_A",
    "DQ2_A",
    "DQ3_A",
    "DQ4_A",
    "DQ5_A",
    "DQ6_A",
    "DQ7_A",
    "DQ8_A",
    "DQ9_A",
    "DQ10_A",
    "DQ11_A",
    "DQ12_A",
    "DQ13_A",
    "DQ14_A",
    "DQ15_A",
    "DQ16_A",
    "DQ17_A",
    "DQ18_A",
    "DQ19_A",
    "DQ20_A",
    "DQ21_A",
    "DQ22_A",
    "DQ23_A",
    "DQ24_A",
    "DQ25_A",
    "DQ26_A",
    "DQ27_A",
    "DQ28_A",
    "DQ29_A",
    "DQ30_A",
    "DQ31_A",
    "DQ0_B",
    "DQ1_B",
    "DQ2_B",
    "DQ3_B",
    "DQ4_B",
    "DQ5_B",
    "DQ6_B",
    "DQ7_B",
    "DQ8_B",
    "DQ9_B",
    "DQ10_B",
    "DQ11_B",
    "DQ12_B",
    "DQ13_B",
    "DQ14_B",
    "DQ15_B",
    "DQ16_B",
    "DQ17_B",
    "DQ18_B",
    "DQ19_B",
    "DQ20_B",
    "DQ21_B",
    "DQ22_B",
    "DQ23_B",
    "DQ24_B",
    "DQ25_B",
    "DQ26_B",
    "DQ27_B",
    "DQ28_B",
    "DQ29_B",
    "DQ30_B",
    "DQ31_B",
    "CA0_A",
    "CA1_A",
    "CA2_A",
    "CA3_A",
    "CA4_A",
    "CA5_A",
    "CA6_A",
    "CA0_B",
    "CA1_B",
    "CA2_B",
    "CA3_B",
    "CA4_B",
    "CA5_B",
    "CA6_B",
    0
};

BranchAccDDR::Lane BranchAccDDR::getLane()
{
    return (Lane)QueryResponse_enum(Lane_Strings,"Lane?\n");
}

void BranchAccDDR::setLane(Lane newValue )
{
    SendCommand("Lane \"%s\"\n",Lane_Strings[(int)newValue]);
}

char* BranchAccDDR::getLoopbackStatus(char *buffer,int buflen) /* Loopback status */
{
    return QueryResponse(buffer,buflen,"LoopbackStatus?\n");
}

bool BranchAccDDR::getPdaEarlyClocking() /* PDA Enumerate before clocking (reqd for Micron loopback) */
{
    return QueryResponse_bool("PdaEarlyClocking?\n");
}

void BranchAccDDR::setPdaEarlyClocking(bool newValue) /* PDA Enumerate before clocking (reqd for Micron loopback) */
{
    SendCommand("PdaEarlyClocking %c\n",newValue?'T':'F');
}

const char *BranchAccDDR::Phase_Strings[] =
{
    "PhaseA",
    "PhaseB",
    "PhaseC",
    "PhaseD",
    0
};

BranchAccDDR::Phase BranchAccDDR::getPhase()
{
    return (Phase)QueryResponse_enum(Phase_Strings,"Phase?\n");
}

void BranchAccDDR::setPhase(Phase newValue )
{
    SendCommand("Phase \"%s\"\n",Phase_Strings[(int)newValue]);
}

const char *BranchAccDDR::Rank_Strings[] =
{
    "R0",
    "R1",
    0
};

BranchAccDDR::Rank BranchAccDDR::getRank()
{
    return (Rank)QueryResponse_enum(Rank_Strings,"Rank?\n");
}

void BranchAccDDR::setRank(Rank newValue )
{
    SendCommand("Rank \"%s\"\n",Rank_Strings[(int)newValue]);
}

const char *BranchAccDDR::Speed_Strings[] =
{
    "DDR5-3200",
    "DDR5-3600",
    "DDR5-4000",
    "DDR5-4400",
    "DDR5-4800",
    "DDR5-5200",
    "DDR5-5600",
    "DDR5-6000",
    "DDR5-6400",
    0
};

BranchAccDDR::Speed BranchAccDDR::getSpeed()
{
    return (Speed)QueryResponse_enum(Speed_Strings,"Speed?\n");
}

void BranchAccDDR::setSpeed(Speed newValue )
{
    SendCommand("Speed \"%s\"\n",Speed_Strings[(int)newValue]);
}

void BranchAccDDR::FetchDevices() /* Fetch list of devices currently available, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::FetchDevices(), Todo: add arguments if needed\n");
    SendCommand("FetchDevices\n");
}

void BranchAccDDR::FetchLanes() /* Fetch list of lanes currently available, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::FetchLanes(), Todo: add arguments if needed\n");
    SendCommand("FetchLanes\n");
}

void BranchAccDDR::FetchPhases() /* Fetch list of phases currently available, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::FetchPhases(), Todo: add arguments if needed\n");
    SendCommand("FetchPhases\n");
}

void BranchAccDDR::Loopback() /* Start loopback (asynchronous), Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::Loopback(), Todo: add arguments if needed\n");
    SendCommand("Loopback\n");
}

void BranchAccDDR::LoopbackCancel() /* Loopback cancel, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::LoopbackCancel(), Todo: add arguments if needed\n");
    SendCommand("LoopbackCancel\n");
}

void BranchAccDDR::PowerOn() /* Power-on MIC, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::PowerOn(), Todo: add arguments if needed\n");
    SendCommand("PowerOn\n");
}

void BranchAccDDR::ProgramPhase() /* Program Phase DRAM+RCD, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDR::ProgramPhase(), Todo: add arguments if needed\n");
    SendCommand("ProgramPhase\n");
}

/* ================================================================ */

void BranchAccDDRCTC::DramMPC( int devaddr, int channel, int rank, int data ) /* devaddr(0-3F), channel(0-1), rank(0-1), data(0-FF) */
{
    SendCommand("DramMPC %d %d %d 0x%x\n", devaddr, channel, rank, data );
}

void BranchAccDDRCTC::DramMRR( int devaddr, int channel, int rank, int address ) /* devaddr(0-3F), channel(0-1), rank(0-1), address(0-FF) */
{
    SendCommand("DramMRR %d %d %d %d\n", devaddr, channel, rank, address);
}

void BranchAccDDRCTC::DramMRW( int devaddr, int channel, int rank, int address, int data) /* devaddr(0-3F), channel(0-1), rank(0-1), address(0-FF), data(0-FF) */
{
    SendCommand("DramMRW %d %d %d %d 0x%x\n", devaddr, channel, rank, address, data );
}

void BranchAccDDRCTC::DramNOP( int devaddr, int channel, int rank ) /* devaddr(0-3F), channel(0-1), rank(0-1) */
{
    SendCommand("DramNOP %d %d %d\n", devaddr, channel, rank );
}

void BranchAccDDRCTC::I2cWriteByte( int devaddr, int address, int value ) /* devaddr(0-3F), address(0-FF), value(0-FF) */
{
    SendCommand("I2cWriteByte %d %d 0x%x\n", devaddr, address, value );
}

int BranchAccDDRCTC::I2cReadByte( int devaddr, int address ) /* devaddr(0-3F), address(0-FF), value(0-FF) */
{
    return QueryResponse_int("I2cReadByte %d %d\n", devaddr, address );
}

int BranchAccDDRCTC::ReadByte(int devaddr, int channel, int address ) /* devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages) */
{
    return QueryResponse_int("ReadByte %d %d %d\n", devaddr, channel, address );
}

int BranchAccDDRCTC::ReadDword(int devaddr, int channel, int address ) /* devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages) */
{
    return QueryResponse_int("ReadDword %d %d %d\n", devaddr, channel, address );
}

void BranchAccDDRCTC::SetGpio(int pin, bool value) /* pin 0-15, value T/F */
{
    SendCommand("SetGpio %d %d\n",pin,value?1:0);
}

void BranchAccDDRCTC::WriteByte(int devaddr, int channel, int address, int value ) /*  devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FF) */
{
    SendCommand("WriteByte %d %d %d 0x%x\n", devaddr, channel, address, value );
}

void BranchAccDDRCTC::WriteDword(int devaddr, int channel, int address, int value ) /* devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FFFFFFFF) */
{
    SendCommand("WriteDword %d %d %d 0x%x\n", devaddr, channel, address, value );
}

void BranchAccDDRCTC::WriteWord(int devaddr, int channel, int address, int value ) /* devaddr(0-3F), channel(0-1), address(0-FFFF, 256-byte pages), value (0-FFFF) */
{
    SendCommand("WriteWord %d %d %d 0x%x\n", devaddr, channel, address, value );
}

/* ================================================================ */

bool BranchAccDDRDFE::getEnables(int index) /* DFE Tap enable values */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_bool("Enables[%d]?\n",index);
}

void BranchAccDDRDFE::setEnables(int index,bool newValue) /* DFE Tap enable values */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    SendCommand("Enables[%d] %c\n",index,newValue?'T':'F');
}

const char *BranchAccDDRDFE::Gain_Strings[] =
{
    "-6dB",
    "-4dB",
    "-2dB",
    "0dB",
    "2dB",
    "4dB",
    "6dB",
    0
};

BranchAccDDRDFE::Gain BranchAccDDRDFE::getGain()
{
    return (Gain)QueryResponse_enum(Gain_Strings,"Gain?\n");
}

void BranchAccDDRDFE::setGain(Gain newValue )
{
    SendCommand("Gain \"%s\"\n",Gain_Strings[(int)newValue]);
}

double BranchAccDDRDFE::getTapsMV(int index) /* DFE Tap values */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    return QueryResponse_double("Taps[%d]?\n",index);
}

void BranchAccDDRDFE::setTapsMV(int index,double newValue) /* DFE Tap values */
{
    if(index<0||index>=4) throw "[Index_Out_Of_Range]";
    SendCommand("Taps[%d] %lf\n",index,newValue);
}

void BranchAccDDRDFE::Program() /* Program DFE with current settings, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRDFE::Program(), Todo: add arguments if needed\n");
    SendCommand("Program\n");
}


/* ================================================================ */

int BranchAccDDRI2C::getAux() /* High 6 bits of control register */
{
    return QueryResponse_int("Aux?\n");
}

void BranchAccDDRI2C::setAux(int newValue) /* High 6 bits of control register */
{
    SendCommand("Aux %d\n",newValue);
}

void BranchAccDDRI2C::Read() /* Read bytes, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::Read(), Todo: add arguments if needed\n");
    SendCommand("Read\n");
}

void BranchAccDDRI2C::ReadBYTE() /* Read byte using special format, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::ReadBYTE(), Todo: add arguments if needed\n");
    SendCommand("ReadBYTE\n");
}

void BranchAccDDRI2C::ReadDWORD() /* Read DWORD using special format, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::ReadDWORD(), Todo: add arguments if needed\n");
    SendCommand("ReadDWORD\n");
}

void BranchAccDDRI2C::ReadHost() /* Read Host bytes, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::ReadHost(), Todo: add arguments if needed\n");
    SendCommand("ReadHost\n");
}

void BranchAccDDRI2C::ReadWORD() /* Read WORD using special format, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::ReadWORD(), Todo: add arguments if needed\n");
    SendCommand("ReadWORD\n");
}

void BranchAccDDRI2C::Write() /* Write bytes, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::Write(), Todo: add arguments if needed\n");
    SendCommand("Write\n");
}

void BranchAccDDRI2C::WriteBYTE() /* Write byte using special format, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::WriteBYTE(), Todo: add arguments if needed\n");
    SendCommand("WriteBYTE\n");
}

void BranchAccDDRI2C::WriteDWORD() /* Write DWORD using special format (DWORD must be hex), Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::WriteDWORD(), Todo: add arguments if needed\n");
    SendCommand("WriteDWORD\n");
}

void BranchAccDDRI2C::WriteWORD() /* Write WORD using special format (WORD must be hex), Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRI2C::WriteWORD(), Todo: add arguments if needed\n");
    SendCommand("WriteWORD\n");
}

/* ================================================================ */

double BranchAccDDRRef::getAmplMV() /* Reference clock amplitude */
{
    return QueryResponse_double("Ampl?\n");
}

void BranchAccDDRRef::setAmplMV(double newValue) /* Reference clock amplitude */
{
    SendCommand("Ampl %lf\n",newValue);
}

const char *BranchAccDDRRef::Coupling_Strings[] =
{
    "DC",
    "AC",
    0
};

BranchAccDDRRef::Coupling BranchAccDDRRef::getCoupling()
{
    return (Coupling)QueryResponse_enum(Coupling_Strings,"Coupling?\n");
}

void BranchAccDDRRef::setCoupling(Coupling newValue )
{
    SendCommand("Coupling \"%s\"\n",Coupling_Strings[(int)newValue]);
}

double BranchAccDDRRef::getDCLevelMV() /* Reference Termination DC Level */
{
    return QueryResponse_double("DCLevel?\n");
}

void BranchAccDDRRef::setDCLevelMV(double newValue) /* Reference Termination DC Level */
{
    SendCommand("DCLevel %lf\n",newValue);
}

double BranchAccDDRRef::getDelayPS() /* Ref clock delay */
{
    return QueryResponse_double("Delay?\n");
}

void BranchAccDDRRef::setDelayPS(double newValue) /* Ref clock delay */
{
    SendCommand("Delay %lf\n",newValue);
}

double BranchAccDDRRef::getImpedanceOhms() /* Reference Termination Impedance */
{
    return QueryResponse_double("Impedance?\n");
}

void BranchAccDDRRef::setImpedanceOhms(double newValue) /* Reference Termination Impedance */
{
    SendCommand("Impedance %lf\n",newValue);
}

bool BranchAccDDRRef::getInvert() /* Reference clock invert */
{
    return QueryResponse_bool("Invert?\n");
}

void BranchAccDDRRef::setInvert(bool newValue) /* Reference clock invert */
{
    SendCommand("Invert %c\n",newValue?'T':'F');
}

bool BranchAccDDRRef::getLink() /* Reference DC offsets linked */
{
    return QueryResponse_bool("Link?\n");
}

void BranchAccDDRRef::setLink(bool newValue) /* Reference DC offsets linked */
{
    SendCommand("Link %c\n",newValue?'T':'F');
}

double BranchAccDDRRef::getOffsetNegMV() /* Reference clock offset negative */
{
    return QueryResponse_double("OffsetNeg?\n");
}

void BranchAccDDRRef::setOffsetNegMV(double newValue) /* Reference clock offset negative */
{
    SendCommand("OffsetNeg %lf\n",newValue);
}

double BranchAccDDRRef::getOffsetPosMV() /* Reference clock offset */
{
    return QueryResponse_double("OffsetPos?\n");
}

void BranchAccDDRRef::setOffsetPosMV(double newValue) /* Reference clock offset */
{
    SendCommand("OffsetPos %lf\n",newValue);
}

const char *BranchAccDDRRef::TermType_Strings[] =
{
    "DC",
    "AC",
    0
};

BranchAccDDRRef::TermType BranchAccDDRRef::getTermType()
{
    return (TermType)QueryResponse_enum(TermType_Strings,"TermType?\n");
}

void BranchAccDDRRef::setTermType(TermType newValue )
{
    SendCommand("TermType \"%s\"\n",TermType_Strings[(int)newValue]);
}

/* ================================================================ */

double BranchAccDDRStress::getOpRateGbps() /* Operating rate */
{
    return QueryResponse_double("OpRate?\n");
}

void BranchAccDDRStress::setOpRateGbps(double newValue) /* Operating rate */
{
    SendCommand("OpRate %lf\n",newValue);
}

bool BranchAccDDRStress::getRJEnabled() /* RJ Enabled */
{
    return QueryResponse_bool("RJEnabled?\n");
}

void BranchAccDDRStress::setRJEnabled(bool newValue) /* RJ Enabled */
{
    SendCommand("RJEnabled %c\n",newValue?'T':'F');
}

double BranchAccDDRStress::getRJLevelPSrms() /* RJ Level RMS */
{
    return QueryResponse_double("RJLevel?\n");
}

void BranchAccDDRStress::setRJLevelPSrms(double newValue) /* RJ Level RMS */
{
    SendCommand("RJLevel %lf\n",newValue);
}

double BranchAccDDRStress::getSIAmplMV() /* SI Amplitude */
{
    return QueryResponse_double("SIAmpl?\n");
}

void BranchAccDDRStress::setSIAmplMV(double newValue) /* SI Amplitude */
{
    SendCommand("SIAmpl %lf\n",newValue);
}

bool BranchAccDDRStress::getSIEnabled() /* SI Enabled */
{
    return QueryResponse_bool("SIEnabled?\n");
}

void BranchAccDDRStress::setSIEnabled(bool newValue) /* SI Enabled */
{
    SendCommand("SIEnabled %c\n",newValue?'T':'F');
}

double BranchAccDDRStress::getSIFreqMHz() /* SI Frequency */
{
    return QueryResponse_double("SIFreq?\n");
}

void BranchAccDDRStress::setSIFreqMHz(double newValue) /* SI Frequency */
{
    SendCommand("SIFreq %lf\n",newValue);
}

bool BranchAccDDRStress::getSJEnabled() /* SJ Enabled */
{
    return QueryResponse_bool("SJEnabled?\n");
}

void BranchAccDDRStress::setSJEnabled(bool newValue) /* SJ Enabled */
{
    SendCommand("SJEnabled %c\n",newValue?'T':'F');
}

double BranchAccDDRStress::getSJFreqMHz() /* SJ Frequency */
{
    return QueryResponse_double("SJFreq?\n");
}

void BranchAccDDRStress::setSJFreqMHz(double newValue) /* SJ Frequency */
{
    SendCommand("SJFreq %lf\n",newValue);
}

double BranchAccDDRStress::getSJLevelPSpp() /* SJ Level */
{
    return QueryResponse_double("SJLevel?\n");
}

void BranchAccDDRStress::setSJLevelPSpp(double newValue) /* SJ Level */
{
    SendCommand("SJLevel %lf\n",newValue);
}

/* ================================================================ */

double BranchAccPUL::getAmplMV() /* Pulse amplitude */
{
    return QueryResponse_double("Ampl?\n");
}

void BranchAccPUL::setAmplMV(double newValue) /* Pulse amplitude */
{
    SendCommand("Ampl %lf\n",newValue);
}

double BranchAccPUL::getDiffSkewPS() /* Differential Skew */
{
    return QueryResponse_double("DiffSkew?\n");
}

void BranchAccPUL::setDiffSkewPS(double newValue) /* Differential Skew */
{
    SendCommand("DiffSkew %lf\n",newValue);
}

bool BranchAccPUL::getNegEnabled() /* Negative leg enabled */
{
    return QueryResponse_bool("NegEnabled?\n");
}

void BranchAccPUL::setNegEnabled(bool newValue) /* Negative leg enabled */
{
    SendCommand("NegEnabled %c\n",newValue?'T':'F');
}

bool BranchAccPUL::getPosEnabled() /* Positive leg enabled */
{
    return QueryResponse_bool("PosEnabled?\n");
}

void BranchAccPUL::setPosEnabled(bool newValue) /* Positive leg enabled */
{
    SendCommand("PosEnabled %c\n",newValue?'T':'F');
}

double BranchAccPUL::getTrigRateGHz() /* Trigger rate */
{
    return QueryResponse_double("TrigRate?\n");
}

void BranchAccPUL::setTrigRateGHz(double newValue) /* Trigger rate */
{
    SendCommand("TrigRate %lf\n",newValue);
}

const char *BranchAccPUL::Width_Strings[] =
{
    "1",
    "2",
    "4",
    "8",
    "16",
    0
};

BranchAccPUL::Width BranchAccPUL::getWidth()
{
    return (Width)QueryResponse_enum(Width_Strings,"Width?\n");
}

void BranchAccPUL::setWidth(Width newValue )
{
    SendCommand("Width \"%s\"\n",Width_Strings[(int)newValue]);
}

/* ================================= */

const char *BranchAccDDRTerm::CA_Strings[] =
{
    "Off",
    "480Ohm",
    "240Ohm",
    "80Ohm",
    "60Ohm",
    "40Ohm",
    0
};

BranchAccDDRTerm::CA BranchAccDDRTerm::getCA(int index)
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return (CA)QueryResponse_enum(CA_Strings,"CA[%d]?\n",index);
}

void BranchAccDDRTerm::setCA(int index,CA newValue )
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("CA[%d] \"%s\"\n",index,CA_Strings[(int)newValue]);
}

const char *BranchAccDDRTerm::CK_Strings[] =
{
    "Off",
    "480Ohm",
    "240Ohm",
    "80Ohm",
    "60Ohm",
    "40Ohm",
    0
};

BranchAccDDRTerm::CK BranchAccDDRTerm::getCK(int index)
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    return (CK)QueryResponse_enum(CK_Strings,"CK[%d]?\n",index);
}

void BranchAccDDRTerm::setCK(int index,CK newValue )
{
    if(index<0||index>=2) throw "[Index_Out_Of_Range]";
    SendCommand("CK[%d] \"%s\"\n",index,CK_Strings[(int)newValue]);
}

const char *BranchAccDDRTerm::DQ_Strings[] =
{
    "Off",
    "240Ohm",
    "120Ohm",
    "80Ohm",
    "60Ohm",
    "48Ohm",
    "40Ohm",
    "34Ohm",
    0
};

BranchAccDDRTerm::DQ BranchAccDDRTerm::getDQ()
{
    return (DQ)QueryResponse_enum(DQ_Strings,"DQ?\n");
}

void BranchAccDDRTerm::setDQ(DQ newValue )
{
    SendCommand("DQ \"%s\"\n",DQ_Strings[(int)newValue]);
}

const char *BranchAccDDRTerm::DQS_Strings[] =
{
    "Off",
    "240Ohm",
    "120Ohm",
    "80Ohm",
    "60Ohm",
    "48Ohm",
    "40Ohm",
    "34Ohm",
    0
};

BranchAccDDRTerm::DQS BranchAccDDRTerm::getDQS()
{
    return (DQS)QueryResponse_enum(DQS_Strings,"DQS?\n");
}

void BranchAccDDRTerm::setDQS(DQS newValue )
{
    SendCommand("DQS \"%s\"\n",DQS_Strings[(int)newValue]);
}

void BranchAccDDRTerm::Program() /* Program Terminations, Todo:add arguments */
{
    fprintf(stderr,"BranchAccDDRTerm::Program(), Todo: add arguments if needed\n");
    SendCommand("Program\n");
}


