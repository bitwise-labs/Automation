/* BitwiseDevice.cpp */
//================================================================================
// BOOST SOFTWARE LICENSE
//
// Copyright 2020 BitWise Laboratories Inc.
// Author.......Jim Waschura
// Contact......info@bitwiselabs.com
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
//================================================================================

#include <stdarg.h> /* va_list, va_start, va_end */
#include <stdio.h> /* vsnprintf,snprintf,fprintf */
#include <string.h> /* strcmp, strtok */
#include <unistd.h> /* usleep */
#include <stdlib.h> /* malloc, free */

#include "BitwiseDevice.h"

//================================================================================
//================================================================================

void BitwiseDevice::Connect( const char *ipaddress, int port )
{
	base::Connect(ipaddress,port);
}

//================================================================================
//================================================================================

int BitwiseDevice::unpackIntegerByKey(const char *str, const char *key )
{
	char buffer[1024];
	unpackValueByKey( buffer, 1024, str, key );
	int retn=0.0;
	if( sscanf(buffer,"%i",&retn) != 1)
		throw "[No_Integer_Found]";
	return retn;
}

double BitwiseDevice::unpackDoubleByKey(const char *str, const char *key )
{
	char buffer[1024];
	unpackValueByKey( buffer, 1024, str, key );
	double retn=0.0;
	if( sscanf(buffer,"%lf",&retn) != 1)
		throw "[No_Double_Found]";
	return retn;
}

char *BitwiseDevice::unpackValueByKey( char *buffer, int buflen, const char *str, const char *key )
{
	int keylen=0;
	if( key==0|| (keylen=strlen(key))<1 )
		throw("[Invalid_Key]");
	if( buffer==0||buflen<1 )
		throw "[Invalid_Buffer]";

	char *ptr = (char*)malloc( strlen(str)+1 ); /* buffer because strtok changes contents */
	bool found=false;

	try
	{
		memcpy( ptr, str, strlen(str)+1 );
		char *tok = strtok(ptr,"\n");

		while( tok && !found )
		{
			if(!strncmp(tok,key,keylen) && (int)strlen(tok)>keylen &&
				(tok[keylen]==' '||tok[keylen]=='\t'||tok[keylen]=='='||tok[keylen]==',' ) )
			{
				snprintf(buffer,buflen,"%s",tok+keylen+1);
				found=true;
			}
			tok = strtok(0,"\n");
		}
		free(ptr);
	}
	catch(...)
	{
		free(ptr);
		throw;
	}

	if( !found )
		throw "[Key_Not_Found]";

	return buffer;
}

//================================================================================
//================================================================================

/* add error-checking to SendCommand */
void BitwiseDevice::SendCommand( const char *command, ... )
{
	char outBuffer[4096+4] = "stc;";
	va_list argptr;
	va_start(argptr,command);

	vsnprintf(outBuffer+4,4096,command,argptr);
	va_end(argptr);

#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::SendCommand(), command: %s", outBuffer );
#endif

	base::SendCommand(outBuffer);

	char inBuffer[4096];
	base::QueryResponse(inBuffer,4096,(char*)"st?\n");

#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::SendCommand(), Status Response is: [%s]\n", inBuffer );
#endif

	if( strcmp(inBuffer,"[none]") )
	{
		static char static_throw_buffer[4096];
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-overflow"
#pragma GCC diagnostic ignored "-Wformat-truncation"
		snprintf(static_throw_buffer,4096,"[%s]",inBuffer);
#pragma GCC diagnostic pop

		throw (const char*)static_throw_buffer;
	}
}

/* add error-checking to QueryResponse */

char * BitwiseDevice::QueryResponse( char *buffer, int buflen, const char *command, ... )
{
	char outBuffer[4096+4] = "stc;";
	va_list argptr;
	va_start(argptr,command);

	vsnprintf(outBuffer+4,4096,command,argptr);
	va_end(argptr);


#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::QueryResponse(), command: %s", outBuffer );
#endif

	base::QueryResponse(buffer,buflen,outBuffer);

#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::QueryResponse(), Response is: [%s]\n", buffer );
#endif

	char inBuffer[4096];
	base::QueryResponse(inBuffer,4096,(char*)"st?\n");

#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::QueryResponse(), Status Response is: [%s]\n", inBuffer );
#endif

	if( strcmp(inBuffer,"[none]") )
	{
		static char static_throw_buffer[4096];
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-overflow"
#pragma GCC diagnostic ignored "-Wformat-truncation"
		snprintf(static_throw_buffer,4096,"[%s]",inBuffer);
#pragma GCC diagnostic pop
		throw (const char*)static_throw_buffer;
	}

#ifdef DEBUG
	if(getDebugging())
		fprintf(stderr,"BitwiseDevice::QueryResponse(), Returning: [%s]\n", buffer );
#endif

	return buffer;
}

//================================================================================
//================================================================================

/* specifying configurations: */
/* "[recent]"  ...  most recent settings */
/* "[factory]"  ... factory settings */
/* "[startup]"  ... settings from selectable startup configuration file */
/* full-path-name ... settings from fully-specified configuration file path  */
/* filename-only ... settings from file located in configuration folder */

void BitwiseDevice::SaveConfiguration( const char *configuration )
{
	base::SendCommand( "save \"%s\"\n", configuration );
}

void BitwiseDevice::RestoreConfiguration( const char *configuration, bool waitToComplete )
{
	App.Stop(); // just to make sure

	base::SendCommand( "stc; restore \"%s\"\n", configuration );/* use base: to avoid error checking */

	if( waitToComplete )
		WaitForRestoreToComplete();
}


void BitwiseDevice::WaitForRestoreToComplete()
{
	double now = timestamp();
	double timeout = now + 30.0;
	double begin_time=now;

	while( now < timeout )
	{
		usleep(500*1000);
		now = timestamp();

#ifdef DEBUG
		if( getDebugging() )
			fprintf(stderr,"Restoring configuration %.1lf\n",now-begin_time);
#endif

		char buffer[4096];
		base::QueryResponse(buffer,4096,"inprogress\n"); /* use base: to avoid error checking */
		if( buffer[0]=='F'||buffer[0]=='0' )
			break;
	}

	if( now >= timeout )
		throw "[Timeout_Restoring_Configuration]";

#ifdef DEBUG
	if( getDebugging() )
		fprintf(stderr,"Restoring configuration complete %.1lf\n",timestamp()-begin_time);
#endif

	base::SendCommand( "stc\n");/* use base: to avoid error checking */
}


//================================================================================
//================================================================================

void BitwiseDevice::Run( double waitUntilRunningTimeout )
{
	App.Run();

	if( waitUntilRunningTimeout>0 )
	{
		double now = timestamp();
		double timeout = now + waitUntilRunningTimeout;

		while( now<timeout && !getIsRunning() )
		{
			usleep( 10*1000 );
			now=timestamp();
		}

		if( now>=timeout )
			throw "[Run_Timeout]";
	}
}

void BitwiseDevice::RunSingle( double waitUntilRunningTimeout )
{
	App.Run(true);

	if( waitUntilRunningTimeout>0 )
	{
		double now = timestamp();
		double timeout = now + waitUntilRunningTimeout;

		while( now<timeout && !getIsRunning() )
		{
			usleep( 10*1000 );
			now=timestamp();
		}

		if( now>=timeout )
			throw "[Run_Once_Timeout]";
	}
}

void BitwiseDevice::WaitForRunToComplete( double timeoutSec )
{
	double now = SocketDevice::timestamp();
	double timeout = now + timeoutSec;

	while( now<timeout && getIsRunning() )
	{
		usleep( 200*1000 ); /* poll 5 times per second */
		now=SocketDevice::timestamp();
	}

	Stop();
	if( now>=timeout )
		throw "[Stop_Timeout]";
}

void BitwiseDevice::Stop()
{
	App.Stop();
}

void BitwiseDevice::Clear()
{
	App.Clear();
}

bool BitwiseDevice::getIsRunning()
{
	char buffer[4096];
	if( App.getRunState(buffer,4096)==NULL )
		throw "[Unable_To_Retrieve_Run_State]" ;

	char *ptr = strtok( buffer, "{}," );
	bool onState = false;
	while ( ptr!= NULL && !onState )
	{
		onState = onState || (strncasecmp(ptr, "Stop", 4) != 0);
		ptr = strtok(NULL,"{},");
	}

	return onState ;
}

// EOF

